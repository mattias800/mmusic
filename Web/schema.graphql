"""
The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response.
"""
directive @cost(
  """
  The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc.
  """
  weight: String!
) on ARGUMENT_DEFINITION | ENUM | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | OBJECT | SCALAR

"""
The purpose of the `@listSize` directive is to either inform the static analysis about the size of returned lists (if that information is statically available), or to point the analysis to where to find that information.
"""
directive @listSize(
  """
  The `assumedSize` argument can be used to statically define the maximum length of a list returned by a field.
  """
  assumedSize: Int

  """
  The `requireOneSlicingArgument` argument can be used to inform the static analysis that it should expect that exactly one of the defined slicing arguments is present in a query. If that is not the case (i.e., if none or multiple slicing arguments are present), the static analysis may throw an error.
  """
  requireOneSlicingArgument: Boolean! = true

  """
  The `sizedFields` argument can be used to define that the value of the `assumedSize` argument or of a slicing argument does not affect the size of a list returned by a field itself, but that of a list returned by one of its sub-fields.
  """
  sizedFields: [String!]

  """
  The `slicingArgumentDefaultValue` argument can be used to define a default value for a slicing argument, which is used if the argument is not present in a query.
  """
  slicingArgumentDefaultValue: Int

  """
  The `slicingArguments` argument can be used to define which of the field's arguments with numeric type are slicing arguments, so that their value determines the size of the list returned by that field. It may specify a list of multiple slicing arguments.
  """
  slicingArguments: [String!]
) on FIELD_DEFINITION

type AddArtistToServerLibraryArtistAlreadyAdded {
  message: String!
}

type AddArtistToServerLibraryArtistDoesNotExist {
  message: String!
}

input AddArtistToServerLibraryInput {
  artistId: ID!
}

union AddArtistToServerLibraryResult = AddArtistToServerLibraryArtistAlreadyAdded | AddArtistToServerLibraryArtistDoesNotExist | AddArtistToServerLibrarySuccess | AddArtistToServerLibraryUnknownError

type AddArtistToServerLibrarySuccess {
  serverAvailability: ArtistServerAvailability!
}

type AddArtistToServerLibraryUnknownError {
  message: String!
}

input AddReleaseGroupToServerLibraryInput {
  releaseGroupId: ID!
}

type AddReleaseGroupToServerLibraryReleaseGroupAlreadyAdded {
  message: String!
}

type AddReleaseGroupToServerLibraryReleaseGroupDoesNotExist {
  message: String!
}

union AddReleaseGroupToServerLibraryResult = AddReleaseGroupToServerLibraryReleaseGroupAlreadyAdded | AddReleaseGroupToServerLibraryReleaseGroupDoesNotExist | AddReleaseGroupToServerLibrarySuccess | AddReleaseGroupToServerLibraryUnknownError

type AddReleaseGroupToServerLibrarySuccess {
  success: Boolean!
}

type AddReleaseGroupToServerLibraryUnknownError {
  message: String!
}

type AlbumImages {
  albumCover: String
  cdArt: String
}

type Artist {
  albums: [ReleaseGroup!]!
  disambiguation: String
  id: ID!
  images: ArtistImages
  listeners: Long
  name: String!
  releaseGroups: [ReleaseGroup!]!
  releases: [Release!]!
  serverAvailability: ArtistServerAvailability!
  singles: [ReleaseGroup!]!
  sortName: String!
  topTracks: [LastFmTrack!]!
  type: String
}

type ArtistImages {
  artistBackground: String
  artistThumb: String
  hdMusicLogo: String
  musicBanner: String
  musicLogo: String
}

type ArtistInServerLibrary {
  artist: Artist
}

type ArtistSearchRoot {
  byId(id: ID!): Artist
  searchByName(limit: Int! = 25, name: String!, offset: Int! = 0): [Artist!]!
}

type ArtistServerAvailability {
  artist: Artist
  id: ID!
  isInServerLibrary: Boolean!
}

type ArtistsInServerLibrarySearchRoot {
  all: [ArtistInServerLibrary!]!
}

type CreateUserError {
  message: String!
}

input CreateUserInput {
  password: String!
  username: String!
}

union CreateUserResult = CreateUserError | CreateUserSuccess

type CreateUserSuccess {
  user: User!
}

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

type DownloadStatus {
  artistName: String
  id: ID!
  numberOfTracks: Int
  release: Release
  releaseName: String
  statusDescription: String!
  tracksDownloaded: Int
}

type DownloadsSearchRoot {
  all: [DownloadStatus!]!
}

type ExternalRoot {
  id: ID!
  soulSeek: SoulSeekRoot!
}

type Genre {
  id: ID!
  name: String!
}

type ImportPlaylistSearchRoot {
  spotify: SpotifyPlaylistSearchRoot!
}

type ImportSpotifyPlaylistError {
  message: String!
}

union ImportSpotifyPlaylistResult = ImportSpotifyPlaylistError | ImportSpotifyPlaylistSuccess

type ImportSpotifyPlaylistSuccess {
  success: Boolean!
}

type LastFmStatistics {
  listeners: Long!
  playCount: Long!
}

type LastFmTrack {
  id: ID!
  playCount: Long
  recording: Recording
  summary: String
  userPlayCount: Int
}

type LikeSongAlreadyLiked {
  message: String!
}

input LikeSongInput {
  recordingId: String!
}

union LikeSongResult = LikeSongAlreadyLiked | LikeSongSongDoesNotExist | LikeSongSuccess

type LikeSongSongDoesNotExist {
  message: String!
}

type LikeSongSuccess {
  viewer: User!
}

type LikedSong {
  id: ID!
  recording: Recording
}

"""
The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Medium {
  trackCount: Int!
  tracks: [Track!]!
}

type Mutation {
  addArtistToServerLibrary(input: AddArtistToServerLibraryInput!): AddArtistToServerLibraryResult!
  addReleaseGroupToServerLibrary(input: AddReleaseGroupToServerLibraryInput!): AddReleaseGroupToServerLibraryResult!
  createUser(input: CreateUserInput!): CreateUserResult!
  importSpotifyPlaylistById(playlistId: String!, userId: UUID!): ImportSpotifyPlaylistResult!
  likeSong(input: LikeSongInput!): LikeSongResult!
  ping: Boolean!
  signIn(input: SignInInput!): SignInResult!
  startDownloadRelease(input: StartDownloadReleaseInput!): StartDownloadReleaseResult!
  unlikeSong(input: UnlikedSongInput!): UnlikedSongPayload!
}

type NameCredit {
  artist: Artist!
  joinPhrase: String
  name: String!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type Ping {
  id: ID!
}

type PlaylistSearchRoot {
  importPlaylists: ImportPlaylistSearchRoot!
}

type Query {
  artist: ArtistSearchRoot!
  download: DownloadsSearchRoot!
  external: ExternalRoot!
  playlist: PlaylistSearchRoot!
  recording: RecordingSearchRoot!
  release: ReleaseSearchRoot!
  releaseGroup: ReleaseGroupSearchRoot!
  serverLibrary: ServerLibrarySearchRoot!
  user: UserSearchRoot!
  viewer: User
}

type Recording {
  artists: [Artist!]!
  id: ID!
  length: Int
  mainAlbum: Release
  nameCredits: [NameCredit!]!
  relations: [Relation!]!
  releases: [Release!]!
  statistics: LastFmStatistics
  streamingServiceInfo: RecordingStreamingServiceInfo!
  title: String!
}

type RecordingSearchRoot {
  byId(id: ID!): Recording
  searchByName(limit: Int! = 25, name: String!, offset: Int! = 0): [Recording!]!
}

type RecordingStreamingServiceInfo {
  id: ID!
  youtubeMusicUrl: String
  youtubeSearchVideoId: String
  youtubeVideoId: String
}

type Relation {
  attributes: [String!]
  begin: String
  direction: String
  end: String
  targetType: String
  type: String
  typeId: String
  url: Url
}

type Release {
  artists: [Artist!]!
  barcode: String
  country: String
  coverArtUri: String!
  credits: [NameCredit!]!
  date: String
  genres: [Genre!]!
  id: ID!
  media: [Medium!]!
  quality: String
  recordings: [Recording!]!
  releaseGroup: ReleaseGroup
  status: String
  title: String!
  year: String
}

type ReleaseGroup {
  coverArtUri: String
  credits: [NameCredit!]!
  firstReleaseDate: String
  firstReleaseYear: String
  id: ID!
  images: AlbumImages
  mainRelease: Release
  primaryType: String
  relations: [Relation!]!
  secondaryTypes: [String!]!
  tags: [String!]!
  title: String!
}

type ReleaseGroupInServerLibrary {
  releaseGroup: ReleaseGroup
}

type ReleaseGroupSearchRoot {
  byId(id: ID!): ReleaseGroup
  id: ID!
  searchByName(limit: Int! = 25, name: String!, offset: Int! = 0): [ReleaseGroup!]!
}

type ReleaseGroupsInServerLibrarySearchRoot {
  all: [ReleaseGroupInServerLibrary!]!
}

type ReleaseSearchRoot {
  byId(id: ID!): Release
  searchByName(limit: Int! = 25, name: String!, offset: Int! = 0): [Release!]!
}

type ServerLibrarySearchRoot {
  artistsInServerLibrary: ArtistsInServerLibrarySearchRoot!
  releaseGroupsInServerLibrary: ReleaseGroupsInServerLibrarySearchRoot!
}

type SignInError {
  message: String!
}

input SignInInput {
  password: String!
  username: String!
}

union SignInResult = SignInError | SignInSuccess

type SignInSuccess {
  user: User!
}

type SoulSeekRoot {
  id: ID!
  status: SoulSeekStatus!
}

type SoulSeekStatus {
  id: ID!
  status: SoulSeekStatusType!
}

enum SoulSeekStatusType {
  CONNECTING
  OFFLINE
  ONLINE
}

type SpotifyPlaylist {
  coverImageUrl: String
  description: String
  id: String!
  name: String!
}

type SpotifyPlaylistSearchRoot {
  spotifyPlaylistsForUser(username: String!): [SpotifyPlaylist!]!
}

input StartDownloadReleaseInput {
  releaseId: String!
}

union StartDownloadReleaseResult = StartDownloadReleaseSuccess

type StartDownloadReleaseSuccess {
  success: Boolean!
}

type Subscription {
  downloadStarted: DownloadStatus!
  downloadStatusUpdated: DownloadStatus!
  ping: Ping!
  soulSeekStatusUpdated: SoulSeekStatus!
}

type Track {
  id: ID!
  position: Int!
  recording: Recording!
}

scalar UUID

input UnlikedSongInput {
  recordingId: String!
}

type UnlikedSongPayload {
  success: Boolean!
}

type Url {
  id: String
  resource: String
}

type User {
  createdAt: DateTime!
  id: ID!
  likedSongs: [LikedSong!]!
  updatedAt: DateTime!
  username: String!
}

type UserProjection {
  createdAt: DateTime!
  passwordHash: String
  updatedAt: DateTime!
  userId: UUID!
  username: String!
}

type UserSearchRoot {
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): UsersConnection
}

"""A connection to a list of items."""
type UsersConnection {
  """A list of edges."""
  edges: [UsersEdge!]

  """A flattened list of the nodes."""
  nodes: [User!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: User!
}