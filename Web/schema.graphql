"""
The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response.
"""
directive @cost(
  """
  The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc.
  """
  weight: String!
) on ARGUMENT_DEFINITION | ENUM | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | OBJECT | SCALAR

"""
The purpose of the `@listSize` directive is to either inform the static analysis about the size of returned lists (if that information is statically available), or to point the analysis to where to find that information.
"""
directive @listSize(
  """
  The `assumedSize` argument can be used to statically define the maximum length of a list returned by a field.
  """
  assumedSize: Int

  """
  The `requireOneSlicingArgument` argument can be used to inform the static analysis that it should expect that exactly one of the defined slicing arguments is present in a query. If that is not the case (i.e., if none or multiple slicing arguments are present), the static analysis may throw an error.
  """
  requireOneSlicingArgument: Boolean! = true

  """
  The `sizedFields` argument can be used to define that the value of the `assumedSize` argument or of a slicing argument does not affect the size of a list returned by a field itself, but that of a list returned by one of its sub-fields.
  """
  sizedFields: [String!]

  """
  The `slicingArgumentDefaultValue` argument can be used to define a default value for a slicing argument, which is used if the argument is not present in a query.
  """
  slicingArgumentDefaultValue: Int

  """
  The `slicingArguments` argument can be used to define which of the field's arguments with numeric type are slicing arguments, so that their value determines the size of the list returned by that field. It may specify a list of multiple slicing arguments.
  """
  slicingArguments: [String!]
) on FIELD_DEFINITION

type AddArtistToServerLibraryArtistAlreadyAdded {
  message: String!
}

type AddArtistToServerLibraryArtistDoesNotExist {
  message: String!
}

input AddArtistToServerLibraryInput {
  artistId: ID!
}

union AddArtistToServerLibraryResult = AddArtistToServerLibraryArtistAlreadyAdded | AddArtistToServerLibraryArtistDoesNotExist | AddArtistToServerLibrarySuccess | AddArtistToServerLibraryUnknownError

type AddArtistToServerLibrarySuccess {
  success: Boolean!
}

type AddArtistToServerLibraryUnknownError {
  message: String!
}

"""Defines when a policy shall be executed."""
enum ApplyPolicy {
  """After the resolver was executed."""
  AFTER_RESOLVER

  """Before the resolver was executed."""
  BEFORE_RESOLVER

  """The policy is applied in the validation step before the execution."""
  VALIDATION
}

type Artist {
  albums: [Release!]!
  eps: [Release!]!
  id: ID!
  images: ArtistImages
  listeners: Long
  name: String!
  releaseByFolderName(releaseFolderName: String!): Release
  releases: [Release!]!
  serverStatus: ArtistServerStatus!
  singles: [Release!]!
  sortName: String!
  topTracks: [ArtistTopTrack!]!
}

type ArtistImages {
  backgrounds: [String!]!
  banners: [String!]!
  logos: [String!]!
  thumbs: [String!]!
}

type ArtistServerStatus {
  id: ID!
  result: ArtistServerStatusResult!
}

type ArtistServerStatusImportingArtist implements ArtistServerStatusResultBase {
  artistMbId: String!
  releasesVisible: Boolean!
  topTracksVisible: Boolean!
}

type ArtistServerStatusImportingArtistReleases implements ArtistServerStatusResultBase {
  artist: Artist!
  numReleaseGroupsFinishedImporting: Int!
  releasesVisible: Boolean!
  topTracksVisible: Boolean!
  totalNumReleaseGroupsBeingImported: Int!
}

type ArtistServerStatusNotInLibrary implements ArtistServerStatusResultBase {
  artistMbId: String!
  releasesVisible: Boolean!
  topTracksVisible: Boolean!
}

type ArtistServerStatusReady implements ArtistServerStatusResultBase {
  artistMbId: String!
  releasesVisible: Boolean!
  topTracksVisible: Boolean!
}

union ArtistServerStatusResult = ArtistServerStatusImportingArtist | ArtistServerStatusImportingArtistReleases | ArtistServerStatusNotInLibrary | ArtistServerStatusReady | ArtistServerStatusUpdatingArtist | ArtistServerStatusUpdatingArtistReleases

interface ArtistServerStatusResultBase {
  releasesVisible: Boolean!
  topTracksVisible: Boolean!
}

type ArtistServerStatusUpdatingArtist implements ArtistServerStatusResultBase {
  artistMbId: String!
  releasesVisible: Boolean!
  topTracksVisible: Boolean!
}

type ArtistServerStatusUpdatingArtistReleases implements ArtistServerStatusResultBase {
  artistMbId: String!
  releasesVisible: Boolean!
  topTracksVisible: Boolean!
}

type ArtistTopTrack {
  coverArtUrl: String
  playCount: Long
  releaseTitle: String
  title: String!
  track: Track
  trackLength: Int
}

type CacheStatistics {
  artistCount: Int!
  isInitialized: Boolean!
  lastUpdated: DateTime!
  releaseCount: Int!
  trackCount: Int!
}

union CreatePlaylistResult = CreatePlaylistSuccess

type CreatePlaylistSuccess {
  viewer: User!
}

type CreateUserError {
  message: String!
}

input CreateUserInput {
  password: String!
  username: String!
}

union CreateUserResult = CreateUserError | CreateUserSuccess

type CreateUserSuccess {
  user: User!
}

"""The `DateTime` scalar represents an ISO-8601 compliant date time type."""
scalar DateTime

input DeletePlaylistInput {
  playlistId: String!
}

type DeletePlaylistNoWriteAccess {
  message: String!
}

union DeletePlaylistResult = DeletePlaylistNoWriteAccess | DeletePlaylistSuccess

type DeletePlaylistSuccess {
  viewer: User!
}

type ExternalRoot {
  id: ID!
  soulSeek: SoulSeekRoot!
}

type FileSystemEntry {
  hasChildren: Boolean!
  id: ID!
  isAccessible: Boolean!
  isDirectory: Boolean!
  name: String!
  path: String!
}

type FileSystemSearchRoot {
  browseFileSystem(path: String): [FileSystemEntry!]!
}

type ImportArtistResult {
  artistId: String
  artistName: String!
  errorMessage: String
  musicBrainzId: String
  photosDownloaded: PhotosDownloaded!
  spotifyId: String
  success: Boolean!
}

type ImportPlaylistSearchRoot {
  spotify: SpotifyPlaylistSearchRoot!
}

type ImportReleasesResult {
  artistId: String!
  errorMessage: String
  failedReleases: Int!
  importedReleases: [ImportedRelease!]!
  success: Boolean!
  successfulReleases: Int!
  totalReleases: Int!
}

type ImportSpotifyPlaylistError {
  message: String!
}

union ImportSpotifyPlaylistResult = ImportSpotifyPlaylistError | ImportSpotifyPlaylistSuccess

type ImportSpotifyPlaylistSuccess {
  success: Boolean!
}

type ImportedRelease {
  errorMessage: String
  releaseGroupId: String!
  success: Boolean!
  title: String!
}

type LastFmAlbum {
  album: MbReleaseGroup
  id: ID!
  imageUrl: String
  mbid: String!
  name: String!
  statistics: LastFmStatistics!
}

type LastFmArtist {
  artist: Artist
  id: ID!
  images: ArtistImages
  musicBrainzArtist: MbArtist
  name: String!
  statistics: LastFmStatistics!
  summary: String
  topTracks: [LastFmTrack!]!
}

type LastFmStatistics {
  listeners: Long!
  playCount: Long!
}

type LastFmTag {
  name: String!
  url: String!
}

type LastFmTrack {
  album: LastFmAlbum
  artist: LastFmArtist!
  id: ID!
  images: ArtistImages
  mbid: String
  musicBrainzRecording: MbRecording
  name: String!
  playCount: Long
  recording: Track
  statistics: LastFmStatistics!
  summary: String
}

type LibraryCacheTrackStatus {
  artistId: String!
  releaseFolderName: String!
  track: Track
  trackNumber: Int!
}

type LikeSongAlreadyLiked {
  message: String!
}

input LikeSongInput {
  recordingId: String!
}

union LikeSongResult = LikeSongAlreadyLiked | LikeSongSongDoesNotExist | LikeSongSuccess

type LikeSongSongDoesNotExist {
  message: String!
}

type LikeSongSuccess {
  viewer: User!
}

type LikedSong {
  id: ID!
  recording: MbRecording
}

"""
The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type MbAlbumImages {
  albumCover: String
  cdArt: String
}

type MbArtist {
  albums: [MbReleaseGroup!]!
  disambiguation: String
  id: ID!
  images: ArtistImages
  listeners: Long
  name: String!
  releaseGroups: [MbReleaseGroup!]!
  releases: [MbRelease!]!
  serverStatus: ArtistServerStatus!
  singles: [MbReleaseGroup!]!
  sortName: String!
  topTracks: [LastFmTrack!]!
  type: String
}

type MbGenre {
  id: ID!
  name: String!
}

type MbLabel {
  disambiguation: String
  id: String!
  name: String!
}

type MbLabelInfo {
  catalogNumber: String
  label: MbLabel!
}

type MbMedium {
  trackCount: Int!
  tracks: [MbTrack!]!
}

type MbNameCredit {
  artist: MbArtist!
  joinPhrase: String
  name: String!
}

type MbRecording {
  artists: [MbArtist!]!
  id: ID!
  length: Int
  mainAlbum: MbRelease
  nameCredits: [MbNameCredit!]!
  relations: [MbRelation!]!
  releases: [MbRelease!]!
  statistics: LastFmStatistics
  streamingServiceInfo: MbRecordingStreamingServiceInfo!
  title: String!
}

type MbRecordingStreamingServiceInfo {
  id: ID!
  youtubeMusicUrl: String
  youtubeSearchVideoId: String
  youtubeVideoId: String
}

type MbRelation {
  attributes: [String!]
  begin: String
  direction: String
  end: String
  targetType: String
  type: String
  typeId: String
  url: Url
}

type MbRelease {
  artists: [MbArtist!]!
  barcode: String
  country: String
  coverArtUri: String!
  credits: [MbNameCredit!]!
  date: String
  genres: [MbGenre!]!
  id: ID!
  labels: [MbLabelInfo!]!
  media: [MbMedium!]!
  quality: String
  recordings: [MbRecording!]!
  releaseGroup: MbReleaseGroup
  status: String
  title: String!
  year: String
}

type MbReleaseGroup {
  coverArtUri: String
  credits: [MbNameCredit!]!
  firstReleaseDate: String
  firstReleaseYear: String
  id: ID!
  images: MbAlbumImages
  mainRelease: MbRelease
  primaryType: String
  relations: [MbRelation!]!
  secondaryTypes: [String!]!
  tags: [String!]!
  title: String!
}

type MbTrack {
  id: ID!
  mbRecording: MbRecording!
  position: Int!
}

enum MediaAvailabilityStatus {
  AVAILABLE
  DOWNLOADING
  MISSING
  PROCESSING
  QUEUED_FOR_DOWNLOAD
  UNKNOWN
}

type MusicBrainzArtistSearchRoot {
  byId(id: ID!): MbArtist
  searchByName(limit: Int! = 25, name: String!, offset: Int! = 0): [MbArtist!]!
}

type MusicBrainzRecordingSearchRoot {
  byId(id: ID!): MbRecording
  searchByName(limit: Int! = 25, name: String!, offset: Int! = 0): [MbRecording!]!
}

type MusicBrainzReleaseGroupSearchRoot {
  byId(id: ID!): MbReleaseGroup
  searchByName(limit: Int! = 25, name: String!, offset: Int! = 0): [MbReleaseGroup!]!
}

type MusicBrainzReleaseSearchRoot {
  byId(id: ID!): MbRelease
  searchByName(limit: Int! = 25, name: String!, offset: Int! = 0): [MbRelease!]!
}

type MusicBrainzSearchRoot {
  artist: MusicBrainzArtistSearchRoot!
  recording: MusicBrainzRecordingSearchRoot!
  release: MusicBrainzReleaseSearchRoot!
  releaseGroup: MusicBrainzReleaseGroupSearchRoot!
}

type Mutation {
  addArtistToServerLibrary(input: AddArtistToServerLibraryInput!): AddArtistToServerLibraryResult!
  createDirectory(path: String!): FileSystemEntry!
  createPlaylist: CreatePlaylistResult!
  createUser(input: CreateUserInput!): CreateUserResult!
  deletePlaylist(input: DeletePlaylistInput!): DeletePlaylistResult!
  importArtist(artistName: String!): ImportArtistResult!
  importArtistReleases(artistId: String!): ImportReleasesResult!
  importSpotifyPlaylistById(playlistId: String!, userId: UUID!): ImportSpotifyPlaylistResult!
  likeSong(input: LikeSongInput!): LikeSongResult!
  ping: Boolean!
  redownloadRelease(artistId: String!, releaseFolderName: String!): RedownloadReleaseResult!
  refreshArtistLastFm(input: RefreshArtistLastFmInput!): RefreshArtistLastFmResult!
  refreshArtistTopTracks(input: RefreshArtistTopTracksInput!): RefreshArtistTopTracksResult!
  reimportRelease(artistId: String!, releaseFolderName: String!): ReimportReleaseResult!
  renamePlaylist(input: RenamePlaylistInput!): RenamePlaylistResult!
  scanLibraryForMissingJson: ScanLibraryForMissingJsonResult!
  signIn(input: SignInInput!): SignInResult!
  signOut: SignOutResult!
  startDownloadRelease(input: StartDownloadReleaseInput!): StartDownloadReleaseResult!
  unlikeSong(input: UnlikedSongInput!): UnlikedSongPayload!
  updateDownloadPath(input: UpdateDownloadPathInput!): UpdateDownloadPathResult!
  updateLibraryPath(input: UpdateLibraryPathInput!): UpdateLibraryPathResult!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: String

  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String
}

type PhotosDownloaded {
  backgrounds: Int!
  banners: Int!
  logos: Int!
  thumbs: Int!
}

type Ping {
  id: ID!
}

type Playlist {
  coverImageUrl: String
  createdAt: DateTime!
  id: ID!
  modifiedAt: DateTime
  name: String
  tracks: [Track!]!
}

type PlaylistSearchRoot {
  importPlaylists: ImportPlaylistSearchRoot!
}

type Query {
  areThereAnyUsers: Boolean!
  external: ExternalRoot!
  fileSystem: FileSystemSearchRoot!
  musicBrainz: MusicBrainzSearchRoot!
  playlist: PlaylistSearchRoot!
  recommendations: RecommendationsSearchRoot!
  serverLibrary: ServerLibrarySearchRoot!
  serverSettings: ServerSettings!
  user: UserSearchRoot!
  viewer: User
}

type RecommendationsSearchRoot {
  topArtists: [LastFmArtist!]!
  topTags: [LastFmTag!]!
  topTracks: [LastFmTrack!]!
}

type RedownloadReleaseError {
  message: String!
}

union RedownloadReleaseResult = RedownloadReleaseError | RedownloadReleaseSuccess

type RedownloadReleaseSuccess {
  success: Boolean!
}

type RefreshArtistLastFmError {
  message: String!
}

input RefreshArtistLastFmInput {
  artistId: String!
}

union RefreshArtistLastFmResult = RefreshArtistLastFmError | RefreshArtistLastFmSuccess

type RefreshArtistLastFmSuccess {
  success: Boolean!
}

input RefreshArtistTopTracksInput {
  artistId: String!
}

union RefreshArtistTopTracksResult = RefreshArtistTopTracksSuccess | RefreshArtistTopTracksUnknownError

type RefreshArtistTopTracksSuccess {
  artist: Artist!
}

type RefreshArtistTopTracksUnknownError {
  message: String!
}

type ReimportReleaseError {
  message: String!
}

union ReimportReleaseResult = ReimportReleaseError | ReimportReleaseSuccess

type ReimportReleaseSuccess {
  success: Boolean!
}

type Release {
  artist: Artist!
  coverArtUrl: String!
  firstReleaseDate: String
  firstReleaseYear: String
  folderName: String!
  id: ID!
  isFullyMissing: Boolean!
  title: String!
  tracks: [Track!]!
  type: ReleaseType
}

enum ReleaseType {
  ALBUM
  EP
  SINGLE
}

input RenamePlaylistInput {
  newPlaylistName: String!
  playlistId: String!
}

type RenamePlaylistNoWriteAccess {
  message: String!
}

union RenamePlaylistResult = RenamePlaylistNoWriteAccess | RenamePlaylistSuccess

type RenamePlaylistSuccess {
  viewer: User!
}

union ScanLibraryForMissingJsonResult = ScanLibraryForMissingJsonSuccess

type ScanLibraryForMissingJsonSuccess {
  artistsCreated: Int!
  errorMessage: String
  notes: [String!]!
  releasesCreated: Int!
  success: Boolean!
}

type ServerLibrarySearchRoot {
  allArtists: [Artist!]!
  allReleases: [Release!]!
  allTracks: [Track!]!
  artistById(id: ID!): Artist
  libraryStatistics: CacheStatistics!
  releasesForArtist(artistId: ID!): [Release!]!
  searchArtists(limit: Int! = 20, searchTerm: String!): [Artist!]!
  searchReleases(limit: Int! = 20, searchTerm: String!): [Release!]!
  searchTracks(limit: Int! = 20, searchTerm: String!): [Track!]!
  tracksForArtist(artistId: ID!): [Track!]!
}

type ServerSettings {
  downloadPath: String!
  id: ID!
  libraryPath: String!
}

type SignInError {
  message: String!
}

input SignInInput {
  password: String!
  username: String!
}

union SignInResult = SignInError | SignInSuccess

type SignInSuccess {
  user: User!
}

type SignOutError {
  message: String!
}

union SignOutResult = SignOutError | SignOutSuccess

type SignOutSuccess {
  success: Boolean!
}

type SoulSeekRoot {
  id: ID!
  status: SoulSeekStatus!
}

type SoulSeekStatus {
  id: ID!
  status: SoulSeekStatusType!
}

enum SoulSeekStatusType {
  CONNECTING
  OFFLINE
  ONLINE
}

type SpotifyPlaylist {
  coverImageUrl: String
  description: String
  id: String!
  name: String!
}

type SpotifyPlaylistSearchRoot {
  spotifyPlaylistsForUser(username: String!): [SpotifyPlaylist!]!
}

input StartDownloadReleaseInput {
  artistId: String!
  releaseFolderName: String!
}

union StartDownloadReleaseResult = StartDownloadReleaseSuccess

type StartDownloadReleaseSuccess {
  success: Boolean!
}

type Subscription {
  artistServerStatusUpdated(artistId: ID!): ArtistServerStatus!
  libraryCacheTrackUpdated(artistId: String!, releaseFolderName: String!, trackNumber: Int!): LibraryCacheTrackStatus!
  libraryCacheTracksInReleaseUpdated(artistId: String!, releaseFolderName: String!): LibraryCacheTrackStatus!
  ping: Ping!
  soulSeekStatusUpdated: SoulSeekStatus!
}

type Track {
  audioUrl: String!
  id: ID!
  isMissing: Boolean!
  mediaAvailabilityStatus: MediaAvailabilityStatus!
  playCount: Long
  release: Release!
  statistics: LastFmStatistics
  title: String!
  trackLength: Int
  trackNumber: Int!
}

scalar UUID

input UnlikedSongInput {
  recordingId: String!
}

type UnlikedSongPayload {
  success: Boolean!
}

input UpdateDownloadPathInput {
  newDownloadPath: String!
}

union UpdateDownloadPathResult = UpdateDownloadPathSuccess

type UpdateDownloadPathSuccess {
  serverSettings: ServerSettings!
}

input UpdateLibraryPathInput {
  newLibraryPath: String!
}

union UpdateLibraryPathResult = UpdateLibraryPathSuccess

type UpdateLibraryPathSuccess {
  serverSettings: ServerSettings!
}

type Url {
  id: String
  resource: String
}

type User {
  createdAt: DateTime!
  id: ID!
  likedSongs: [LikedSong!]!
  playlists: [Playlist!]!
  updatedAt: DateTime!
  username: String!
}

type UserSearchRoot {
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: String

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the last _n_ elements from the list."""
    last: Int
  ): UsersConnection
}

"""A connection to a list of items."""
type UsersConnection {
  """A list of edges."""
  edges: [UsersEdge!]

  """A flattened list of the nodes."""
  nodes: [User!]

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""An edge in a connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: String!

  """The item at the end of the edge."""
  node: User!
}