/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query Bootstrap {\n    areThereAnyUsers\n    viewer {\n      id\n    }\n  }\n": typeof types.BootstrapDocument,
    "\n  query AdminUsersPage {\n    user {\n      users {\n        nodes {\n          ...UserAdminPanel_User\n        }\n      }\n    }\n    viewer {\n      id\n      ...UserAdminPanel_Viewer\n      roles\n      isAdmin\n    }\n  }\n": typeof types.AdminUsersPageDocument,
    "\n  query AlbumListQuery {\n    serverLibrary {\n      allReleases {\n        id\n        ...AlbumList_Release\n      }\n    }\n  }\n": typeof types.AlbumListQueryDocument,
    "\n  query AlbumQuery($artistId: ID!, $releaseFolderName: String!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        name\n        releaseByFolderName(releaseFolderName: $releaseFolderName) {\n          id\n          title\n          ...AlbumPanel_Release\n        }\n      }\n    }\n  }\n": typeof types.AlbumQueryDocument,
    "\n  query ArtistListQuery {\n    serverLibrary {\n      allArtists {\n        id\n        ...ArtistList_Artist\n      }\n    }\n  }\n": typeof types.ArtistListQueryDocument,
    "\n  query ArtistQuery($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        name\n        ...ArtistPanel_Artist\n      }\n    }\n  }\n": typeof types.ArtistQueryDocument,
    "\n  query IndexPageQuery {\n    serverLibrary {\n      ...ServerLibraryStatisticsHeader_ServerLibrary\n    }\n  }\n": typeof types.IndexPageQueryDocument,
    "\n  query LikedSongsQuery {\n    viewer {\n      id\n      ...LikedSongsList_User\n    }\n  }\n": typeof types.LikedSongsQueryDocument,
    "\n  query MbArtistQuery($mbArtistId: ID!) {\n    musicBrainz {\n      artist {\n        byId(id: $mbArtistId) {\n          id\n          name\n          ...ArtistNotInLibraryPanel_MbArtist\n        }\n      }\n    }\n  }\n": typeof types.MbArtistQueryDocument,
    "\n  query PlaylistQuery($playlistId: ID!) {\n    playlist {\n      byId(playlistId: $playlistId) {\n        id\n        name\n        ...PlaylistPanel_Playlist\n      }\n    }\n  }\n": typeof types.PlaylistQueryDocument,
    "\n  query QueuesPage_Query {\n    downloads {\n      downloadSlots {\n        id\n        isActive\n        isWorking\n        currentWork {\n          artistId\n          releaseFolderName\n        }\n        currentProgress {\n          id\n          artistId\n          releaseFolderName\n          status\n          totalTracks\n          completedTracks\n          errorMessage\n          artistName\n          releaseTitle\n          coverArtUrl\n          currentTrackProgressPercent\n          currentDownloadSpeedKbps\n          currentProvider\n          currentProviderIndex\n          totalProviders\n        }\n        startedAt\n        lastActivityAt\n        status\n      }\n      downloadQueue {\n        id\n        queueLength\n        items {\n          id\n          artistId\n          releaseFolderName\n          queueKey\n        }\n      }\n      downloadHistory {\n        timestampUtc\n        artistId\n        releaseFolderName\n        artistName\n        releaseTitle\n        success\n        errorMessage\n        providerUsed\n      }\n    }\n    artistImport {\n      currentArtistImport {\n        id\n        artistName\n        statusInfo {\n          id\n          text\n        }\n        totalReleases\n        completedReleases\n        errorMessage\n      }\n      artistImportQueue {\n        id\n        queueLength\n        items {\n          id\n          artistName\n          songTitle\n          releaseFolderName\n          queueKey\n        }\n      }\n      artistImportHistory {\n        timestampUtc\n        jobKind\n        artistName\n        localArtistId\n        releaseFolderName\n        musicBrainzArtistId\n        songTitle\n        success\n        errorMessage\n      }\n    }\n  }\n": typeof types.QueuesPage_QueryDocument,
    "\n  subscription QueuesPage_DownloadQueueUpdated {\n    downloadQueueUpdated {\n      id\n      queueLength\n      id\n      items {\n        id\n        artistId\n        releaseFolderName\n        queueKey\n      }\n    }\n  }\n": typeof types.QueuesPage_DownloadQueueUpdatedDocument,
    "\n  subscription QueuesPage_SlotProgressUpdated {\n    slotProgressUpdated {\n      slotId\n      progress {\n        id\n        artistId\n        releaseFolderName\n        status\n        totalTracks\n        completedTracks\n        errorMessage\n        artistName\n        releaseTitle\n        coverArtUrl\n        currentTrackProgressPercent\n        currentDownloadSpeedKbps\n        currentProvider\n        currentProviderIndex\n        totalProviders\n      }\n    }\n  }\n": typeof types.QueuesPage_SlotProgressUpdatedDocument,
    "\n  subscription QueuesPage_ArtistImportQueueUpdated {\n    artistImportQueueUpdated {\n      id\n      queueLength\n      items {\n        id\n        artistName\n        songTitle\n        queueKey\n      }\n    }\n  }\n": typeof types.QueuesPage_ArtistImportQueueUpdatedDocument,
    "\n  subscription QueuesPage_CurrentArtistImportUpdated {\n    currentArtistImportUpdated {\n      id\n      artistName\n      songTitle\n      statusInfo {\n        id\n        text\n      }\n      totalReleases\n      completedReleases\n      errorMessage\n    }\n  }\n": typeof types.QueuesPage_CurrentArtistImportUpdatedDocument,
    "\n  mutation RemoveDownloadJob($queueKey: String!) {\n    removeDownloadJob(queueKey: $queueKey)\n  }\n": typeof types.RemoveDownloadJobDocument,
    "\n  mutation RemoveArtistImportJob($queueKey: String!) {\n    removeArtistImportJob(queueKey: $queueKey)\n  }\n": typeof types.RemoveArtistImportJobDocument,
    "\n  query SettingsPage {\n    serverSettings {\n      id\n      ...LibraryPathForm_ServerSettings\n      libraryPath\n      downloadSlotCount\n      listenBrainzTopTracksEnabled\n      spotifyTopTracksEnabled\n      lastFmTopTracksEnabled\n      publicBaseUrl\n    }\n  }\n": typeof types.SettingsPageDocument,
    "\n  query SpotifyPlaylistDetails($playlistId: String!) {\n    playlist {\n      importPlaylists {\n        spotify {\n          byId: spotifyPlaylistById(id: $playlistId) {\n            id\n            ...SpotifyPlaylistPanel_SpotifyPlaylist\n          }\n        }\n      }\n    }\n  }\n": typeof types.SpotifyPlaylistDetailsDocument,
    "\n  query ProfilePage {\n    viewer {\n      id\n      username\n      ...UserProfilePanel_User\n    }\n  }\n": typeof types.ProfilePageDocument,
    "\n  mutation ImportArtist($musicBrainzArtistId: String!) {\n    importArtist(input: { musicBrainzArtistId: $musicBrainzArtistId }) {\n      __typename\n      ... on ImportArtistSuccess {\n        artist {\n          id\n          name\n        }\n      }\n      ... on ImportArtistError {\n        message\n      }\n    }\n  }\n": typeof types.ImportArtistDocument,
    "\n  fragment AlbumCard_Release on Release {\n    id\n    title\n    firstReleaseYear\n    coverArtUrl\n    folderName\n    isFullyMissing\n    artistName\n    artist {\n      id\n      images {\n        thumbs\n      }\n    }\n  }\n": typeof types.AlbumCard_ReleaseFragmentDoc,
    "\n  fragment AlbumHeader_Release on Release {\n    id\n    title\n    type\n    coverArtUrl\n    firstReleaseYear\n    artistName\n    artist {\n      id\n      name\n      images {\n        thumbs\n      }\n    }\n    tracks {\n      id\n      trackLength\n    }\n  }\n": typeof types.AlbumHeader_ReleaseFragmentDoc,
    "\n  fragment AlbumPanel_Release on Release {\n    id\n    folderName\n    isFullyMissing\n    ...PlayAlbumButton_Release\n    ...ReleaseDownloadButton_Release\n    ...AlbumHeader_Release\n    ...AlbumTrackList_Release\n    firstReleaseYear\n    labels {\n      name\n      id\n      catalogNumber\n      disambiguation\n    }\n    artist {\n      id\n    }\n  }\n": typeof types.AlbumPanel_ReleaseFragmentDoc,
    "\n  subscription AlbumPanelUpdates(\n    $artistId: String!\n    $releaseFolderName: String!\n  ) {\n    libraryCacheTracksInReleaseUpdated(\n      artistId: $artistId\n      releaseFolderName: $releaseFolderName\n    ) {\n      track {\n        id\n        isMissing\n        mediaAvailabilityStatus\n      }\n    }\n  }\n": typeof types.AlbumPanelUpdatesDocument,
    "\n  subscription AlbumPanelReleaseMetadataUpdated(\n    $artistId: String!\n    $releaseFolderName: String!\n  ) {\n    libraryReleaseMetadataUpdated(\n      artistId: $artistId\n      releaseFolderName: $releaseFolderName\n    ) {\n      id\n      ...AlbumPanel_Release\n    }\n  }\n": typeof types.AlbumPanelReleaseMetadataUpdatedDocument,
    "\n  mutation RefreshRelease($input: RefreshReleaseInput!) {\n    refreshRelease(input: $input) {\n      ... on RefreshReleaseSuccess {\n        release {\n          id\n          ...AlbumPanel_Release\n        }\n      }\n      ... on RefreshReleaseError {\n        message\n      }\n    }\n  }\n": typeof types.RefreshReleaseDocument,
    "\n  mutation DeleteReleaseAudio($input: DeleteReleaseAudioInput!) {\n    deleteReleaseAudio(input: $input) {\n      ... on DeleteReleaseAudioSuccess {\n        release {\n          id\n          ...AlbumPanel_Release\n        }\n      }\n      ... on DeleteReleaseAudioError {\n        message\n      }\n    }\n  }\n": typeof types.DeleteReleaseAudioDocument,
    "\n  fragment AlbumTrackList_Release on Release {\n    id\n    title\n    folderName\n    artist {\n      id\n    }\n    tracks {\n      id\n      title\n      trackLength\n      isMissing\n      media {\n        id\n        audioUrl\n        audioQualityLabel\n      }\n      ...TrackCreditLinks_Track\n      ...MusicPlayerTrackFactory_Track\n      ...AlbumTrackTag_Track\n      credits {\n        artistName\n        artist {\n          id\n        }\n        mbArtist {\n          id\n        }\n      }\n      statistics {\n        listeners\n        playCount\n      }\n    }\n  }\n": typeof types.AlbumTrackList_ReleaseFragmentDoc,
    "\n  fragment AlbumTrackTag_Track on Track {\n    id\n    isMissing\n    mediaAvailabilityStatus\n  }\n": typeof types.AlbumTrackTag_TrackFragmentDoc,
    "\n  fragment MbReleaseGroupCard_MbReleaseGroup on MbReleaseGroup {\n    id\n    title\n    firstReleaseYear\n    coverArtUri\n  }\n": typeof types.MbReleaseGroupCard_MbReleaseGroupFragmentDoc,
    "\n  fragment PlayAlbumButton_Release on Release {\n    id\n    folderName\n    coverArtUrl\n    artist {\n      id\n      name\n    }\n    tracks {\n      id\n      title\n      isMissing\n      trackLength\n      media {\n        id\n        audioQualityLabel\n      }\n    }\n  }\n": typeof types.PlayAlbumButton_ReleaseFragmentDoc,
    "\n  fragment TrackCreditLinks_Track on Track {\n    id\n    credits {\n      artistName\n      artist {\n        id\n        name\n      }\n      mbArtist {\n        id\n        name\n      }\n    }\n  }\n": typeof types.TrackCreditLinks_TrackFragmentDoc,
    "\n  fragment AlbumList_Release on Release {\n    id\n    isFullyMissing\n    ...AlbumCard_Release\n  }\n": typeof types.AlbumList_ReleaseFragmentDoc,
    "\n  query FixMatch_ReleasesWithScores(\n    $releaseGroupId: String!\n    $artistId: String!\n    $releaseFolderName: String!\n  ) {\n    releasesWithScores(\n      releaseGroupId: $releaseGroupId\n      artistId: $artistId\n      releaseFolderName: $releaseFolderName\n    ) {\n      score\n      reasons\n      release {\n        id\n        title\n        coverArtUri\n        year\n        country\n        status\n        media {\n          tracks {\n            id\n          }\n        }\n      }\n    }\n  }\n": typeof types.FixMatch_ReleasesWithScoresDocument,
    "\n  mutation FixMatch_SetReleaseMatchOverride(\n    $input: SetReleaseMatchOverrideInput!\n  ) {\n    setReleaseMatchOverride(input: $input) {\n      __typename\n      ... on SetReleaseMatchOverrideSuccess {\n        release {\n          id\n        }\n      }\n      ... on SetReleaseMatchOverrideError {\n        message\n      }\n    }\n  }\n": typeof types.FixMatch_SetReleaseMatchOverrideDocument,
    "\n  mutation FixMatch_SetReleaseGroup($input: SetReleaseGroupInput!) {\n    setReleaseGroup(input: $input) {\n      __typename\n      ... on SetReleaseGroupSuccess {\n        release {\n          id\n        }\n      }\n      ... on SetReleaseGroupError {\n        message\n      }\n    }\n  }\n": typeof types.FixMatch_SetReleaseGroupDocument,
    "\n  query FixMatch_ReleaseConnections(\n    $artistId: ID!\n    $releaseFolderName: String!\n  ) {\n    serverLibrary {\n      releaseForArtistByFolderName(\n        artistId: $artistId\n        releaseFolderName: $releaseFolderName\n      ) {\n        id\n        musicBrainzReleaseGroupId\n        title\n        artist {\n          id\n          name\n        }\n      }\n    }\n  }\n": typeof types.FixMatch_ReleaseConnectionsDocument,
    "\n    query FixMatch_SearchReleaseGroups(\n      $name: String!\n      $artistName: String!\n      $limit: Int!\n      $offset: Int!\n    ) {\n      musicBrainz {\n        releaseGroup {\n          searchByNameAndArtistName(\n            name: $name\n            artistName: $artistName\n            limit: $limit\n            offset: $offset\n          ) {\n            id\n            title\n            primaryType\n            secondaryTypes\n            firstReleaseDate\n          }\n        }\n      }\n    }\n  ": typeof types.FixMatch_SearchReleaseGroupsDocument,
    "\n  fragment ArtistCard_Artist on Artist {\n    id\n    name\n    listeners\n    images {\n      thumbs\n    }\n    albums {\n      id\n      isFullyMissing\n    }\n    eps {\n      id\n      isFullyMissing\n    }\n    singles {\n      id\n      isFullyMissing\n    }\n  }\n": typeof types.ArtistCard_ArtistFragmentDoc,
    "\n  fragment MbArtistCard_MbArtist on MbArtist {\n    id\n    name\n    listeners\n    images {\n      artistThumb\n    }\n  }\n": typeof types.MbArtistCard_MbArtistFragmentDoc,
    "\n  fragment TopArtistCard_Artist on LastFmArtist {\n    id\n    name\n    musicBrainzArtist {\n      id\n      name\n      images {\n        artistThumb\n      }\n      artist {\n        id\n      }\n    }\n    statistics {\n      listeners\n    }\n  }\n": typeof types.TopArtistCard_ArtistFragmentDoc,
    "\n  fragment ArtistList_Artist on Artist {\n    id\n    ...ArtistCard_Artist\n  }\n": typeof types.ArtistList_ArtistFragmentDoc,
    "\n  fragment ArtistNotInLibraryPanel_MbArtist on MbArtist {\n    id\n    name\n    images {\n      artistBackground\n    }\n    listeners\n    lastFmArtist {\n      id\n      ...ArtistNotInLibraryTopTracks_LastFmArtist\n    }\n  }\n": typeof types.ArtistNotInLibraryPanel_MbArtistFragmentDoc,
    "\n  fragment ArtistNotInLibraryTopTracks_LastFmArtist on LastFmArtist {\n    id\n    topTracks {\n      id\n      name\n      statistics {\n        listeners\n      }\n    }\n  }\n": typeof types.ArtistNotInLibraryTopTracks_LastFmArtistFragmentDoc,
    "\n  fragment AppearsOnReleaseCard_ArtistAppearsOnRelease on ArtistAppearsOnRelease {\n    musicBrainzReleaseGroupId\n    coverArtUrl\n    releaseTitle\n    firstReleaseYear\n    primaryArtistName\n  }\n": typeof types.AppearsOnReleaseCard_ArtistAppearsOnReleaseFragmentDoc,
    "\n  fragment ArtistActionButtons_Artist on Artist {\n    id\n    ...FixArtistMatchDialog_Artist\n    name\n  }\n": typeof types.ArtistActionButtons_ArtistFragmentDoc,
    "\n    mutation DeleteArtist($input: DeleteArtistInput!) {\n      deleteArtist(input: $input) {\n        __typename\n        ... on DeleteArtistSuccess {\n          deletedArtistId\n        }\n        ... on DeleteArtistError {\n          message\n        }\n      }\n    }\n  ": typeof types.DeleteArtistDocument,
    "\n  query ArtistAlbumList($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        albums {\n          id\n          firstReleaseDate\n          ...AlbumCard_Release\n        }\n      }\n    }\n  }\n": typeof types.ArtistAlbumListDocument,
    "\n  fragment ArtistDownloadAllReleasesButton_Artist on Artist {\n    id\n  }\n": typeof types.ArtistDownloadAllReleasesButton_ArtistFragmentDoc,
    "\n  mutation ArtistDownloadAll_StartBulk(\n    $input: StartBulkDownloadForArtistInput!\n  ) {\n    startBulkDownloadForArtist(input: $input) {\n      __typename\n      ... on StartBulkDownloadForArtistSuccess {\n        queuedCount\n      }\n      ... on StartBulkDownloadForArtistError {\n        message\n      }\n    }\n  }\n": typeof types.ArtistDownloadAll_StartBulkDocument,
    "\n  query ArtistEpList($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        eps {\n          id\n          firstReleaseDate\n          ...AlbumCard_Release\n        }\n      }\n    }\n  }\n": typeof types.ArtistEpListDocument,
    "\n  fragment ArtistImportStatusInfo_Artist on Artist {\n    id\n    name\n  }\n": typeof types.ArtistImportStatusInfo_ArtistFragmentDoc,
    "\n  query ArtistPanel_CurrentImport {\n    artistImport {\n      currentArtistImport {\n        id\n        status\n        completedReleases\n        totalReleases\n        errorMessage\n        artistName\n      }\n    }\n  }\n": typeof types.ArtistPanel_CurrentImportDocument,
    "\n  subscription ArtistImportStatusInfo_Sub {\n    currentArtistImportUpdated {\n      id\n      status\n      completedReleases\n      totalReleases\n      errorMessage\n      artistName\n    }\n  }\n": typeof types.ArtistImportStatusInfo_SubDocument,
    "\n  fragment ArtistNumReleasesAvailableIndicator_Artist on Artist {\n    id\n    albums {\n      id\n      isFullyMissing\n    }\n    eps {\n      id\n      isFullyMissing\n    }\n    singles {\n      id\n      isFullyMissing\n    }\n  }\n": typeof types.ArtistNumReleasesAvailableIndicator_ArtistFragmentDoc,
    "\n  fragment ArtistPanel_Artist on Artist {\n    id\n    ...ArtistActionButtons_Artist\n    ...ArtistImportStatusInfo_Artist\n    ...ArtistNumReleasesAvailableIndicator_Artist\n    ...ArtistServiceConnections_Artist\n    ...ArtistDownloadAllReleasesButton_Artist\n    ...ArtistStatisticsHeader_Artist\n    name\n    listeners\n    connectedExternalServices {\n      isConnected\n      externalService {\n        id\n        name\n      }\n    }\n    albums {\n      id\n    }\n    eps {\n      id\n    }\n    singles {\n      id\n    }\n    images {\n      backgrounds\n    }\n  }\n": typeof types.ArtistPanel_ArtistFragmentDoc,
    "\n  subscription ArtistPanel_LibraryArtistUpdated($artistId: String!) {\n    libraryArtistUpdated(artistId: $artistId) {\n      id\n      ...ArtistPanel_Artist\n    }\n  }\n": typeof types.ArtistPanel_LibraryArtistUpdatedDocument,
    "\n  mutation PanelRefreshTopTracks($input: RefreshArtistTopTracksInput!) {\n    refreshArtistTopTracks(input: $input) {\n      __typename\n      ... on RefreshArtistTopTracksSuccess {\n        artist {\n          id\n          topTracks {\n            ...TopArtistTrackItem_ArtistTopTrack\n          }\n        }\n      }\n    }\n  }\n": typeof types.PanelRefreshTopTracksDocument,
    "\n  mutation PanelRefreshArtistMetaData($artistId: String!) {\n    refreshArtistMetaData(input: { artistId: $artistId }) {\n      __typename\n      ... on RefreshArtistMetaDataSuccess {\n        artist {\n          id\n          ...ArtistPanel_Artist\n        }\n      }\n      ... on RefreshArtistMetaDataError {\n        message\n      }\n    }\n  }\n": typeof types.PanelRefreshArtistMetaDataDocument,
    "\n  mutation RefreshAllReleasesForArtist($artistId: String!) {\n    refreshAllReleasesForArtist(artistId: $artistId) {\n      __typename\n      ... on RefreshAllReleasesForArtistSuccess {\n        artistId\n        refreshedCount\n      }\n      ... on RefreshAllReleasesForArtistError {\n        message\n      }\n    }\n  }\n": typeof types.RefreshAllReleasesForArtistDocument,
    "\n  mutation GenerateArtistShareFiles($input: GenerateArtistShareFilesInput!) {\n    generateArtistShareFiles(input: $input) {\n      __typename\n      ... on GenerateArtistShareFilesSuccess {\n        artistId\n        artistName\n        tagFileName\n        manifestPath\n      }\n      ... on GenerateArtistShareFilesError {\n        message\n      }\n    }\n  }\n": typeof types.GenerateArtistShareFilesDocument,
    "\n  fragment ArtistServiceConnections_Artist on Artist {\n    id\n    connectedExternalServices {\n      isConnected\n      artistPageUrl\n      externalService {\n        id\n        name\n      }\n    }\n  }\n": typeof types.ArtistServiceConnections_ArtistFragmentDoc,
    "\n  query ArtistSingleList($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        singles {\n          id\n          firstReleaseDate\n          ...AlbumCard_Release\n        }\n      }\n    }\n  }\n": typeof types.ArtistSingleListDocument,
    "\n  fragment ArtistStatisticsHeader_Artist on Artist {\n    id\n    name\n    albums {\n      id\n      isFullyMissing\n    }\n    eps {\n      id\n      isFullyMissing\n    }\n    singles {\n      id\n      isFullyMissing\n    }\n  }\n": typeof types.ArtistStatisticsHeader_ArtistFragmentDoc,
    "\n  query ReleaseListQuery($artistId: ID!) {\n    artist {\n      byId(artistId: $artistId) {\n        id\n        releases {\n          id\n          firstReleaseDate\n          type\n          ...AlbumCard_Release\n        }\n      }\n    }\n  }\n": typeof types.ReleaseListQueryDocument,
    "\n  fragment TopArtistTrackItem_ArtistTopTrack on ArtistTopTrack {\n    title\n    releaseTitle\n    playCount\n    coverArtUrl\n    trackLength\n    track {\n      id\n      ...MusicPlayerTrackFactory_Track\n      ...AlbumTrackTag_Track\n      trackLength\n      trackNumber\n      isMissing\n      release {\n        id\n        folderName\n        artist {\n          id\n          images {\n            thumbs\n          }\n        }\n      }\n    }\n  }\n": typeof types.TopArtistTrackItem_ArtistTopTrackFragmentDoc,
    "\n  query TopArtistTracks($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        topTracks {\n          ...TopArtistTrackItem_ArtistTopTrack\n        }\n      }\n    }\n  }\n": typeof types.TopArtistTracksDocument,
    "\n  query ArtistTopTracksForQueue($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        topTracks {\n          title\n          coverArtUrl\n          track {\n            id\n            trackNumber\n            trackLength\n            release {\n              id\n              folderName\n              artist {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.ArtistTopTracksForQueueDocument,
    "\n  query ArtistAppearsOnQuery($artistId: ID!) {\n    viewer {\n      id\n    }\n    artist {\n      byId(artistId: $artistId) {\n        id\n        name\n        appearsOn {\n          releases {\n            musicBrainzReleaseGroupId\n            ...AppearsOnReleaseCard_ArtistAppearsOnRelease\n          }\n          playlists {\n            id\n            ...PlaylistCard_Playlist\n          }\n        }\n      }\n    }\n  }\n": typeof types.ArtistAppearsOnQueryDocument,
    "\n  query ArtistStatisticsHeader($artistId: ID!) {\n    artist {\n      byId(artistId: $artistId) {\n        id\n        ...ArtistStatisticsHeader_Artist\n      }\n    }\n  }\n": typeof types.ArtistStatisticsHeaderDocument,
    "\n  query SimilarArtistsTabContent($artistId: ID!) {\n    artist {\n      byId(artistId: $artistId) {\n        id\n        similarArtists {\n          name\n          thumb\n          similarityScore\n          artist {\n            id\n          }\n          musicBrainzArtistId\n        }\n      }\n    }\n  }\n": typeof types.SimilarArtistsTabContentDocument,
    "\n  mutation RefreshSimilarArtists($artistId: String!) {\n    refreshArtistMetaData(input: { artistId: $artistId }) {\n      __typename\n      ... on RefreshArtistMetaDataSuccess {\n        artist {\n          id\n          similarArtists {\n            name\n            thumb\n            similarityScore\n            artist {\n              id\n            }\n            musicBrainzArtistId\n          }\n        }\n      }\n      ... on RefreshArtistMetaDataError {\n        message\n      }\n    }\n  }\n": typeof types.RefreshSimilarArtistsDocument,
    "\n  mutation ImportSimilarArtists($artistId: String!) {\n    importSimilarArtists(input: { artistId: $artistId }) {\n      __typename\n      ... on ImportSimilarArtistsSuccess {\n        importedCount\n        artist {\n          id\n        }\n      }\n      ... on ImportSimilarArtistsError {\n        message\n      }\n    }\n  }\n": typeof types.ImportSimilarArtistsDocument,
    "\n  fragment FixArtistMatchDialog_Artist on Artist {\n    id\n    name\n    connectedExternalServices {\n      isConnected\n      externalArtistId\n      externalService {\n        name\n        id\n      }\n    }\n  }\n": typeof types.FixArtistMatchDialog_ArtistFragmentDoc,
    "\n  query FixArtistMatch_SearchMbArtists(\n    $name: String!\n    $limit: Int!\n    $offset: Int!\n  ) {\n    musicBrainz {\n      artist {\n        searchByName(name: $name, limit: $limit, offset: $offset) {\n          id\n          name\n          country\n          type\n          disambiguation\n          listeners\n          images {\n            artistThumb\n          }\n          lastFmArtist {\n            summary\n          }\n        }\n      }\n    }\n  }\n": typeof types.FixArtistMatch_SearchMbArtistsDocument,
    "\n  mutation FixArtistMatch_SetMb($input: SetArtistMusicBrainzMatchInput!) {\n    setArtistMusicBrainzMatch(input: $input) {\n      __typename\n      ... on SetArtistMusicBrainzMatchSuccess {\n        artist {\n          id\n        }\n      }\n      ... on SetArtistMusicBrainzMatchError {\n        message\n      }\n    }\n  }\n": typeof types.FixArtistMatch_SetMbDocument,
    "\n  mutation FixArtistMatch_SetSpotify($input: SetArtistSpotifyMatchInput!) {\n    setArtistSpotifyMatch(input: $input) {\n      __typename\n      ... on SetArtistSpotifyMatchSuccess {\n        artist {\n          id\n        }\n      }\n      ... on SetArtistSpotifyMatchError {\n        message\n      }\n    }\n  }\n": typeof types.FixArtistMatch_SetSpotifyDocument,
    "\n  query FixArtistMatch_SearchSpotify(\n    $name: String!\n    $limit: Int!\n    $offset: Int!\n  ) {\n    spotify {\n      searchByName(name: $name, limit: $limit, offset: $offset) {\n        id\n        name\n        images {\n          url\n        }\n      }\n    }\n  }\n": typeof types.FixArtistMatch_SearchSpotifyDocument,
    "\n  mutation SignIn($username: String!, $password: String!) {\n    signIn(input: { username: $username, password: $password }) {\n      __typename\n      ... on SignInSuccess {\n        user {\n          id\n          username\n        }\n      }\n      ... on SignInError {\n        message\n      }\n    }\n  }\n": typeof types.SignInDocument,
    "\n  mutation SignOut {\n    signOut(input: { confirm: true }) {\n      __typename\n\n      ... on SignOutSuccess {\n        success\n      }\n      ... on SignOutError {\n        message\n      }\n    }\n  }\n": typeof types.SignOutDocument,
    "\n  query ServerPublicBaseUrl {\n    serverSettings {\n      id\n      publicBaseUrl\n    }\n  }\n": typeof types.ServerPublicBaseUrlDocument,
    "\n  query DownloadOverviewQuery {\n    downloads {\n      downloadQueue {\n        id\n        queueLength\n        items {\n          id\n          artistId\n          releaseFolderName\n        }\n      }\n      downloadSlots {\n        id\n        isActive\n        isWorking\n        currentWork {\n          artistId\n          releaseFolderName\n        }\n        currentProgress {\n          id\n          artistId\n          releaseFolderName\n          status\n          totalTracks\n          completedTracks\n          errorMessage\n          currentDownloadSpeedKbps\n          currentProvider\n          currentProviderIndex\n          totalProviders\n        }\n        status\n      }\n    }\n  }\n": typeof types.DownloadOverviewQueryDocument,
    "\n  subscription DownloadQueueUpdatedSub {\n    downloadQueueUpdated {\n      queueLength\n      items {\n        id\n        artistId\n        releaseFolderName\n      }\n    }\n  }\n": typeof types.DownloadQueueUpdatedSubDocument,
    "\n  subscription SlotProgressUpdatedSub {\n    slotProgressUpdated {\n      slotId\n      progress {\n        id\n        artistId\n        releaseFolderName\n        status\n        totalTracks\n        completedTracks\n        errorMessage\n        currentDownloadSpeedKbps\n        currentProvider\n        currentProviderIndex\n        totalProviders\n      }\n    }\n  }\n": typeof types.SlotProgressUpdatedSubDocument,
    "\n  subscription SlotStatusUpdatedSub {\n    slotStatusUpdated {\n      slotId\n      isActive\n      currentWork {\n        id\n        artistId\n        releaseFolderName\n      }\n    }\n  }\n": typeof types.SlotStatusUpdatedSubDocument,
    "\n  fragment ReleaseDownloadButton_Release on Release {\n    id\n    isFullyMissing\n    folderName\n    downloadStatus\n    artist {\n      id\n    }\n  }\n": typeof types.ReleaseDownloadButton_ReleaseFragmentDoc,
    "\n  mutation AlbumPanel_StartDownloadRelease(\n    $artistId: String!\n    $releaseFolderName: String!\n  ) {\n    startDownloadRelease(\n      input: { artistId: $artistId, releaseFolderName: $releaseFolderName }\n    ) {\n      __typename\n      ... on StartDownloadReleaseSuccess {\n        release {\n          id\n        }\n      }\n      ... on StartDownloadReleaseAccepted {\n        artistId\n        releaseFolderName\n      }\n    }\n  }\n": typeof types.AlbumPanel_StartDownloadReleaseDocument,
    "\n  subscription ReleaseDownloadButton(\n    $artistId: String!\n    $releaseFolderName: String!\n  ) {\n    libraryReleaseDownloadStatusUpdated(\n      artistId: $artistId\n      releaseFolderName: $releaseFolderName\n    ) {\n      release {\n        id\n        downloadStatus\n        isFullyMissing\n      }\n    }\n  }\n": typeof types.ReleaseDownloadButtonDocument,
    "\n  mutation CreateUser($username: String!, $password: String!) {\n    createUser(input: { username: $username, password: $password }) {\n      __typename\n      ... on CreateUserSuccess {\n        # Assuming a similar success payload\n        user {\n          id\n          username\n        }\n      }\n      ... on CreateUserError {\n        # Assuming a similar error payload\n        message\n      }\n    }\n  }\n": typeof types.CreateUserDocument,
    "\n  fragment LikedSongRow_LikedSong on LikedSong {\n    id\n    recording {\n      id\n      title\n      length\n      artists {\n        id\n        name\n      }\n      mainAlbum {\n        id\n        title\n        coverArtUri\n        artists {\n          id\n        }\n      }\n    }\n  }\n": typeof types.LikedSongRow_LikedSongFragmentDoc,
    "\n  fragment LikedSongsList_User on User {\n    id\n    likedSongs {\n      id\n      ...LikedSongRow_LikedSong\n    }\n  }\n": typeof types.LikedSongsList_UserFragmentDoc,
    "\n  fragment MusicPlayerTrackFactory_Track on Track {\n    id\n    title\n    trackLength\n    trackNumber\n    media {\n      id\n      audioQualityLabel\n    }\n    release {\n      id\n      folderName\n      coverArtUrl\n      artist {\n        id\n        name\n      }\n    }\n    trackNumber\n  }\n": typeof types.MusicPlayerTrackFactory_TrackFragmentDoc,
    "\n  mutation CreatePlaylist {\n    createPlaylist(input: {}) {\n      __typename\n      ... on CreatePlaylistSuccess {\n        playlist {\n          id\n          name\n          createdAt\n        }\n      }\n    }\n  }\n": typeof types.CreatePlaylistDocument,
    "\n  fragment MissingArtistsInPlaylistBox_Playlist on Playlist {\n    id\n    items {\n      id\n      artist {\n        id\n      }\n    }\n  }\n": typeof types.MissingArtistsInPlaylistBox_PlaylistFragmentDoc,
    "\n  mutation EnqueueMissingArtistsFromPlaylist($playlistId: ID!) {\n    enqueueMissingArtistsFromPlaylist(playlistId: $playlistId)\n  }\n": typeof types.EnqueueMissingArtistsFromPlaylistDocument,
    "\n  fragment PlaylistCard_Playlist on Playlist {\n    id\n    name\n    coverImageUrl\n    createdAt\n  }\n": typeof types.PlaylistCard_PlaylistFragmentDoc,
    "\n  fragment PlaylistHeader_Playlist on Playlist {\n    id\n    name\n    items {\n      id\n      coverImageUrl\n    }\n  }\n": typeof types.PlaylistHeader_PlaylistFragmentDoc,
    "\n  fragment PlaylistPanel_Playlist on Playlist {\n    id\n    ...PlaylistHeader_Playlist\n    ...MissingArtistsInPlaylistBox_Playlist\n    name\n    items {\n      id\n      ...PlaylistTrackItem_PlaylistItem\n    }\n  }\n": typeof types.PlaylistPanel_PlaylistFragmentDoc,
    "\n  fragment PlaylistTrackItem_PlaylistItem on PlaylistItem {\n    id\n    title\n    artistName\n    coverImageUrl\n    trackLengthMs\n    artist {\n      id\n      name\n    }\n\n    track {\n      ...TrackCreditLinks_Track\n      ...AlbumTrackTag_Track\n      trackLength\n      trackNumber\n      media {\n        id\n        audioQualityLabel\n      }\n      title\n      release {\n        id\n        folderName\n        coverArtUrl\n        artist {\n          id\n          name\n          images {\n            thumbs\n          }\n        }\n      }\n    }\n  }\n": typeof types.PlaylistTrackItem_PlaylistItemFragmentDoc,
    "\n  mutation RemoveItemFromPlaylist($playlistId: ID!, $playlistItemId: ID!) {\n    removeItemFromPlaylist(\n      input: { playlistId: $playlistId, playlistItemId: $playlistItemId }\n    ) {\n      __typename\n      ... on RemoveItemFromPlaylistSuccess {\n        playlist {\n          id\n        }\n      }\n      ... on RemoveItemFromPlaylistError {\n        message\n      }\n    }\n  }\n": typeof types.RemoveItemFromPlaylistDocument,
    "\n  mutation MovePlaylistItem(\n    $newIndex: Int!\n    $playlistId: ID!\n    $playlistItemId: ID!\n  ) {\n    movePlaylistItem(\n      input: {\n        newIndex: $newIndex\n        playlistId: $playlistId\n        playlistItemId: $playlistItemId\n      }\n    ) {\n      __typename\n      ... on MovePlaylistItemSuccess {\n        playlist {\n          id\n        }\n      }\n      ... on MovePlaylistItemError {\n        message\n      }\n    }\n  }\n": typeof types.MovePlaylistItemDocument,
    "\n  query FixArtist_MbArtistSearch($artistName: String!, $trackName: String!) {\n    musicBrainz {\n      artist {\n        searchByName(name: $artistName, limit: 15) {\n          id\n          name\n          disambiguation\n          country\n          type\n          listeners\n          images {\n            artistThumb\n          }\n          lastFmArtist {\n            summary\n          }\n        }\n      }\n      recording {\n        searchByName(name: $trackName, limit: 5) {\n          id\n          title\n          artists {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": typeof types.FixArtist_MbArtistSearchDocument,
    "\n  mutation SetPlaylistItemArtistMusicBrainzMatch(\n    $input: SetPlaylistItemArtistMusicBrainzMatchInput!\n  ) {\n    setPlaylistItemArtistMusicBrainzMatch(input: $input) {\n      __typename\n      ... on SetPlaylistItemArtistMusicBrainzMatchSuccess {\n        playlistItem {\n          id\n        }\n      }\n      ... on SetPlaylistItemArtistMusicBrainzMatchNotFound {\n        message\n      }\n      ... on SetPlaylistItemArtistMusicBrainzMatchError {\n        message\n      }\n    }\n  }\n": typeof types.SetPlaylistItemArtistMusicBrainzMatchDocument,
    "\n  query PlaylistList {\n    viewer {\n      id\n      playlists {\n        id\n        name\n        createdAt\n      }\n    }\n  }\n": typeof types.PlaylistListDocument,
    "\n  mutation RenamePlaylist($playlistId: ID!, $newPlaylistName: String!) {\n    renamePlaylist(\n      input: { playlistId: $playlistId, newPlaylistName: $newPlaylistName }\n    ) {\n      __typename\n      ... on RenamePlaylistSuccess {\n        playlist {\n          id\n          name\n          createdAt\n        }\n      }\n    }\n  }\n": typeof types.RenamePlaylistDocument,
    "\n  mutation DeletePlaylist($playlistId: ID!) {\n    deletePlaylist(input: { playlistId: $playlistId }) {\n      __typename\n      ... on DeletePlaylistSuccess {\n        deletedPlaylistId\n      }\n    }\n  }\n": typeof types.DeletePlaylistDocument,
    "\n  query TopArtistRecommendations {\n    recommendations {\n      topArtists {\n        id\n        ...TopArtistCard_Artist\n      }\n    }\n  }\n": typeof types.TopArtistRecommendationsDocument,
    "\n  fragment TopTrackCard_LastFmTrack on LastFmTrack {\n    id\n    playCount\n    name\n    artist {\n      id\n      musicBrainzArtist {\n        id\n        name\n        images {\n          artistThumb\n        }\n      }\n    }\n    album {\n      id\n      imageUrl\n    }\n    images {\n      thumbs\n    }\n  }\n": typeof types.TopTrackCard_LastFmTrackFragmentDoc,
    "\n  query TopTrackRecommendations {\n    recommendations {\n      topTracks {\n        id\n        ...TopTrackCard_LastFmTrack\n      }\n    }\n  }\n": typeof types.TopTrackRecommendationsDocument,
    "\n  query AlbumSearchResultsSearch($text: String!, $limit: Int!) {\n    musicBrainz {\n      releaseGroup {\n        searchByName(name: $text, limit: $limit) {\n          id\n          title\n          ...MbReleaseGroupCard_MbReleaseGroup\n        }\n      }\n    }\n  }\n": typeof types.AlbumSearchResultsSearchDocument,
    "\n  query ArtistSearchResultsSearch($searchText: String!, $limit: Int!) {\n    musicBrainz {\n      artist {\n        searchByName(name: $searchText, limit: $limit) {\n          id\n          name\n          ...MbArtistCard_MbArtist\n          images {\n            artistThumb\n          }\n        }\n      }\n    }\n  }\n": typeof types.ArtistSearchResultsSearchDocument,
    "\n  query PlaylistSearchResultsSearch($searchText: String!, $limit: Int!) {\n    playlist {\n      searchPlaylists(searchTerm: $searchText, limit: $limit) {\n        id\n        ...PlaylistCard_Playlist\n      }\n    }\n  }\n": typeof types.PlaylistSearchResultsSearchDocument,
    "\n  query RecordingSearchResultsSearch($text: String!, $limit: Int!) {\n    musicBrainz {\n      recording {\n        searchByName(name: $text, limit: $limit) {\n          id\n          title\n          length\n          nameCredits {\n            artist {\n              id\n              name\n            }\n          }\n          mainAlbum {\n            id\n            title\n            coverArtUri\n          }\n        }\n      }\n    }\n  }\n": typeof types.RecordingSearchResultsSearchDocument,
    "\n  query SearchResultArtistSearch($text: String!) {\n    serverLibrary {\n      searchArtists(searchTerm: $text, limit: 5) {\n        id\n        name\n        images {\n          thumbs\n        }\n      }\n    }\n  }\n": typeof types.SearchResultArtistSearchDocument,
    "\n  query SearchResultPlaylistSearch($searchText: String!) {\n    playlist {\n      searchPlaylists(searchTerm: $searchText, limit: 5) {\n        id\n        name\n        coverImageUrl\n        createdAt\n      }\n    }\n  }\n": typeof types.SearchResultPlaylistSearchDocument,
    "\n  query SearchResultReleaseSearch($text: String!) {\n    serverLibrary {\n      searchReleases(searchTerm: $text, limit: 5) {\n        id\n        title\n        coverArtUrl\n        artistName\n        artist {\n          id\n          name\n        }\n      }\n    }\n  }\n": typeof types.SearchResultReleaseSearchDocument,
    "\n  query SearchResultTrackSearch($text: String!) {\n    serverLibrary {\n      searchTracks(searchTerm: $text, limit: 5) {\n        id\n        title\n        trackLength\n        release {\n          id\n          title\n          coverArtUrl\n          folderName\n          artistName\n          artist {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": typeof types.SearchResultTrackSearchDocument,
    "\n  fragment ServerLibraryStatisticsHeader_ServerLibrary on ServerLibrarySearchRoot {\n    libraryStatistics {\n      artistCount\n      releaseCount\n      trackCount\n      isInitialized\n      lastUpdated\n    }\n    allReleases {\n      id\n      type\n      isFullyMissing\n    }\n  }\n": typeof types.ServerLibraryStatisticsHeader_ServerLibraryFragmentDoc,
    "\n  fragment DownloadPathForm_ServerSettings on ServerSettings {\n    id\n    downloadPath\n  }\n": typeof types.DownloadPathForm_ServerSettingsFragmentDoc,
    "\n  mutation UpdateDownloadPath($newDownloadPath: String!) {\n    updateDownloadPath(input: { newDownloadPath: $newDownloadPath }) {\n      ... on UpdateDownloadPathSuccess {\n        serverSettings {\n          id\n          downloadPath\n        }\n      }\n    }\n  }\n": typeof types.UpdateDownloadPathDocument,
    "\n  mutation UpdateDownloadSlotCount($input: UpdateDownloadSlotCountInput!) {\n    updateDownloadSlotCount(input: $input) {\n      ... on UpdateDownloadSlotCountSuccess {\n        serverSettings {\n          downloadSlotCount\n        }\n      }\n      ... on UpdateDownloadSlotCountError {\n        message\n      }\n    }\n  }\n": typeof types.UpdateDownloadSlotCountDocument,
    "\n  fragment LibraryPathForm_ServerSettings on ServerSettings {\n    id\n    ...ChangeLibraryFolderControl_ServerSettings\n    libraryPath\n    storageStats {\n      totalDiskBytes\n      availableFreeBytes\n      librarySizeBytes\n      estimatedTotalLibrarySizeBytes\n    }\n  }\n": typeof types.LibraryPathForm_ServerSettingsFragmentDoc,
    "\n  mutation UpdatePublicBaseUrl($input: UpdatePublicBaseUrlInput!) {\n    updatePublicBaseUrl(input: $input) {\n      ... on UpdatePublicBaseUrlSuccess {\n        serverSettings {\n          id\n          publicBaseUrl\n        }\n      }\n      ... on UpdatePublicBaseUrlError {\n        message\n      }\n    }\n  }\n": typeof types.UpdatePublicBaseUrlDocument,
    "\n  query SoulSeekConnectionSettings_Query {\n    serverSettings {\n      id\n      soulSeekHost\n      soulSeekPort\n      soulSeekUsername\n    }\n  }\n": typeof types.SoulSeekConnectionSettings_QueryDocument,
    "\n  mutation UpdateSoulSeekConnectionSettings($input: UpdateSoulSeekConnectionSettingsInput!) {\n    updateSoulSeekConnectionSettings(input: $input) {\n      __typename\n      ... on UpdateSoulSeekConnectionSettingsSuccess {\n        serverSettings { id soulSeekHost soulSeekPort soulSeekUsername }\n      }\n      ... on UpdateSoulSeekConnectionSettingsError { message }\n    }\n  }\n": typeof types.UpdateSoulSeekConnectionSettingsDocument,
    "\n  query SoulSeekSettings_Query {\n    serverSettings {\n      id\n      soulSeekSearchTimeLimitSeconds\n    }\n  }\n": typeof types.SoulSeekSettings_QueryDocument,
    "\n  mutation UpdateSoulSeekSearchTimeLimit($seconds: Int!) {\n    updateSoulSeekSearchTimeLimit(seconds: $seconds) {\n      __typename\n      ... on UpdateSoulSeekSearchTimeLimitSuccess {\n        serverSettings {\n          id\n          soulSeekSearchTimeLimitSeconds\n        }\n      }\n      ... on UpdateSoulSeekSearchTimeLimitError {\n        message\n      }\n    }\n  }\n": typeof types.UpdateSoulSeekSearchTimeLimitDocument,
    "\n  query TopTracksServiceSettings {\n    serverSettings {\n      id\n      listenBrainzTopTracksEnabled\n      spotifyTopTracksEnabled\n      lastFmTopTracksEnabled\n    }\n  }\n": typeof types.TopTracksServiceSettingsDocument,
    "\n  mutation UpdateTopTracksServiceSettings(\n    $input: UpdateTopTracksServiceSettingsInput!\n  ) {\n    updateTopTracksServiceSettings(input: $input) {\n      ... on UpdateTopTracksServiceSettingsSuccess {\n        success\n        message\n      }\n      ... on UpdateTopTracksServiceSettingsError {\n        message\n      }\n    }\n  }\n": typeof types.UpdateTopTracksServiceSettingsDocument,
    "\n  fragment ChangeLibraryFolderControl_ServerSettings on ServerSettings {\n    libraryPath\n    serverLibraryManifestStatus {\n      id\n      hasLibraryManifest\n    }\n  }\n": typeof types.ChangeLibraryFolderControl_ServerSettingsFragmentDoc,
    "\n  query ChangeFolder_HasLibraryManifest($path: String!) {\n    fileSystem {\n      hasLibraryManifest(path: $path)\n    }\n  }\n": typeof types.ChangeFolder_HasLibraryManifestDocument,
    "\n  mutation UpdateLibraryPath($newLibraryPath: String!) {\n    updateLibraryPath(input: { newLibraryPath: $newLibraryPath }) {\n      ... on UpdateLibraryPathSuccess {\n        serverSettings {\n          id\n          libraryPath\n        }\n      }\n    }\n  }\n": typeof types.UpdateLibraryPathDocument,
    "\n  mutation CreateLibraryManifest {\n    createLibraryManifest {\n      ... on CreateLibraryManifestSuccess {\n        serverLibraryManifestStatus {\n          id\n          hasLibraryManifest\n        }\n      }\n      ... on CreateLibraryManifestError {\n        message\n      }\n    }\n  }\n": typeof types.CreateLibraryManifestDocument,
    "\n  fragment DirectoryTreeItem_FileSystemEntry on FileSystemEntry {\n    id\n    name\n    path\n    isDirectory\n    hasChildren\n    isAccessible\n    hasLibraryManifest\n  }\n": typeof types.DirectoryTreeItem_FileSystemEntryFragmentDoc,
    "\n  query DirectoryTreeItem($path: String) {\n    fileSystem {\n      browseFileSystem(path: $path) {\n        id\n        isDirectory\n        path\n        ...DirectoryTreeItem_FileSystemEntry\n      }\n    }\n  }\n": typeof types.DirectoryTreeItemDocument,
    "\n  query BrowseFileSystem($path: String) {\n    fileSystem {\n      browseFileSystem(path: $path) {\n        path\n        isDirectory\n        hasLibraryManifest\n        ...DirectoryTreeItem_FileSystemEntry\n      }\n    }\n  }\n": typeof types.BrowseFileSystemDocument,
    "\n  query Sidebar {\n    viewer {\n      id\n      username\n      isAdmin\n    }\n  }\n": typeof types.SidebarDocument,
    "\n  query ArtistImportQueuePanel_Query {\n    artistImport {\n      artistImportQueue {\n        id\n        queueLength\n        items {\n          id\n          artistName\n          songTitle\n        }\n      }\n      currentArtistImport {\n        id\n        artistName\n        songTitle\n        statusInfo {\n          id\n          text\n        }\n        totalReleases\n        completedReleases\n        errorMessage\n      }\n    }\n  }\n": typeof types.ArtistImportQueuePanel_QueryDocument,
    "\n  subscription ArtistImportQueueUpdatedSub {\n    artistImportQueueUpdated {\n      id\n      queueLength\n      items {\n        id\n        artistName\n        songTitle\n      }\n    }\n  }\n": typeof types.ArtistImportQueueUpdatedSubDocument,
    "\n  subscription CurrentArtistImportUpdatedSub {\n    currentArtistImportUpdated {\n      id\n      artistName\n      songTitle\n      statusInfo {\n        id\n        text\n      }\n      totalReleases\n      completedReleases\n      errorMessage\n    }\n  }\n": typeof types.CurrentArtistImportUpdatedSubDocument,
    "\n  fragment SoulSeekNetworkStatus_SoulSeekStatus on SoulSeekStatus {\n    id\n    status\n  }\n": typeof types.SoulSeekNetworkStatus_SoulSeekStatusFragmentDoc,
    "\n  subscription SoulSeekNetworkStatusSubscription {\n    soulSeekStatusUpdated {\n      ...SoulSeekNetworkStatus_SoulSeekStatus\n    }\n  }\n": typeof types.SoulSeekNetworkStatusSubscriptionDocument,
    "\n  query SoulSeekNetworkStatusQuery {\n    external {\n      id\n      soulSeek {\n        id\n        status {\n          ...SoulSeekNetworkStatus_SoulSeekStatus\n        }\n      }\n    }\n  }\n": typeof types.SoulSeekNetworkStatusQueryDocument,
    "\n  mutation ImportSpotifyPlaylist($playlistId: String!, $userId: UUID!) {\n    importSpotifyPlaylist(input: { playlistId: $playlistId, userId: $userId }) {\n      __typename\n      ... on ImportSpotifyPlaylistSuccess {\n        playlist {\n          id\n          name\n        }\n      }\n      ... on ImportSpotifyPlaylistError {\n        message\n      }\n    }\n  }\n": typeof types.ImportSpotifyPlaylistDocument,
    "\n  fragment SpotifyPlaylistsList_SpotifyPlaylist on SpotifyPlaylist {\n    id\n    description\n    name\n    coverImageUrl\n  }\n": typeof types.SpotifyPlaylistsList_SpotifyPlaylistFragmentDoc,
    "\n  query UserPlaylistsLoader_Query($spotifyUsername: String!) {\n    playlist {\n      importPlaylists {\n        spotify {\n          spotifyPlaylistsForUser(username: $spotifyUsername) {\n            id\n            ...SpotifyPlaylistsList_SpotifyPlaylist\n          }\n        }\n      }\n    }\n  }\n": typeof types.UserPlaylistsLoader_QueryDocument,
    "\n  fragment SpotifyPlaylistPanel_SpotifyPlaylist on SpotifyPlaylist {\n    id\n    name\n    description\n    coverImageUrl\n    totalTracks\n    tracks {\n      id\n      title\n      durationMs\n      artistNames\n      albumCoverImageUrl\n      previewUrl\n    }\n  }\n": typeof types.SpotifyPlaylistPanel_SpotifyPlaylistFragmentDoc,
    "\n  query ViewerIdForSpotifyImport {\n    viewer {\n      id\n    }\n  }\n": typeof types.ViewerIdForSpotifyImportDocument,
    "\n  mutation EnqueueArtistsFromSpotifyPlaylist($playlistId: String!) {\n    enqueueArtistsFromSpotifyPlaylist(input: { playlistId: $playlistId })\n  }\n": typeof types.EnqueueArtistsFromSpotifyPlaylistDocument,
    "\n  mutation AdminCreateUser($input: CreateUserInput!) {\n    createUser(input: $input) {\n      __typename\n      ... on CreateUserSuccess {\n        users {\n          id\n          ...UserAdminPanel_User\n        }\n      }\n      ... on CreateUserError {\n        message\n      }\n    }\n  }\n": typeof types.AdminCreateUserDocument,
    "\n  fragment UserAdminCard_User on User {\n    id\n    username\n    roles\n  }\n": typeof types.UserAdminCard_UserFragmentDoc,
    "\n  fragment UserAdminPanel_Viewer on User {\n    id\n    roles\n    username\n    createdAt\n  }\n": typeof types.UserAdminPanel_ViewerFragmentDoc,
    "\n  fragment UserAdminPanel_User on User {\n    id\n    ...UserDeleteButton_User\n    ...UserChangeUsernameButton_User\n    ...UserChangePasswordButton_User\n    ...UserRolesToggles_User\n    ...UserAdminCard_User\n    roles\n    username\n    createdAt\n    isAdmin\n  }\n": typeof types.UserAdminPanel_UserFragmentDoc,
    "\n  fragment UserChangePasswordButton_User on User {\n    id\n    username\n  }\n": typeof types.UserChangePasswordButton_UserFragmentDoc,
    "\n  mutation AdminSetUserPassword($input: SetUserPasswordInput!) {\n    setUserPassword(input: $input) {\n      __typename\n      ... on SetUserPasswordSuccess {\n        user {\n          ...UserAdminPanel_User\n        }\n      }\n      ... on SetUserPasswordError {\n        message\n      }\n    }\n  }\n": typeof types.AdminSetUserPasswordDocument,
    "\n  fragment UserChangeUsernameButton_User on User {\n    id\n    username\n  }\n": typeof types.UserChangeUsernameButton_UserFragmentDoc,
    "\n  mutation AdminUpdateUserUsername($input: UpdateUserUsernameInput!) {\n    updateUserUsername(input: $input) {\n      __typename\n      ... on UpdateUserUsernameSuccess {\n        user {\n          ...UserAdminPanel_User\n        }\n      }\n      ... on UpdateUserUsernameError {\n        message\n      }\n    }\n  }\n": typeof types.AdminUpdateUserUsernameDocument,
    "\n  fragment UserDeleteButton_User on User {\n    id\n    username\n  }\n": typeof types.UserDeleteButton_UserFragmentDoc,
    "\n  mutation DeleteUser($input: DeleteUserInput!) {\n    deleteUser(input: $input) {\n      __typename\n      ... on DeleteUserSuccess {\n        deletedUserId\n        user {\n          users {\n            nodes {\n              ...UserAdminPanel_User\n            }\n          }\n        }\n      }\n      ... on DeleteUserError {\n        message\n      }\n    }\n  }\n": typeof types.DeleteUserDocument,
    "\n  fragment UserRolesToggles_User on User {\n    id\n    username\n    roles\n  }\n": typeof types.UserRolesToggles_UserFragmentDoc,
    "\n  mutation UpdateUserRoles($input: UpdateUserRolesInput!) {\n    updateUserRoles(input: $input) {\n      __typename\n      ... on UpdateUserRolesSuccess {\n        user {\n          id\n          ...UserAdminPanel_User\n        }\n      }\n      ... on UpdateUserRolesError {\n        message\n      }\n    }\n  }\n": typeof types.UpdateUserRolesDocument,
    "\n  fragment UserProfilePanel_User on User {\n    id\n    username\n    createdAt\n    updatedAt\n    listenBrainzUserId\n    hasListenBrainzToken\n  }\n": typeof types.UserProfilePanel_UserFragmentDoc,
    "\n  mutation UpdateUserListenBrainzCredentials(\n    $input: UpdateUserListenBrainzCredentialsInput!\n  ) {\n    updateUserListenBrainzCredentials(input: $input) {\n      ... on UpdateUserListenBrainzCredentialsSuccess {\n        user {\n          id\n          username\n          listenBrainzUserId\n          hasListenBrainzToken\n        }\n      }\n      ... on UpdateUserListenBrainzCredentialsError {\n        message\n      }\n    }\n  }\n": typeof types.UpdateUserListenBrainzCredentialsDocument,
    "\n  query UserProfileWidget {\n    viewer {\n      id\n      username\n    }\n  }\n": typeof types.UserProfileWidgetDocument,
};
const documents: Documents = {
    "\n  query Bootstrap {\n    areThereAnyUsers\n    viewer {\n      id\n    }\n  }\n": types.BootstrapDocument,
    "\n  query AdminUsersPage {\n    user {\n      users {\n        nodes {\n          ...UserAdminPanel_User\n        }\n      }\n    }\n    viewer {\n      id\n      ...UserAdminPanel_Viewer\n      roles\n      isAdmin\n    }\n  }\n": types.AdminUsersPageDocument,
    "\n  query AlbumListQuery {\n    serverLibrary {\n      allReleases {\n        id\n        ...AlbumList_Release\n      }\n    }\n  }\n": types.AlbumListQueryDocument,
    "\n  query AlbumQuery($artistId: ID!, $releaseFolderName: String!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        name\n        releaseByFolderName(releaseFolderName: $releaseFolderName) {\n          id\n          title\n          ...AlbumPanel_Release\n        }\n      }\n    }\n  }\n": types.AlbumQueryDocument,
    "\n  query ArtistListQuery {\n    serverLibrary {\n      allArtists {\n        id\n        ...ArtistList_Artist\n      }\n    }\n  }\n": types.ArtistListQueryDocument,
    "\n  query ArtistQuery($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        name\n        ...ArtistPanel_Artist\n      }\n    }\n  }\n": types.ArtistQueryDocument,
    "\n  query IndexPageQuery {\n    serverLibrary {\n      ...ServerLibraryStatisticsHeader_ServerLibrary\n    }\n  }\n": types.IndexPageQueryDocument,
    "\n  query LikedSongsQuery {\n    viewer {\n      id\n      ...LikedSongsList_User\n    }\n  }\n": types.LikedSongsQueryDocument,
    "\n  query MbArtistQuery($mbArtistId: ID!) {\n    musicBrainz {\n      artist {\n        byId(id: $mbArtistId) {\n          id\n          name\n          ...ArtistNotInLibraryPanel_MbArtist\n        }\n      }\n    }\n  }\n": types.MbArtistQueryDocument,
    "\n  query PlaylistQuery($playlistId: ID!) {\n    playlist {\n      byId(playlistId: $playlistId) {\n        id\n        name\n        ...PlaylistPanel_Playlist\n      }\n    }\n  }\n": types.PlaylistQueryDocument,
    "\n  query QueuesPage_Query {\n    downloads {\n      downloadSlots {\n        id\n        isActive\n        isWorking\n        currentWork {\n          artistId\n          releaseFolderName\n        }\n        currentProgress {\n          id\n          artistId\n          releaseFolderName\n          status\n          totalTracks\n          completedTracks\n          errorMessage\n          artistName\n          releaseTitle\n          coverArtUrl\n          currentTrackProgressPercent\n          currentDownloadSpeedKbps\n          currentProvider\n          currentProviderIndex\n          totalProviders\n        }\n        startedAt\n        lastActivityAt\n        status\n      }\n      downloadQueue {\n        id\n        queueLength\n        items {\n          id\n          artistId\n          releaseFolderName\n          queueKey\n        }\n      }\n      downloadHistory {\n        timestampUtc\n        artistId\n        releaseFolderName\n        artistName\n        releaseTitle\n        success\n        errorMessage\n        providerUsed\n      }\n    }\n    artistImport {\n      currentArtistImport {\n        id\n        artistName\n        statusInfo {\n          id\n          text\n        }\n        totalReleases\n        completedReleases\n        errorMessage\n      }\n      artistImportQueue {\n        id\n        queueLength\n        items {\n          id\n          artistName\n          songTitle\n          releaseFolderName\n          queueKey\n        }\n      }\n      artistImportHistory {\n        timestampUtc\n        jobKind\n        artistName\n        localArtistId\n        releaseFolderName\n        musicBrainzArtistId\n        songTitle\n        success\n        errorMessage\n      }\n    }\n  }\n": types.QueuesPage_QueryDocument,
    "\n  subscription QueuesPage_DownloadQueueUpdated {\n    downloadQueueUpdated {\n      id\n      queueLength\n      id\n      items {\n        id\n        artistId\n        releaseFolderName\n        queueKey\n      }\n    }\n  }\n": types.QueuesPage_DownloadQueueUpdatedDocument,
    "\n  subscription QueuesPage_SlotProgressUpdated {\n    slotProgressUpdated {\n      slotId\n      progress {\n        id\n        artistId\n        releaseFolderName\n        status\n        totalTracks\n        completedTracks\n        errorMessage\n        artistName\n        releaseTitle\n        coverArtUrl\n        currentTrackProgressPercent\n        currentDownloadSpeedKbps\n        currentProvider\n        currentProviderIndex\n        totalProviders\n      }\n    }\n  }\n": types.QueuesPage_SlotProgressUpdatedDocument,
    "\n  subscription QueuesPage_ArtistImportQueueUpdated {\n    artistImportQueueUpdated {\n      id\n      queueLength\n      items {\n        id\n        artistName\n        songTitle\n        queueKey\n      }\n    }\n  }\n": types.QueuesPage_ArtistImportQueueUpdatedDocument,
    "\n  subscription QueuesPage_CurrentArtistImportUpdated {\n    currentArtistImportUpdated {\n      id\n      artistName\n      songTitle\n      statusInfo {\n        id\n        text\n      }\n      totalReleases\n      completedReleases\n      errorMessage\n    }\n  }\n": types.QueuesPage_CurrentArtistImportUpdatedDocument,
    "\n  mutation RemoveDownloadJob($queueKey: String!) {\n    removeDownloadJob(queueKey: $queueKey)\n  }\n": types.RemoveDownloadJobDocument,
    "\n  mutation RemoveArtistImportJob($queueKey: String!) {\n    removeArtistImportJob(queueKey: $queueKey)\n  }\n": types.RemoveArtistImportJobDocument,
    "\n  query SettingsPage {\n    serverSettings {\n      id\n      ...LibraryPathForm_ServerSettings\n      libraryPath\n      downloadSlotCount\n      listenBrainzTopTracksEnabled\n      spotifyTopTracksEnabled\n      lastFmTopTracksEnabled\n      publicBaseUrl\n    }\n  }\n": types.SettingsPageDocument,
    "\n  query SpotifyPlaylistDetails($playlistId: String!) {\n    playlist {\n      importPlaylists {\n        spotify {\n          byId: spotifyPlaylistById(id: $playlistId) {\n            id\n            ...SpotifyPlaylistPanel_SpotifyPlaylist\n          }\n        }\n      }\n    }\n  }\n": types.SpotifyPlaylistDetailsDocument,
    "\n  query ProfilePage {\n    viewer {\n      id\n      username\n      ...UserProfilePanel_User\n    }\n  }\n": types.ProfilePageDocument,
    "\n  mutation ImportArtist($musicBrainzArtistId: String!) {\n    importArtist(input: { musicBrainzArtistId: $musicBrainzArtistId }) {\n      __typename\n      ... on ImportArtistSuccess {\n        artist {\n          id\n          name\n        }\n      }\n      ... on ImportArtistError {\n        message\n      }\n    }\n  }\n": types.ImportArtistDocument,
    "\n  fragment AlbumCard_Release on Release {\n    id\n    title\n    firstReleaseYear\n    coverArtUrl\n    folderName\n    isFullyMissing\n    artistName\n    artist {\n      id\n      images {\n        thumbs\n      }\n    }\n  }\n": types.AlbumCard_ReleaseFragmentDoc,
    "\n  fragment AlbumHeader_Release on Release {\n    id\n    title\n    type\n    coverArtUrl\n    firstReleaseYear\n    artistName\n    artist {\n      id\n      name\n      images {\n        thumbs\n      }\n    }\n    tracks {\n      id\n      trackLength\n    }\n  }\n": types.AlbumHeader_ReleaseFragmentDoc,
    "\n  fragment AlbumPanel_Release on Release {\n    id\n    folderName\n    isFullyMissing\n    ...PlayAlbumButton_Release\n    ...ReleaseDownloadButton_Release\n    ...AlbumHeader_Release\n    ...AlbumTrackList_Release\n    firstReleaseYear\n    labels {\n      name\n      id\n      catalogNumber\n      disambiguation\n    }\n    artist {\n      id\n    }\n  }\n": types.AlbumPanel_ReleaseFragmentDoc,
    "\n  subscription AlbumPanelUpdates(\n    $artistId: String!\n    $releaseFolderName: String!\n  ) {\n    libraryCacheTracksInReleaseUpdated(\n      artistId: $artistId\n      releaseFolderName: $releaseFolderName\n    ) {\n      track {\n        id\n        isMissing\n        mediaAvailabilityStatus\n      }\n    }\n  }\n": types.AlbumPanelUpdatesDocument,
    "\n  subscription AlbumPanelReleaseMetadataUpdated(\n    $artistId: String!\n    $releaseFolderName: String!\n  ) {\n    libraryReleaseMetadataUpdated(\n      artistId: $artistId\n      releaseFolderName: $releaseFolderName\n    ) {\n      id\n      ...AlbumPanel_Release\n    }\n  }\n": types.AlbumPanelReleaseMetadataUpdatedDocument,
    "\n  mutation RefreshRelease($input: RefreshReleaseInput!) {\n    refreshRelease(input: $input) {\n      ... on RefreshReleaseSuccess {\n        release {\n          id\n          ...AlbumPanel_Release\n        }\n      }\n      ... on RefreshReleaseError {\n        message\n      }\n    }\n  }\n": types.RefreshReleaseDocument,
    "\n  mutation DeleteReleaseAudio($input: DeleteReleaseAudioInput!) {\n    deleteReleaseAudio(input: $input) {\n      ... on DeleteReleaseAudioSuccess {\n        release {\n          id\n          ...AlbumPanel_Release\n        }\n      }\n      ... on DeleteReleaseAudioError {\n        message\n      }\n    }\n  }\n": types.DeleteReleaseAudioDocument,
    "\n  fragment AlbumTrackList_Release on Release {\n    id\n    title\n    folderName\n    artist {\n      id\n    }\n    tracks {\n      id\n      title\n      trackLength\n      isMissing\n      media {\n        id\n        audioUrl\n        audioQualityLabel\n      }\n      ...TrackCreditLinks_Track\n      ...MusicPlayerTrackFactory_Track\n      ...AlbumTrackTag_Track\n      credits {\n        artistName\n        artist {\n          id\n        }\n        mbArtist {\n          id\n        }\n      }\n      statistics {\n        listeners\n        playCount\n      }\n    }\n  }\n": types.AlbumTrackList_ReleaseFragmentDoc,
    "\n  fragment AlbumTrackTag_Track on Track {\n    id\n    isMissing\n    mediaAvailabilityStatus\n  }\n": types.AlbumTrackTag_TrackFragmentDoc,
    "\n  fragment MbReleaseGroupCard_MbReleaseGroup on MbReleaseGroup {\n    id\n    title\n    firstReleaseYear\n    coverArtUri\n  }\n": types.MbReleaseGroupCard_MbReleaseGroupFragmentDoc,
    "\n  fragment PlayAlbumButton_Release on Release {\n    id\n    folderName\n    coverArtUrl\n    artist {\n      id\n      name\n    }\n    tracks {\n      id\n      title\n      isMissing\n      trackLength\n      media {\n        id\n        audioQualityLabel\n      }\n    }\n  }\n": types.PlayAlbumButton_ReleaseFragmentDoc,
    "\n  fragment TrackCreditLinks_Track on Track {\n    id\n    credits {\n      artistName\n      artist {\n        id\n        name\n      }\n      mbArtist {\n        id\n        name\n      }\n    }\n  }\n": types.TrackCreditLinks_TrackFragmentDoc,
    "\n  fragment AlbumList_Release on Release {\n    id\n    isFullyMissing\n    ...AlbumCard_Release\n  }\n": types.AlbumList_ReleaseFragmentDoc,
    "\n  query FixMatch_ReleasesWithScores(\n    $releaseGroupId: String!\n    $artistId: String!\n    $releaseFolderName: String!\n  ) {\n    releasesWithScores(\n      releaseGroupId: $releaseGroupId\n      artistId: $artistId\n      releaseFolderName: $releaseFolderName\n    ) {\n      score\n      reasons\n      release {\n        id\n        title\n        coverArtUri\n        year\n        country\n        status\n        media {\n          tracks {\n            id\n          }\n        }\n      }\n    }\n  }\n": types.FixMatch_ReleasesWithScoresDocument,
    "\n  mutation FixMatch_SetReleaseMatchOverride(\n    $input: SetReleaseMatchOverrideInput!\n  ) {\n    setReleaseMatchOverride(input: $input) {\n      __typename\n      ... on SetReleaseMatchOverrideSuccess {\n        release {\n          id\n        }\n      }\n      ... on SetReleaseMatchOverrideError {\n        message\n      }\n    }\n  }\n": types.FixMatch_SetReleaseMatchOverrideDocument,
    "\n  mutation FixMatch_SetReleaseGroup($input: SetReleaseGroupInput!) {\n    setReleaseGroup(input: $input) {\n      __typename\n      ... on SetReleaseGroupSuccess {\n        release {\n          id\n        }\n      }\n      ... on SetReleaseGroupError {\n        message\n      }\n    }\n  }\n": types.FixMatch_SetReleaseGroupDocument,
    "\n  query FixMatch_ReleaseConnections(\n    $artistId: ID!\n    $releaseFolderName: String!\n  ) {\n    serverLibrary {\n      releaseForArtistByFolderName(\n        artistId: $artistId\n        releaseFolderName: $releaseFolderName\n      ) {\n        id\n        musicBrainzReleaseGroupId\n        title\n        artist {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.FixMatch_ReleaseConnectionsDocument,
    "\n    query FixMatch_SearchReleaseGroups(\n      $name: String!\n      $artistName: String!\n      $limit: Int!\n      $offset: Int!\n    ) {\n      musicBrainz {\n        releaseGroup {\n          searchByNameAndArtistName(\n            name: $name\n            artistName: $artistName\n            limit: $limit\n            offset: $offset\n          ) {\n            id\n            title\n            primaryType\n            secondaryTypes\n            firstReleaseDate\n          }\n        }\n      }\n    }\n  ": types.FixMatch_SearchReleaseGroupsDocument,
    "\n  fragment ArtistCard_Artist on Artist {\n    id\n    name\n    listeners\n    images {\n      thumbs\n    }\n    albums {\n      id\n      isFullyMissing\n    }\n    eps {\n      id\n      isFullyMissing\n    }\n    singles {\n      id\n      isFullyMissing\n    }\n  }\n": types.ArtistCard_ArtistFragmentDoc,
    "\n  fragment MbArtistCard_MbArtist on MbArtist {\n    id\n    name\n    listeners\n    images {\n      artistThumb\n    }\n  }\n": types.MbArtistCard_MbArtistFragmentDoc,
    "\n  fragment TopArtistCard_Artist on LastFmArtist {\n    id\n    name\n    musicBrainzArtist {\n      id\n      name\n      images {\n        artistThumb\n      }\n      artist {\n        id\n      }\n    }\n    statistics {\n      listeners\n    }\n  }\n": types.TopArtistCard_ArtistFragmentDoc,
    "\n  fragment ArtistList_Artist on Artist {\n    id\n    ...ArtistCard_Artist\n  }\n": types.ArtistList_ArtistFragmentDoc,
    "\n  fragment ArtistNotInLibraryPanel_MbArtist on MbArtist {\n    id\n    name\n    images {\n      artistBackground\n    }\n    listeners\n    lastFmArtist {\n      id\n      ...ArtistNotInLibraryTopTracks_LastFmArtist\n    }\n  }\n": types.ArtistNotInLibraryPanel_MbArtistFragmentDoc,
    "\n  fragment ArtistNotInLibraryTopTracks_LastFmArtist on LastFmArtist {\n    id\n    topTracks {\n      id\n      name\n      statistics {\n        listeners\n      }\n    }\n  }\n": types.ArtistNotInLibraryTopTracks_LastFmArtistFragmentDoc,
    "\n  fragment AppearsOnReleaseCard_ArtistAppearsOnRelease on ArtistAppearsOnRelease {\n    musicBrainzReleaseGroupId\n    coverArtUrl\n    releaseTitle\n    firstReleaseYear\n    primaryArtistName\n  }\n": types.AppearsOnReleaseCard_ArtistAppearsOnReleaseFragmentDoc,
    "\n  fragment ArtistActionButtons_Artist on Artist {\n    id\n    ...FixArtistMatchDialog_Artist\n    name\n  }\n": types.ArtistActionButtons_ArtistFragmentDoc,
    "\n    mutation DeleteArtist($input: DeleteArtistInput!) {\n      deleteArtist(input: $input) {\n        __typename\n        ... on DeleteArtistSuccess {\n          deletedArtistId\n        }\n        ... on DeleteArtistError {\n          message\n        }\n      }\n    }\n  ": types.DeleteArtistDocument,
    "\n  query ArtistAlbumList($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        albums {\n          id\n          firstReleaseDate\n          ...AlbumCard_Release\n        }\n      }\n    }\n  }\n": types.ArtistAlbumListDocument,
    "\n  fragment ArtistDownloadAllReleasesButton_Artist on Artist {\n    id\n  }\n": types.ArtistDownloadAllReleasesButton_ArtistFragmentDoc,
    "\n  mutation ArtistDownloadAll_StartBulk(\n    $input: StartBulkDownloadForArtistInput!\n  ) {\n    startBulkDownloadForArtist(input: $input) {\n      __typename\n      ... on StartBulkDownloadForArtistSuccess {\n        queuedCount\n      }\n      ... on StartBulkDownloadForArtistError {\n        message\n      }\n    }\n  }\n": types.ArtistDownloadAll_StartBulkDocument,
    "\n  query ArtistEpList($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        eps {\n          id\n          firstReleaseDate\n          ...AlbumCard_Release\n        }\n      }\n    }\n  }\n": types.ArtistEpListDocument,
    "\n  fragment ArtistImportStatusInfo_Artist on Artist {\n    id\n    name\n  }\n": types.ArtistImportStatusInfo_ArtistFragmentDoc,
    "\n  query ArtistPanel_CurrentImport {\n    artistImport {\n      currentArtistImport {\n        id\n        status\n        completedReleases\n        totalReleases\n        errorMessage\n        artistName\n      }\n    }\n  }\n": types.ArtistPanel_CurrentImportDocument,
    "\n  subscription ArtistImportStatusInfo_Sub {\n    currentArtistImportUpdated {\n      id\n      status\n      completedReleases\n      totalReleases\n      errorMessage\n      artistName\n    }\n  }\n": types.ArtistImportStatusInfo_SubDocument,
    "\n  fragment ArtistNumReleasesAvailableIndicator_Artist on Artist {\n    id\n    albums {\n      id\n      isFullyMissing\n    }\n    eps {\n      id\n      isFullyMissing\n    }\n    singles {\n      id\n      isFullyMissing\n    }\n  }\n": types.ArtistNumReleasesAvailableIndicator_ArtistFragmentDoc,
    "\n  fragment ArtistPanel_Artist on Artist {\n    id\n    ...ArtistActionButtons_Artist\n    ...ArtistImportStatusInfo_Artist\n    ...ArtistNumReleasesAvailableIndicator_Artist\n    ...ArtistServiceConnections_Artist\n    ...ArtistDownloadAllReleasesButton_Artist\n    ...ArtistStatisticsHeader_Artist\n    name\n    listeners\n    connectedExternalServices {\n      isConnected\n      externalService {\n        id\n        name\n      }\n    }\n    albums {\n      id\n    }\n    eps {\n      id\n    }\n    singles {\n      id\n    }\n    images {\n      backgrounds\n    }\n  }\n": types.ArtistPanel_ArtistFragmentDoc,
    "\n  subscription ArtistPanel_LibraryArtistUpdated($artistId: String!) {\n    libraryArtistUpdated(artistId: $artistId) {\n      id\n      ...ArtistPanel_Artist\n    }\n  }\n": types.ArtistPanel_LibraryArtistUpdatedDocument,
    "\n  mutation PanelRefreshTopTracks($input: RefreshArtistTopTracksInput!) {\n    refreshArtistTopTracks(input: $input) {\n      __typename\n      ... on RefreshArtistTopTracksSuccess {\n        artist {\n          id\n          topTracks {\n            ...TopArtistTrackItem_ArtistTopTrack\n          }\n        }\n      }\n    }\n  }\n": types.PanelRefreshTopTracksDocument,
    "\n  mutation PanelRefreshArtistMetaData($artistId: String!) {\n    refreshArtistMetaData(input: { artistId: $artistId }) {\n      __typename\n      ... on RefreshArtistMetaDataSuccess {\n        artist {\n          id\n          ...ArtistPanel_Artist\n        }\n      }\n      ... on RefreshArtistMetaDataError {\n        message\n      }\n    }\n  }\n": types.PanelRefreshArtistMetaDataDocument,
    "\n  mutation RefreshAllReleasesForArtist($artistId: String!) {\n    refreshAllReleasesForArtist(artistId: $artistId) {\n      __typename\n      ... on RefreshAllReleasesForArtistSuccess {\n        artistId\n        refreshedCount\n      }\n      ... on RefreshAllReleasesForArtistError {\n        message\n      }\n    }\n  }\n": types.RefreshAllReleasesForArtistDocument,
    "\n  mutation GenerateArtistShareFiles($input: GenerateArtistShareFilesInput!) {\n    generateArtistShareFiles(input: $input) {\n      __typename\n      ... on GenerateArtistShareFilesSuccess {\n        artistId\n        artistName\n        tagFileName\n        manifestPath\n      }\n      ... on GenerateArtistShareFilesError {\n        message\n      }\n    }\n  }\n": types.GenerateArtistShareFilesDocument,
    "\n  fragment ArtistServiceConnections_Artist on Artist {\n    id\n    connectedExternalServices {\n      isConnected\n      artistPageUrl\n      externalService {\n        id\n        name\n      }\n    }\n  }\n": types.ArtistServiceConnections_ArtistFragmentDoc,
    "\n  query ArtistSingleList($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        singles {\n          id\n          firstReleaseDate\n          ...AlbumCard_Release\n        }\n      }\n    }\n  }\n": types.ArtistSingleListDocument,
    "\n  fragment ArtistStatisticsHeader_Artist on Artist {\n    id\n    name\n    albums {\n      id\n      isFullyMissing\n    }\n    eps {\n      id\n      isFullyMissing\n    }\n    singles {\n      id\n      isFullyMissing\n    }\n  }\n": types.ArtistStatisticsHeader_ArtistFragmentDoc,
    "\n  query ReleaseListQuery($artistId: ID!) {\n    artist {\n      byId(artistId: $artistId) {\n        id\n        releases {\n          id\n          firstReleaseDate\n          type\n          ...AlbumCard_Release\n        }\n      }\n    }\n  }\n": types.ReleaseListQueryDocument,
    "\n  fragment TopArtistTrackItem_ArtistTopTrack on ArtistTopTrack {\n    title\n    releaseTitle\n    playCount\n    coverArtUrl\n    trackLength\n    track {\n      id\n      ...MusicPlayerTrackFactory_Track\n      ...AlbumTrackTag_Track\n      trackLength\n      trackNumber\n      isMissing\n      release {\n        id\n        folderName\n        artist {\n          id\n          images {\n            thumbs\n          }\n        }\n      }\n    }\n  }\n": types.TopArtistTrackItem_ArtistTopTrackFragmentDoc,
    "\n  query TopArtistTracks($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        topTracks {\n          ...TopArtistTrackItem_ArtistTopTrack\n        }\n      }\n    }\n  }\n": types.TopArtistTracksDocument,
    "\n  query ArtistTopTracksForQueue($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        topTracks {\n          title\n          coverArtUrl\n          track {\n            id\n            trackNumber\n            trackLength\n            release {\n              id\n              folderName\n              artist {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.ArtistTopTracksForQueueDocument,
    "\n  query ArtistAppearsOnQuery($artistId: ID!) {\n    viewer {\n      id\n    }\n    artist {\n      byId(artistId: $artistId) {\n        id\n        name\n        appearsOn {\n          releases {\n            musicBrainzReleaseGroupId\n            ...AppearsOnReleaseCard_ArtistAppearsOnRelease\n          }\n          playlists {\n            id\n            ...PlaylistCard_Playlist\n          }\n        }\n      }\n    }\n  }\n": types.ArtistAppearsOnQueryDocument,
    "\n  query ArtistStatisticsHeader($artistId: ID!) {\n    artist {\n      byId(artistId: $artistId) {\n        id\n        ...ArtistStatisticsHeader_Artist\n      }\n    }\n  }\n": types.ArtistStatisticsHeaderDocument,
    "\n  query SimilarArtistsTabContent($artistId: ID!) {\n    artist {\n      byId(artistId: $artistId) {\n        id\n        similarArtists {\n          name\n          thumb\n          similarityScore\n          artist {\n            id\n          }\n          musicBrainzArtistId\n        }\n      }\n    }\n  }\n": types.SimilarArtistsTabContentDocument,
    "\n  mutation RefreshSimilarArtists($artistId: String!) {\n    refreshArtistMetaData(input: { artistId: $artistId }) {\n      __typename\n      ... on RefreshArtistMetaDataSuccess {\n        artist {\n          id\n          similarArtists {\n            name\n            thumb\n            similarityScore\n            artist {\n              id\n            }\n            musicBrainzArtistId\n          }\n        }\n      }\n      ... on RefreshArtistMetaDataError {\n        message\n      }\n    }\n  }\n": types.RefreshSimilarArtistsDocument,
    "\n  mutation ImportSimilarArtists($artistId: String!) {\n    importSimilarArtists(input: { artistId: $artistId }) {\n      __typename\n      ... on ImportSimilarArtistsSuccess {\n        importedCount\n        artist {\n          id\n        }\n      }\n      ... on ImportSimilarArtistsError {\n        message\n      }\n    }\n  }\n": types.ImportSimilarArtistsDocument,
    "\n  fragment FixArtistMatchDialog_Artist on Artist {\n    id\n    name\n    connectedExternalServices {\n      isConnected\n      externalArtistId\n      externalService {\n        name\n        id\n      }\n    }\n  }\n": types.FixArtistMatchDialog_ArtistFragmentDoc,
    "\n  query FixArtistMatch_SearchMbArtists(\n    $name: String!\n    $limit: Int!\n    $offset: Int!\n  ) {\n    musicBrainz {\n      artist {\n        searchByName(name: $name, limit: $limit, offset: $offset) {\n          id\n          name\n          country\n          type\n          disambiguation\n          listeners\n          images {\n            artistThumb\n          }\n          lastFmArtist {\n            summary\n          }\n        }\n      }\n    }\n  }\n": types.FixArtistMatch_SearchMbArtistsDocument,
    "\n  mutation FixArtistMatch_SetMb($input: SetArtistMusicBrainzMatchInput!) {\n    setArtistMusicBrainzMatch(input: $input) {\n      __typename\n      ... on SetArtistMusicBrainzMatchSuccess {\n        artist {\n          id\n        }\n      }\n      ... on SetArtistMusicBrainzMatchError {\n        message\n      }\n    }\n  }\n": types.FixArtistMatch_SetMbDocument,
    "\n  mutation FixArtistMatch_SetSpotify($input: SetArtistSpotifyMatchInput!) {\n    setArtistSpotifyMatch(input: $input) {\n      __typename\n      ... on SetArtistSpotifyMatchSuccess {\n        artist {\n          id\n        }\n      }\n      ... on SetArtistSpotifyMatchError {\n        message\n      }\n    }\n  }\n": types.FixArtistMatch_SetSpotifyDocument,
    "\n  query FixArtistMatch_SearchSpotify(\n    $name: String!\n    $limit: Int!\n    $offset: Int!\n  ) {\n    spotify {\n      searchByName(name: $name, limit: $limit, offset: $offset) {\n        id\n        name\n        images {\n          url\n        }\n      }\n    }\n  }\n": types.FixArtistMatch_SearchSpotifyDocument,
    "\n  mutation SignIn($username: String!, $password: String!) {\n    signIn(input: { username: $username, password: $password }) {\n      __typename\n      ... on SignInSuccess {\n        user {\n          id\n          username\n        }\n      }\n      ... on SignInError {\n        message\n      }\n    }\n  }\n": types.SignInDocument,
    "\n  mutation SignOut {\n    signOut(input: { confirm: true }) {\n      __typename\n\n      ... on SignOutSuccess {\n        success\n      }\n      ... on SignOutError {\n        message\n      }\n    }\n  }\n": types.SignOutDocument,
    "\n  query ServerPublicBaseUrl {\n    serverSettings {\n      id\n      publicBaseUrl\n    }\n  }\n": types.ServerPublicBaseUrlDocument,
    "\n  query DownloadOverviewQuery {\n    downloads {\n      downloadQueue {\n        id\n        queueLength\n        items {\n          id\n          artistId\n          releaseFolderName\n        }\n      }\n      downloadSlots {\n        id\n        isActive\n        isWorking\n        currentWork {\n          artistId\n          releaseFolderName\n        }\n        currentProgress {\n          id\n          artistId\n          releaseFolderName\n          status\n          totalTracks\n          completedTracks\n          errorMessage\n          currentDownloadSpeedKbps\n          currentProvider\n          currentProviderIndex\n          totalProviders\n        }\n        status\n      }\n    }\n  }\n": types.DownloadOverviewQueryDocument,
    "\n  subscription DownloadQueueUpdatedSub {\n    downloadQueueUpdated {\n      queueLength\n      items {\n        id\n        artistId\n        releaseFolderName\n      }\n    }\n  }\n": types.DownloadQueueUpdatedSubDocument,
    "\n  subscription SlotProgressUpdatedSub {\n    slotProgressUpdated {\n      slotId\n      progress {\n        id\n        artistId\n        releaseFolderName\n        status\n        totalTracks\n        completedTracks\n        errorMessage\n        currentDownloadSpeedKbps\n        currentProvider\n        currentProviderIndex\n        totalProviders\n      }\n    }\n  }\n": types.SlotProgressUpdatedSubDocument,
    "\n  subscription SlotStatusUpdatedSub {\n    slotStatusUpdated {\n      slotId\n      isActive\n      currentWork {\n        id\n        artistId\n        releaseFolderName\n      }\n    }\n  }\n": types.SlotStatusUpdatedSubDocument,
    "\n  fragment ReleaseDownloadButton_Release on Release {\n    id\n    isFullyMissing\n    folderName\n    downloadStatus\n    artist {\n      id\n    }\n  }\n": types.ReleaseDownloadButton_ReleaseFragmentDoc,
    "\n  mutation AlbumPanel_StartDownloadRelease(\n    $artistId: String!\n    $releaseFolderName: String!\n  ) {\n    startDownloadRelease(\n      input: { artistId: $artistId, releaseFolderName: $releaseFolderName }\n    ) {\n      __typename\n      ... on StartDownloadReleaseSuccess {\n        release {\n          id\n        }\n      }\n      ... on StartDownloadReleaseAccepted {\n        artistId\n        releaseFolderName\n      }\n    }\n  }\n": types.AlbumPanel_StartDownloadReleaseDocument,
    "\n  subscription ReleaseDownloadButton(\n    $artistId: String!\n    $releaseFolderName: String!\n  ) {\n    libraryReleaseDownloadStatusUpdated(\n      artistId: $artistId\n      releaseFolderName: $releaseFolderName\n    ) {\n      release {\n        id\n        downloadStatus\n        isFullyMissing\n      }\n    }\n  }\n": types.ReleaseDownloadButtonDocument,
    "\n  mutation CreateUser($username: String!, $password: String!) {\n    createUser(input: { username: $username, password: $password }) {\n      __typename\n      ... on CreateUserSuccess {\n        # Assuming a similar success payload\n        user {\n          id\n          username\n        }\n      }\n      ... on CreateUserError {\n        # Assuming a similar error payload\n        message\n      }\n    }\n  }\n": types.CreateUserDocument,
    "\n  fragment LikedSongRow_LikedSong on LikedSong {\n    id\n    recording {\n      id\n      title\n      length\n      artists {\n        id\n        name\n      }\n      mainAlbum {\n        id\n        title\n        coverArtUri\n        artists {\n          id\n        }\n      }\n    }\n  }\n": types.LikedSongRow_LikedSongFragmentDoc,
    "\n  fragment LikedSongsList_User on User {\n    id\n    likedSongs {\n      id\n      ...LikedSongRow_LikedSong\n    }\n  }\n": types.LikedSongsList_UserFragmentDoc,
    "\n  fragment MusicPlayerTrackFactory_Track on Track {\n    id\n    title\n    trackLength\n    trackNumber\n    media {\n      id\n      audioQualityLabel\n    }\n    release {\n      id\n      folderName\n      coverArtUrl\n      artist {\n        id\n        name\n      }\n    }\n    trackNumber\n  }\n": types.MusicPlayerTrackFactory_TrackFragmentDoc,
    "\n  mutation CreatePlaylist {\n    createPlaylist(input: {}) {\n      __typename\n      ... on CreatePlaylistSuccess {\n        playlist {\n          id\n          name\n          createdAt\n        }\n      }\n    }\n  }\n": types.CreatePlaylistDocument,
    "\n  fragment MissingArtistsInPlaylistBox_Playlist on Playlist {\n    id\n    items {\n      id\n      artist {\n        id\n      }\n    }\n  }\n": types.MissingArtistsInPlaylistBox_PlaylistFragmentDoc,
    "\n  mutation EnqueueMissingArtistsFromPlaylist($playlistId: ID!) {\n    enqueueMissingArtistsFromPlaylist(playlistId: $playlistId)\n  }\n": types.EnqueueMissingArtistsFromPlaylistDocument,
    "\n  fragment PlaylistCard_Playlist on Playlist {\n    id\n    name\n    coverImageUrl\n    createdAt\n  }\n": types.PlaylistCard_PlaylistFragmentDoc,
    "\n  fragment PlaylistHeader_Playlist on Playlist {\n    id\n    name\n    items {\n      id\n      coverImageUrl\n    }\n  }\n": types.PlaylistHeader_PlaylistFragmentDoc,
    "\n  fragment PlaylistPanel_Playlist on Playlist {\n    id\n    ...PlaylistHeader_Playlist\n    ...MissingArtistsInPlaylistBox_Playlist\n    name\n    items {\n      id\n      ...PlaylistTrackItem_PlaylistItem\n    }\n  }\n": types.PlaylistPanel_PlaylistFragmentDoc,
    "\n  fragment PlaylistTrackItem_PlaylistItem on PlaylistItem {\n    id\n    title\n    artistName\n    coverImageUrl\n    trackLengthMs\n    artist {\n      id\n      name\n    }\n\n    track {\n      ...TrackCreditLinks_Track\n      ...AlbumTrackTag_Track\n      trackLength\n      trackNumber\n      media {\n        id\n        audioQualityLabel\n      }\n      title\n      release {\n        id\n        folderName\n        coverArtUrl\n        artist {\n          id\n          name\n          images {\n            thumbs\n          }\n        }\n      }\n    }\n  }\n": types.PlaylistTrackItem_PlaylistItemFragmentDoc,
    "\n  mutation RemoveItemFromPlaylist($playlistId: ID!, $playlistItemId: ID!) {\n    removeItemFromPlaylist(\n      input: { playlistId: $playlistId, playlistItemId: $playlistItemId }\n    ) {\n      __typename\n      ... on RemoveItemFromPlaylistSuccess {\n        playlist {\n          id\n        }\n      }\n      ... on RemoveItemFromPlaylistError {\n        message\n      }\n    }\n  }\n": types.RemoveItemFromPlaylistDocument,
    "\n  mutation MovePlaylistItem(\n    $newIndex: Int!\n    $playlistId: ID!\n    $playlistItemId: ID!\n  ) {\n    movePlaylistItem(\n      input: {\n        newIndex: $newIndex\n        playlistId: $playlistId\n        playlistItemId: $playlistItemId\n      }\n    ) {\n      __typename\n      ... on MovePlaylistItemSuccess {\n        playlist {\n          id\n        }\n      }\n      ... on MovePlaylistItemError {\n        message\n      }\n    }\n  }\n": types.MovePlaylistItemDocument,
    "\n  query FixArtist_MbArtistSearch($artistName: String!, $trackName: String!) {\n    musicBrainz {\n      artist {\n        searchByName(name: $artistName, limit: 15) {\n          id\n          name\n          disambiguation\n          country\n          type\n          listeners\n          images {\n            artistThumb\n          }\n          lastFmArtist {\n            summary\n          }\n        }\n      }\n      recording {\n        searchByName(name: $trackName, limit: 5) {\n          id\n          title\n          artists {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": types.FixArtist_MbArtistSearchDocument,
    "\n  mutation SetPlaylistItemArtistMusicBrainzMatch(\n    $input: SetPlaylistItemArtistMusicBrainzMatchInput!\n  ) {\n    setPlaylistItemArtistMusicBrainzMatch(input: $input) {\n      __typename\n      ... on SetPlaylistItemArtistMusicBrainzMatchSuccess {\n        playlistItem {\n          id\n        }\n      }\n      ... on SetPlaylistItemArtistMusicBrainzMatchNotFound {\n        message\n      }\n      ... on SetPlaylistItemArtistMusicBrainzMatchError {\n        message\n      }\n    }\n  }\n": types.SetPlaylistItemArtistMusicBrainzMatchDocument,
    "\n  query PlaylistList {\n    viewer {\n      id\n      playlists {\n        id\n        name\n        createdAt\n      }\n    }\n  }\n": types.PlaylistListDocument,
    "\n  mutation RenamePlaylist($playlistId: ID!, $newPlaylistName: String!) {\n    renamePlaylist(\n      input: { playlistId: $playlistId, newPlaylistName: $newPlaylistName }\n    ) {\n      __typename\n      ... on RenamePlaylistSuccess {\n        playlist {\n          id\n          name\n          createdAt\n        }\n      }\n    }\n  }\n": types.RenamePlaylistDocument,
    "\n  mutation DeletePlaylist($playlistId: ID!) {\n    deletePlaylist(input: { playlistId: $playlistId }) {\n      __typename\n      ... on DeletePlaylistSuccess {\n        deletedPlaylistId\n      }\n    }\n  }\n": types.DeletePlaylistDocument,
    "\n  query TopArtistRecommendations {\n    recommendations {\n      topArtists {\n        id\n        ...TopArtistCard_Artist\n      }\n    }\n  }\n": types.TopArtistRecommendationsDocument,
    "\n  fragment TopTrackCard_LastFmTrack on LastFmTrack {\n    id\n    playCount\n    name\n    artist {\n      id\n      musicBrainzArtist {\n        id\n        name\n        images {\n          artistThumb\n        }\n      }\n    }\n    album {\n      id\n      imageUrl\n    }\n    images {\n      thumbs\n    }\n  }\n": types.TopTrackCard_LastFmTrackFragmentDoc,
    "\n  query TopTrackRecommendations {\n    recommendations {\n      topTracks {\n        id\n        ...TopTrackCard_LastFmTrack\n      }\n    }\n  }\n": types.TopTrackRecommendationsDocument,
    "\n  query AlbumSearchResultsSearch($text: String!, $limit: Int!) {\n    musicBrainz {\n      releaseGroup {\n        searchByName(name: $text, limit: $limit) {\n          id\n          title\n          ...MbReleaseGroupCard_MbReleaseGroup\n        }\n      }\n    }\n  }\n": types.AlbumSearchResultsSearchDocument,
    "\n  query ArtistSearchResultsSearch($searchText: String!, $limit: Int!) {\n    musicBrainz {\n      artist {\n        searchByName(name: $searchText, limit: $limit) {\n          id\n          name\n          ...MbArtistCard_MbArtist\n          images {\n            artistThumb\n          }\n        }\n      }\n    }\n  }\n": types.ArtistSearchResultsSearchDocument,
    "\n  query PlaylistSearchResultsSearch($searchText: String!, $limit: Int!) {\n    playlist {\n      searchPlaylists(searchTerm: $searchText, limit: $limit) {\n        id\n        ...PlaylistCard_Playlist\n      }\n    }\n  }\n": types.PlaylistSearchResultsSearchDocument,
    "\n  query RecordingSearchResultsSearch($text: String!, $limit: Int!) {\n    musicBrainz {\n      recording {\n        searchByName(name: $text, limit: $limit) {\n          id\n          title\n          length\n          nameCredits {\n            artist {\n              id\n              name\n            }\n          }\n          mainAlbum {\n            id\n            title\n            coverArtUri\n          }\n        }\n      }\n    }\n  }\n": types.RecordingSearchResultsSearchDocument,
    "\n  query SearchResultArtistSearch($text: String!) {\n    serverLibrary {\n      searchArtists(searchTerm: $text, limit: 5) {\n        id\n        name\n        images {\n          thumbs\n        }\n      }\n    }\n  }\n": types.SearchResultArtistSearchDocument,
    "\n  query SearchResultPlaylistSearch($searchText: String!) {\n    playlist {\n      searchPlaylists(searchTerm: $searchText, limit: 5) {\n        id\n        name\n        coverImageUrl\n        createdAt\n      }\n    }\n  }\n": types.SearchResultPlaylistSearchDocument,
    "\n  query SearchResultReleaseSearch($text: String!) {\n    serverLibrary {\n      searchReleases(searchTerm: $text, limit: 5) {\n        id\n        title\n        coverArtUrl\n        artistName\n        artist {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.SearchResultReleaseSearchDocument,
    "\n  query SearchResultTrackSearch($text: String!) {\n    serverLibrary {\n      searchTracks(searchTerm: $text, limit: 5) {\n        id\n        title\n        trackLength\n        release {\n          id\n          title\n          coverArtUrl\n          folderName\n          artistName\n          artist {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n": types.SearchResultTrackSearchDocument,
    "\n  fragment ServerLibraryStatisticsHeader_ServerLibrary on ServerLibrarySearchRoot {\n    libraryStatistics {\n      artistCount\n      releaseCount\n      trackCount\n      isInitialized\n      lastUpdated\n    }\n    allReleases {\n      id\n      type\n      isFullyMissing\n    }\n  }\n": types.ServerLibraryStatisticsHeader_ServerLibraryFragmentDoc,
    "\n  fragment DownloadPathForm_ServerSettings on ServerSettings {\n    id\n    downloadPath\n  }\n": types.DownloadPathForm_ServerSettingsFragmentDoc,
    "\n  mutation UpdateDownloadPath($newDownloadPath: String!) {\n    updateDownloadPath(input: { newDownloadPath: $newDownloadPath }) {\n      ... on UpdateDownloadPathSuccess {\n        serverSettings {\n          id\n          downloadPath\n        }\n      }\n    }\n  }\n": types.UpdateDownloadPathDocument,
    "\n  mutation UpdateDownloadSlotCount($input: UpdateDownloadSlotCountInput!) {\n    updateDownloadSlotCount(input: $input) {\n      ... on UpdateDownloadSlotCountSuccess {\n        serverSettings {\n          downloadSlotCount\n        }\n      }\n      ... on UpdateDownloadSlotCountError {\n        message\n      }\n    }\n  }\n": types.UpdateDownloadSlotCountDocument,
    "\n  fragment LibraryPathForm_ServerSettings on ServerSettings {\n    id\n    ...ChangeLibraryFolderControl_ServerSettings\n    libraryPath\n    storageStats {\n      totalDiskBytes\n      availableFreeBytes\n      librarySizeBytes\n      estimatedTotalLibrarySizeBytes\n    }\n  }\n": types.LibraryPathForm_ServerSettingsFragmentDoc,
    "\n  mutation UpdatePublicBaseUrl($input: UpdatePublicBaseUrlInput!) {\n    updatePublicBaseUrl(input: $input) {\n      ... on UpdatePublicBaseUrlSuccess {\n        serverSettings {\n          id\n          publicBaseUrl\n        }\n      }\n      ... on UpdatePublicBaseUrlError {\n        message\n      }\n    }\n  }\n": types.UpdatePublicBaseUrlDocument,
    "\n  query SoulSeekConnectionSettings_Query {\n    serverSettings {\n      id\n      soulSeekHost\n      soulSeekPort\n      soulSeekUsername\n    }\n  }\n": types.SoulSeekConnectionSettings_QueryDocument,
    "\n  mutation UpdateSoulSeekConnectionSettings($input: UpdateSoulSeekConnectionSettingsInput!) {\n    updateSoulSeekConnectionSettings(input: $input) {\n      __typename\n      ... on UpdateSoulSeekConnectionSettingsSuccess {\n        serverSettings { id soulSeekHost soulSeekPort soulSeekUsername }\n      }\n      ... on UpdateSoulSeekConnectionSettingsError { message }\n    }\n  }\n": types.UpdateSoulSeekConnectionSettingsDocument,
    "\n  query SoulSeekSettings_Query {\n    serverSettings {\n      id\n      soulSeekSearchTimeLimitSeconds\n    }\n  }\n": types.SoulSeekSettings_QueryDocument,
    "\n  mutation UpdateSoulSeekSearchTimeLimit($seconds: Int!) {\n    updateSoulSeekSearchTimeLimit(seconds: $seconds) {\n      __typename\n      ... on UpdateSoulSeekSearchTimeLimitSuccess {\n        serverSettings {\n          id\n          soulSeekSearchTimeLimitSeconds\n        }\n      }\n      ... on UpdateSoulSeekSearchTimeLimitError {\n        message\n      }\n    }\n  }\n": types.UpdateSoulSeekSearchTimeLimitDocument,
    "\n  query TopTracksServiceSettings {\n    serverSettings {\n      id\n      listenBrainzTopTracksEnabled\n      spotifyTopTracksEnabled\n      lastFmTopTracksEnabled\n    }\n  }\n": types.TopTracksServiceSettingsDocument,
    "\n  mutation UpdateTopTracksServiceSettings(\n    $input: UpdateTopTracksServiceSettingsInput!\n  ) {\n    updateTopTracksServiceSettings(input: $input) {\n      ... on UpdateTopTracksServiceSettingsSuccess {\n        success\n        message\n      }\n      ... on UpdateTopTracksServiceSettingsError {\n        message\n      }\n    }\n  }\n": types.UpdateTopTracksServiceSettingsDocument,
    "\n  fragment ChangeLibraryFolderControl_ServerSettings on ServerSettings {\n    libraryPath\n    serverLibraryManifestStatus {\n      id\n      hasLibraryManifest\n    }\n  }\n": types.ChangeLibraryFolderControl_ServerSettingsFragmentDoc,
    "\n  query ChangeFolder_HasLibraryManifest($path: String!) {\n    fileSystem {\n      hasLibraryManifest(path: $path)\n    }\n  }\n": types.ChangeFolder_HasLibraryManifestDocument,
    "\n  mutation UpdateLibraryPath($newLibraryPath: String!) {\n    updateLibraryPath(input: { newLibraryPath: $newLibraryPath }) {\n      ... on UpdateLibraryPathSuccess {\n        serverSettings {\n          id\n          libraryPath\n        }\n      }\n    }\n  }\n": types.UpdateLibraryPathDocument,
    "\n  mutation CreateLibraryManifest {\n    createLibraryManifest {\n      ... on CreateLibraryManifestSuccess {\n        serverLibraryManifestStatus {\n          id\n          hasLibraryManifest\n        }\n      }\n      ... on CreateLibraryManifestError {\n        message\n      }\n    }\n  }\n": types.CreateLibraryManifestDocument,
    "\n  fragment DirectoryTreeItem_FileSystemEntry on FileSystemEntry {\n    id\n    name\n    path\n    isDirectory\n    hasChildren\n    isAccessible\n    hasLibraryManifest\n  }\n": types.DirectoryTreeItem_FileSystemEntryFragmentDoc,
    "\n  query DirectoryTreeItem($path: String) {\n    fileSystem {\n      browseFileSystem(path: $path) {\n        id\n        isDirectory\n        path\n        ...DirectoryTreeItem_FileSystemEntry\n      }\n    }\n  }\n": types.DirectoryTreeItemDocument,
    "\n  query BrowseFileSystem($path: String) {\n    fileSystem {\n      browseFileSystem(path: $path) {\n        path\n        isDirectory\n        hasLibraryManifest\n        ...DirectoryTreeItem_FileSystemEntry\n      }\n    }\n  }\n": types.BrowseFileSystemDocument,
    "\n  query Sidebar {\n    viewer {\n      id\n      username\n      isAdmin\n    }\n  }\n": types.SidebarDocument,
    "\n  query ArtistImportQueuePanel_Query {\n    artistImport {\n      artistImportQueue {\n        id\n        queueLength\n        items {\n          id\n          artistName\n          songTitle\n        }\n      }\n      currentArtistImport {\n        id\n        artistName\n        songTitle\n        statusInfo {\n          id\n          text\n        }\n        totalReleases\n        completedReleases\n        errorMessage\n      }\n    }\n  }\n": types.ArtistImportQueuePanel_QueryDocument,
    "\n  subscription ArtistImportQueueUpdatedSub {\n    artistImportQueueUpdated {\n      id\n      queueLength\n      items {\n        id\n        artistName\n        songTitle\n      }\n    }\n  }\n": types.ArtistImportQueueUpdatedSubDocument,
    "\n  subscription CurrentArtistImportUpdatedSub {\n    currentArtistImportUpdated {\n      id\n      artistName\n      songTitle\n      statusInfo {\n        id\n        text\n      }\n      totalReleases\n      completedReleases\n      errorMessage\n    }\n  }\n": types.CurrentArtistImportUpdatedSubDocument,
    "\n  fragment SoulSeekNetworkStatus_SoulSeekStatus on SoulSeekStatus {\n    id\n    status\n  }\n": types.SoulSeekNetworkStatus_SoulSeekStatusFragmentDoc,
    "\n  subscription SoulSeekNetworkStatusSubscription {\n    soulSeekStatusUpdated {\n      ...SoulSeekNetworkStatus_SoulSeekStatus\n    }\n  }\n": types.SoulSeekNetworkStatusSubscriptionDocument,
    "\n  query SoulSeekNetworkStatusQuery {\n    external {\n      id\n      soulSeek {\n        id\n        status {\n          ...SoulSeekNetworkStatus_SoulSeekStatus\n        }\n      }\n    }\n  }\n": types.SoulSeekNetworkStatusQueryDocument,
    "\n  mutation ImportSpotifyPlaylist($playlistId: String!, $userId: UUID!) {\n    importSpotifyPlaylist(input: { playlistId: $playlistId, userId: $userId }) {\n      __typename\n      ... on ImportSpotifyPlaylistSuccess {\n        playlist {\n          id\n          name\n        }\n      }\n      ... on ImportSpotifyPlaylistError {\n        message\n      }\n    }\n  }\n": types.ImportSpotifyPlaylistDocument,
    "\n  fragment SpotifyPlaylistsList_SpotifyPlaylist on SpotifyPlaylist {\n    id\n    description\n    name\n    coverImageUrl\n  }\n": types.SpotifyPlaylistsList_SpotifyPlaylistFragmentDoc,
    "\n  query UserPlaylistsLoader_Query($spotifyUsername: String!) {\n    playlist {\n      importPlaylists {\n        spotify {\n          spotifyPlaylistsForUser(username: $spotifyUsername) {\n            id\n            ...SpotifyPlaylistsList_SpotifyPlaylist\n          }\n        }\n      }\n    }\n  }\n": types.UserPlaylistsLoader_QueryDocument,
    "\n  fragment SpotifyPlaylistPanel_SpotifyPlaylist on SpotifyPlaylist {\n    id\n    name\n    description\n    coverImageUrl\n    totalTracks\n    tracks {\n      id\n      title\n      durationMs\n      artistNames\n      albumCoverImageUrl\n      previewUrl\n    }\n  }\n": types.SpotifyPlaylistPanel_SpotifyPlaylistFragmentDoc,
    "\n  query ViewerIdForSpotifyImport {\n    viewer {\n      id\n    }\n  }\n": types.ViewerIdForSpotifyImportDocument,
    "\n  mutation EnqueueArtistsFromSpotifyPlaylist($playlistId: String!) {\n    enqueueArtistsFromSpotifyPlaylist(input: { playlistId: $playlistId })\n  }\n": types.EnqueueArtistsFromSpotifyPlaylistDocument,
    "\n  mutation AdminCreateUser($input: CreateUserInput!) {\n    createUser(input: $input) {\n      __typename\n      ... on CreateUserSuccess {\n        users {\n          id\n          ...UserAdminPanel_User\n        }\n      }\n      ... on CreateUserError {\n        message\n      }\n    }\n  }\n": types.AdminCreateUserDocument,
    "\n  fragment UserAdminCard_User on User {\n    id\n    username\n    roles\n  }\n": types.UserAdminCard_UserFragmentDoc,
    "\n  fragment UserAdminPanel_Viewer on User {\n    id\n    roles\n    username\n    createdAt\n  }\n": types.UserAdminPanel_ViewerFragmentDoc,
    "\n  fragment UserAdminPanel_User on User {\n    id\n    ...UserDeleteButton_User\n    ...UserChangeUsernameButton_User\n    ...UserChangePasswordButton_User\n    ...UserRolesToggles_User\n    ...UserAdminCard_User\n    roles\n    username\n    createdAt\n    isAdmin\n  }\n": types.UserAdminPanel_UserFragmentDoc,
    "\n  fragment UserChangePasswordButton_User on User {\n    id\n    username\n  }\n": types.UserChangePasswordButton_UserFragmentDoc,
    "\n  mutation AdminSetUserPassword($input: SetUserPasswordInput!) {\n    setUserPassword(input: $input) {\n      __typename\n      ... on SetUserPasswordSuccess {\n        user {\n          ...UserAdminPanel_User\n        }\n      }\n      ... on SetUserPasswordError {\n        message\n      }\n    }\n  }\n": types.AdminSetUserPasswordDocument,
    "\n  fragment UserChangeUsernameButton_User on User {\n    id\n    username\n  }\n": types.UserChangeUsernameButton_UserFragmentDoc,
    "\n  mutation AdminUpdateUserUsername($input: UpdateUserUsernameInput!) {\n    updateUserUsername(input: $input) {\n      __typename\n      ... on UpdateUserUsernameSuccess {\n        user {\n          ...UserAdminPanel_User\n        }\n      }\n      ... on UpdateUserUsernameError {\n        message\n      }\n    }\n  }\n": types.AdminUpdateUserUsernameDocument,
    "\n  fragment UserDeleteButton_User on User {\n    id\n    username\n  }\n": types.UserDeleteButton_UserFragmentDoc,
    "\n  mutation DeleteUser($input: DeleteUserInput!) {\n    deleteUser(input: $input) {\n      __typename\n      ... on DeleteUserSuccess {\n        deletedUserId\n        user {\n          users {\n            nodes {\n              ...UserAdminPanel_User\n            }\n          }\n        }\n      }\n      ... on DeleteUserError {\n        message\n      }\n    }\n  }\n": types.DeleteUserDocument,
    "\n  fragment UserRolesToggles_User on User {\n    id\n    username\n    roles\n  }\n": types.UserRolesToggles_UserFragmentDoc,
    "\n  mutation UpdateUserRoles($input: UpdateUserRolesInput!) {\n    updateUserRoles(input: $input) {\n      __typename\n      ... on UpdateUserRolesSuccess {\n        user {\n          id\n          ...UserAdminPanel_User\n        }\n      }\n      ... on UpdateUserRolesError {\n        message\n      }\n    }\n  }\n": types.UpdateUserRolesDocument,
    "\n  fragment UserProfilePanel_User on User {\n    id\n    username\n    createdAt\n    updatedAt\n    listenBrainzUserId\n    hasListenBrainzToken\n  }\n": types.UserProfilePanel_UserFragmentDoc,
    "\n  mutation UpdateUserListenBrainzCredentials(\n    $input: UpdateUserListenBrainzCredentialsInput!\n  ) {\n    updateUserListenBrainzCredentials(input: $input) {\n      ... on UpdateUserListenBrainzCredentialsSuccess {\n        user {\n          id\n          username\n          listenBrainzUserId\n          hasListenBrainzToken\n        }\n      }\n      ... on UpdateUserListenBrainzCredentialsError {\n        message\n      }\n    }\n  }\n": types.UpdateUserListenBrainzCredentialsDocument,
    "\n  query UserProfileWidget {\n    viewer {\n      id\n      username\n    }\n  }\n": types.UserProfileWidgetDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Bootstrap {\n    areThereAnyUsers\n    viewer {\n      id\n    }\n  }\n"): (typeof documents)["\n  query Bootstrap {\n    areThereAnyUsers\n    viewer {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AdminUsersPage {\n    user {\n      users {\n        nodes {\n          ...UserAdminPanel_User\n        }\n      }\n    }\n    viewer {\n      id\n      ...UserAdminPanel_Viewer\n      roles\n      isAdmin\n    }\n  }\n"): (typeof documents)["\n  query AdminUsersPage {\n    user {\n      users {\n        nodes {\n          ...UserAdminPanel_User\n        }\n      }\n    }\n    viewer {\n      id\n      ...UserAdminPanel_Viewer\n      roles\n      isAdmin\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AlbumListQuery {\n    serverLibrary {\n      allReleases {\n        id\n        ...AlbumList_Release\n      }\n    }\n  }\n"): (typeof documents)["\n  query AlbumListQuery {\n    serverLibrary {\n      allReleases {\n        id\n        ...AlbumList_Release\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AlbumQuery($artistId: ID!, $releaseFolderName: String!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        name\n        releaseByFolderName(releaseFolderName: $releaseFolderName) {\n          id\n          title\n          ...AlbumPanel_Release\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AlbumQuery($artistId: ID!, $releaseFolderName: String!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        name\n        releaseByFolderName(releaseFolderName: $releaseFolderName) {\n          id\n          title\n          ...AlbumPanel_Release\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ArtistListQuery {\n    serverLibrary {\n      allArtists {\n        id\n        ...ArtistList_Artist\n      }\n    }\n  }\n"): (typeof documents)["\n  query ArtistListQuery {\n    serverLibrary {\n      allArtists {\n        id\n        ...ArtistList_Artist\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ArtistQuery($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        name\n        ...ArtistPanel_Artist\n      }\n    }\n  }\n"): (typeof documents)["\n  query ArtistQuery($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        name\n        ...ArtistPanel_Artist\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query IndexPageQuery {\n    serverLibrary {\n      ...ServerLibraryStatisticsHeader_ServerLibrary\n    }\n  }\n"): (typeof documents)["\n  query IndexPageQuery {\n    serverLibrary {\n      ...ServerLibraryStatisticsHeader_ServerLibrary\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query LikedSongsQuery {\n    viewer {\n      id\n      ...LikedSongsList_User\n    }\n  }\n"): (typeof documents)["\n  query LikedSongsQuery {\n    viewer {\n      id\n      ...LikedSongsList_User\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query MbArtistQuery($mbArtistId: ID!) {\n    musicBrainz {\n      artist {\n        byId(id: $mbArtistId) {\n          id\n          name\n          ...ArtistNotInLibraryPanel_MbArtist\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query MbArtistQuery($mbArtistId: ID!) {\n    musicBrainz {\n      artist {\n        byId(id: $mbArtistId) {\n          id\n          name\n          ...ArtistNotInLibraryPanel_MbArtist\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PlaylistQuery($playlistId: ID!) {\n    playlist {\n      byId(playlistId: $playlistId) {\n        id\n        name\n        ...PlaylistPanel_Playlist\n      }\n    }\n  }\n"): (typeof documents)["\n  query PlaylistQuery($playlistId: ID!) {\n    playlist {\n      byId(playlistId: $playlistId) {\n        id\n        name\n        ...PlaylistPanel_Playlist\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query QueuesPage_Query {\n    downloads {\n      downloadSlots {\n        id\n        isActive\n        isWorking\n        currentWork {\n          artistId\n          releaseFolderName\n        }\n        currentProgress {\n          id\n          artistId\n          releaseFolderName\n          status\n          totalTracks\n          completedTracks\n          errorMessage\n          artistName\n          releaseTitle\n          coverArtUrl\n          currentTrackProgressPercent\n          currentDownloadSpeedKbps\n          currentProvider\n          currentProviderIndex\n          totalProviders\n        }\n        startedAt\n        lastActivityAt\n        status\n      }\n      downloadQueue {\n        id\n        queueLength\n        items {\n          id\n          artistId\n          releaseFolderName\n          queueKey\n        }\n      }\n      downloadHistory {\n        timestampUtc\n        artistId\n        releaseFolderName\n        artistName\n        releaseTitle\n        success\n        errorMessage\n        providerUsed\n      }\n    }\n    artistImport {\n      currentArtistImport {\n        id\n        artistName\n        statusInfo {\n          id\n          text\n        }\n        totalReleases\n        completedReleases\n        errorMessage\n      }\n      artistImportQueue {\n        id\n        queueLength\n        items {\n          id\n          artistName\n          songTitle\n          releaseFolderName\n          queueKey\n        }\n      }\n      artistImportHistory {\n        timestampUtc\n        jobKind\n        artistName\n        localArtistId\n        releaseFolderName\n        musicBrainzArtistId\n        songTitle\n        success\n        errorMessage\n      }\n    }\n  }\n"): (typeof documents)["\n  query QueuesPage_Query {\n    downloads {\n      downloadSlots {\n        id\n        isActive\n        isWorking\n        currentWork {\n          artistId\n          releaseFolderName\n        }\n        currentProgress {\n          id\n          artistId\n          releaseFolderName\n          status\n          totalTracks\n          completedTracks\n          errorMessage\n          artistName\n          releaseTitle\n          coverArtUrl\n          currentTrackProgressPercent\n          currentDownloadSpeedKbps\n          currentProvider\n          currentProviderIndex\n          totalProviders\n        }\n        startedAt\n        lastActivityAt\n        status\n      }\n      downloadQueue {\n        id\n        queueLength\n        items {\n          id\n          artistId\n          releaseFolderName\n          queueKey\n        }\n      }\n      downloadHistory {\n        timestampUtc\n        artistId\n        releaseFolderName\n        artistName\n        releaseTitle\n        success\n        errorMessage\n        providerUsed\n      }\n    }\n    artistImport {\n      currentArtistImport {\n        id\n        artistName\n        statusInfo {\n          id\n          text\n        }\n        totalReleases\n        completedReleases\n        errorMessage\n      }\n      artistImportQueue {\n        id\n        queueLength\n        items {\n          id\n          artistName\n          songTitle\n          releaseFolderName\n          queueKey\n        }\n      }\n      artistImportHistory {\n        timestampUtc\n        jobKind\n        artistName\n        localArtistId\n        releaseFolderName\n        musicBrainzArtistId\n        songTitle\n        success\n        errorMessage\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription QueuesPage_DownloadQueueUpdated {\n    downloadQueueUpdated {\n      id\n      queueLength\n      id\n      items {\n        id\n        artistId\n        releaseFolderName\n        queueKey\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription QueuesPage_DownloadQueueUpdated {\n    downloadQueueUpdated {\n      id\n      queueLength\n      id\n      items {\n        id\n        artistId\n        releaseFolderName\n        queueKey\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription QueuesPage_SlotProgressUpdated {\n    slotProgressUpdated {\n      slotId\n      progress {\n        id\n        artistId\n        releaseFolderName\n        status\n        totalTracks\n        completedTracks\n        errorMessage\n        artistName\n        releaseTitle\n        coverArtUrl\n        currentTrackProgressPercent\n        currentDownloadSpeedKbps\n        currentProvider\n        currentProviderIndex\n        totalProviders\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription QueuesPage_SlotProgressUpdated {\n    slotProgressUpdated {\n      slotId\n      progress {\n        id\n        artistId\n        releaseFolderName\n        status\n        totalTracks\n        completedTracks\n        errorMessage\n        artistName\n        releaseTitle\n        coverArtUrl\n        currentTrackProgressPercent\n        currentDownloadSpeedKbps\n        currentProvider\n        currentProviderIndex\n        totalProviders\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription QueuesPage_ArtistImportQueueUpdated {\n    artistImportQueueUpdated {\n      id\n      queueLength\n      items {\n        id\n        artistName\n        songTitle\n        queueKey\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription QueuesPage_ArtistImportQueueUpdated {\n    artistImportQueueUpdated {\n      id\n      queueLength\n      items {\n        id\n        artistName\n        songTitle\n        queueKey\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription QueuesPage_CurrentArtistImportUpdated {\n    currentArtistImportUpdated {\n      id\n      artistName\n      songTitle\n      statusInfo {\n        id\n        text\n      }\n      totalReleases\n      completedReleases\n      errorMessage\n    }\n  }\n"): (typeof documents)["\n  subscription QueuesPage_CurrentArtistImportUpdated {\n    currentArtistImportUpdated {\n      id\n      artistName\n      songTitle\n      statusInfo {\n        id\n        text\n      }\n      totalReleases\n      completedReleases\n      errorMessage\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveDownloadJob($queueKey: String!) {\n    removeDownloadJob(queueKey: $queueKey)\n  }\n"): (typeof documents)["\n  mutation RemoveDownloadJob($queueKey: String!) {\n    removeDownloadJob(queueKey: $queueKey)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveArtistImportJob($queueKey: String!) {\n    removeArtistImportJob(queueKey: $queueKey)\n  }\n"): (typeof documents)["\n  mutation RemoveArtistImportJob($queueKey: String!) {\n    removeArtistImportJob(queueKey: $queueKey)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SettingsPage {\n    serverSettings {\n      id\n      ...LibraryPathForm_ServerSettings\n      libraryPath\n      downloadSlotCount\n      listenBrainzTopTracksEnabled\n      spotifyTopTracksEnabled\n      lastFmTopTracksEnabled\n      publicBaseUrl\n    }\n  }\n"): (typeof documents)["\n  query SettingsPage {\n    serverSettings {\n      id\n      ...LibraryPathForm_ServerSettings\n      libraryPath\n      downloadSlotCount\n      listenBrainzTopTracksEnabled\n      spotifyTopTracksEnabled\n      lastFmTopTracksEnabled\n      publicBaseUrl\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SpotifyPlaylistDetails($playlistId: String!) {\n    playlist {\n      importPlaylists {\n        spotify {\n          byId: spotifyPlaylistById(id: $playlistId) {\n            id\n            ...SpotifyPlaylistPanel_SpotifyPlaylist\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SpotifyPlaylistDetails($playlistId: String!) {\n    playlist {\n      importPlaylists {\n        spotify {\n          byId: spotifyPlaylistById(id: $playlistId) {\n            id\n            ...SpotifyPlaylistPanel_SpotifyPlaylist\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ProfilePage {\n    viewer {\n      id\n      username\n      ...UserProfilePanel_User\n    }\n  }\n"): (typeof documents)["\n  query ProfilePage {\n    viewer {\n      id\n      username\n      ...UserProfilePanel_User\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ImportArtist($musicBrainzArtistId: String!) {\n    importArtist(input: { musicBrainzArtistId: $musicBrainzArtistId }) {\n      __typename\n      ... on ImportArtistSuccess {\n        artist {\n          id\n          name\n        }\n      }\n      ... on ImportArtistError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ImportArtist($musicBrainzArtistId: String!) {\n    importArtist(input: { musicBrainzArtistId: $musicBrainzArtistId }) {\n      __typename\n      ... on ImportArtistSuccess {\n        artist {\n          id\n          name\n        }\n      }\n      ... on ImportArtistError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AlbumCard_Release on Release {\n    id\n    title\n    firstReleaseYear\n    coverArtUrl\n    folderName\n    isFullyMissing\n    artistName\n    artist {\n      id\n      images {\n        thumbs\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AlbumCard_Release on Release {\n    id\n    title\n    firstReleaseYear\n    coverArtUrl\n    folderName\n    isFullyMissing\n    artistName\n    artist {\n      id\n      images {\n        thumbs\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AlbumHeader_Release on Release {\n    id\n    title\n    type\n    coverArtUrl\n    firstReleaseYear\n    artistName\n    artist {\n      id\n      name\n      images {\n        thumbs\n      }\n    }\n    tracks {\n      id\n      trackLength\n    }\n  }\n"): (typeof documents)["\n  fragment AlbumHeader_Release on Release {\n    id\n    title\n    type\n    coverArtUrl\n    firstReleaseYear\n    artistName\n    artist {\n      id\n      name\n      images {\n        thumbs\n      }\n    }\n    tracks {\n      id\n      trackLength\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AlbumPanel_Release on Release {\n    id\n    folderName\n    isFullyMissing\n    ...PlayAlbumButton_Release\n    ...ReleaseDownloadButton_Release\n    ...AlbumHeader_Release\n    ...AlbumTrackList_Release\n    firstReleaseYear\n    labels {\n      name\n      id\n      catalogNumber\n      disambiguation\n    }\n    artist {\n      id\n    }\n  }\n"): (typeof documents)["\n  fragment AlbumPanel_Release on Release {\n    id\n    folderName\n    isFullyMissing\n    ...PlayAlbumButton_Release\n    ...ReleaseDownloadButton_Release\n    ...AlbumHeader_Release\n    ...AlbumTrackList_Release\n    firstReleaseYear\n    labels {\n      name\n      id\n      catalogNumber\n      disambiguation\n    }\n    artist {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription AlbumPanelUpdates(\n    $artistId: String!\n    $releaseFolderName: String!\n  ) {\n    libraryCacheTracksInReleaseUpdated(\n      artistId: $artistId\n      releaseFolderName: $releaseFolderName\n    ) {\n      track {\n        id\n        isMissing\n        mediaAvailabilityStatus\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription AlbumPanelUpdates(\n    $artistId: String!\n    $releaseFolderName: String!\n  ) {\n    libraryCacheTracksInReleaseUpdated(\n      artistId: $artistId\n      releaseFolderName: $releaseFolderName\n    ) {\n      track {\n        id\n        isMissing\n        mediaAvailabilityStatus\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription AlbumPanelReleaseMetadataUpdated(\n    $artistId: String!\n    $releaseFolderName: String!\n  ) {\n    libraryReleaseMetadataUpdated(\n      artistId: $artistId\n      releaseFolderName: $releaseFolderName\n    ) {\n      id\n      ...AlbumPanel_Release\n    }\n  }\n"): (typeof documents)["\n  subscription AlbumPanelReleaseMetadataUpdated(\n    $artistId: String!\n    $releaseFolderName: String!\n  ) {\n    libraryReleaseMetadataUpdated(\n      artistId: $artistId\n      releaseFolderName: $releaseFolderName\n    ) {\n      id\n      ...AlbumPanel_Release\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RefreshRelease($input: RefreshReleaseInput!) {\n    refreshRelease(input: $input) {\n      ... on RefreshReleaseSuccess {\n        release {\n          id\n          ...AlbumPanel_Release\n        }\n      }\n      ... on RefreshReleaseError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RefreshRelease($input: RefreshReleaseInput!) {\n    refreshRelease(input: $input) {\n      ... on RefreshReleaseSuccess {\n        release {\n          id\n          ...AlbumPanel_Release\n        }\n      }\n      ... on RefreshReleaseError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteReleaseAudio($input: DeleteReleaseAudioInput!) {\n    deleteReleaseAudio(input: $input) {\n      ... on DeleteReleaseAudioSuccess {\n        release {\n          id\n          ...AlbumPanel_Release\n        }\n      }\n      ... on DeleteReleaseAudioError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteReleaseAudio($input: DeleteReleaseAudioInput!) {\n    deleteReleaseAudio(input: $input) {\n      ... on DeleteReleaseAudioSuccess {\n        release {\n          id\n          ...AlbumPanel_Release\n        }\n      }\n      ... on DeleteReleaseAudioError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AlbumTrackList_Release on Release {\n    id\n    title\n    folderName\n    artist {\n      id\n    }\n    tracks {\n      id\n      title\n      trackLength\n      isMissing\n      media {\n        id\n        audioUrl\n        audioQualityLabel\n      }\n      ...TrackCreditLinks_Track\n      ...MusicPlayerTrackFactory_Track\n      ...AlbumTrackTag_Track\n      credits {\n        artistName\n        artist {\n          id\n        }\n        mbArtist {\n          id\n        }\n      }\n      statistics {\n        listeners\n        playCount\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment AlbumTrackList_Release on Release {\n    id\n    title\n    folderName\n    artist {\n      id\n    }\n    tracks {\n      id\n      title\n      trackLength\n      isMissing\n      media {\n        id\n        audioUrl\n        audioQualityLabel\n      }\n      ...TrackCreditLinks_Track\n      ...MusicPlayerTrackFactory_Track\n      ...AlbumTrackTag_Track\n      credits {\n        artistName\n        artist {\n          id\n        }\n        mbArtist {\n          id\n        }\n      }\n      statistics {\n        listeners\n        playCount\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AlbumTrackTag_Track on Track {\n    id\n    isMissing\n    mediaAvailabilityStatus\n  }\n"): (typeof documents)["\n  fragment AlbumTrackTag_Track on Track {\n    id\n    isMissing\n    mediaAvailabilityStatus\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment MbReleaseGroupCard_MbReleaseGroup on MbReleaseGroup {\n    id\n    title\n    firstReleaseYear\n    coverArtUri\n  }\n"): (typeof documents)["\n  fragment MbReleaseGroupCard_MbReleaseGroup on MbReleaseGroup {\n    id\n    title\n    firstReleaseYear\n    coverArtUri\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PlayAlbumButton_Release on Release {\n    id\n    folderName\n    coverArtUrl\n    artist {\n      id\n      name\n    }\n    tracks {\n      id\n      title\n      isMissing\n      trackLength\n      media {\n        id\n        audioQualityLabel\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment PlayAlbumButton_Release on Release {\n    id\n    folderName\n    coverArtUrl\n    artist {\n      id\n      name\n    }\n    tracks {\n      id\n      title\n      isMissing\n      trackLength\n      media {\n        id\n        audioQualityLabel\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TrackCreditLinks_Track on Track {\n    id\n    credits {\n      artistName\n      artist {\n        id\n        name\n      }\n      mbArtist {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment TrackCreditLinks_Track on Track {\n    id\n    credits {\n      artistName\n      artist {\n        id\n        name\n      }\n      mbArtist {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AlbumList_Release on Release {\n    id\n    isFullyMissing\n    ...AlbumCard_Release\n  }\n"): (typeof documents)["\n  fragment AlbumList_Release on Release {\n    id\n    isFullyMissing\n    ...AlbumCard_Release\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FixMatch_ReleasesWithScores(\n    $releaseGroupId: String!\n    $artistId: String!\n    $releaseFolderName: String!\n  ) {\n    releasesWithScores(\n      releaseGroupId: $releaseGroupId\n      artistId: $artistId\n      releaseFolderName: $releaseFolderName\n    ) {\n      score\n      reasons\n      release {\n        id\n        title\n        coverArtUri\n        year\n        country\n        status\n        media {\n          tracks {\n            id\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query FixMatch_ReleasesWithScores(\n    $releaseGroupId: String!\n    $artistId: String!\n    $releaseFolderName: String!\n  ) {\n    releasesWithScores(\n      releaseGroupId: $releaseGroupId\n      artistId: $artistId\n      releaseFolderName: $releaseFolderName\n    ) {\n      score\n      reasons\n      release {\n        id\n        title\n        coverArtUri\n        year\n        country\n        status\n        media {\n          tracks {\n            id\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation FixMatch_SetReleaseMatchOverride(\n    $input: SetReleaseMatchOverrideInput!\n  ) {\n    setReleaseMatchOverride(input: $input) {\n      __typename\n      ... on SetReleaseMatchOverrideSuccess {\n        release {\n          id\n        }\n      }\n      ... on SetReleaseMatchOverrideError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation FixMatch_SetReleaseMatchOverride(\n    $input: SetReleaseMatchOverrideInput!\n  ) {\n    setReleaseMatchOverride(input: $input) {\n      __typename\n      ... on SetReleaseMatchOverrideSuccess {\n        release {\n          id\n        }\n      }\n      ... on SetReleaseMatchOverrideError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation FixMatch_SetReleaseGroup($input: SetReleaseGroupInput!) {\n    setReleaseGroup(input: $input) {\n      __typename\n      ... on SetReleaseGroupSuccess {\n        release {\n          id\n        }\n      }\n      ... on SetReleaseGroupError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation FixMatch_SetReleaseGroup($input: SetReleaseGroupInput!) {\n    setReleaseGroup(input: $input) {\n      __typename\n      ... on SetReleaseGroupSuccess {\n        release {\n          id\n        }\n      }\n      ... on SetReleaseGroupError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FixMatch_ReleaseConnections(\n    $artistId: ID!\n    $releaseFolderName: String!\n  ) {\n    serverLibrary {\n      releaseForArtistByFolderName(\n        artistId: $artistId\n        releaseFolderName: $releaseFolderName\n      ) {\n        id\n        musicBrainzReleaseGroupId\n        title\n        artist {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query FixMatch_ReleaseConnections(\n    $artistId: ID!\n    $releaseFolderName: String!\n  ) {\n    serverLibrary {\n      releaseForArtistByFolderName(\n        artistId: $artistId\n        releaseFolderName: $releaseFolderName\n      ) {\n        id\n        musicBrainzReleaseGroupId\n        title\n        artist {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    query FixMatch_SearchReleaseGroups(\n      $name: String!\n      $artistName: String!\n      $limit: Int!\n      $offset: Int!\n    ) {\n      musicBrainz {\n        releaseGroup {\n          searchByNameAndArtistName(\n            name: $name\n            artistName: $artistName\n            limit: $limit\n            offset: $offset\n          ) {\n            id\n            title\n            primaryType\n            secondaryTypes\n            firstReleaseDate\n          }\n        }\n      }\n    }\n  "): (typeof documents)["\n    query FixMatch_SearchReleaseGroups(\n      $name: String!\n      $artistName: String!\n      $limit: Int!\n      $offset: Int!\n    ) {\n      musicBrainz {\n        releaseGroup {\n          searchByNameAndArtistName(\n            name: $name\n            artistName: $artistName\n            limit: $limit\n            offset: $offset\n          ) {\n            id\n            title\n            primaryType\n            secondaryTypes\n            firstReleaseDate\n          }\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ArtistCard_Artist on Artist {\n    id\n    name\n    listeners\n    images {\n      thumbs\n    }\n    albums {\n      id\n      isFullyMissing\n    }\n    eps {\n      id\n      isFullyMissing\n    }\n    singles {\n      id\n      isFullyMissing\n    }\n  }\n"): (typeof documents)["\n  fragment ArtistCard_Artist on Artist {\n    id\n    name\n    listeners\n    images {\n      thumbs\n    }\n    albums {\n      id\n      isFullyMissing\n    }\n    eps {\n      id\n      isFullyMissing\n    }\n    singles {\n      id\n      isFullyMissing\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment MbArtistCard_MbArtist on MbArtist {\n    id\n    name\n    listeners\n    images {\n      artistThumb\n    }\n  }\n"): (typeof documents)["\n  fragment MbArtistCard_MbArtist on MbArtist {\n    id\n    name\n    listeners\n    images {\n      artistThumb\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TopArtistCard_Artist on LastFmArtist {\n    id\n    name\n    musicBrainzArtist {\n      id\n      name\n      images {\n        artistThumb\n      }\n      artist {\n        id\n      }\n    }\n    statistics {\n      listeners\n    }\n  }\n"): (typeof documents)["\n  fragment TopArtistCard_Artist on LastFmArtist {\n    id\n    name\n    musicBrainzArtist {\n      id\n      name\n      images {\n        artistThumb\n      }\n      artist {\n        id\n      }\n    }\n    statistics {\n      listeners\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ArtistList_Artist on Artist {\n    id\n    ...ArtistCard_Artist\n  }\n"): (typeof documents)["\n  fragment ArtistList_Artist on Artist {\n    id\n    ...ArtistCard_Artist\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ArtistNotInLibraryPanel_MbArtist on MbArtist {\n    id\n    name\n    images {\n      artistBackground\n    }\n    listeners\n    lastFmArtist {\n      id\n      ...ArtistNotInLibraryTopTracks_LastFmArtist\n    }\n  }\n"): (typeof documents)["\n  fragment ArtistNotInLibraryPanel_MbArtist on MbArtist {\n    id\n    name\n    images {\n      artistBackground\n    }\n    listeners\n    lastFmArtist {\n      id\n      ...ArtistNotInLibraryTopTracks_LastFmArtist\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ArtistNotInLibraryTopTracks_LastFmArtist on LastFmArtist {\n    id\n    topTracks {\n      id\n      name\n      statistics {\n        listeners\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ArtistNotInLibraryTopTracks_LastFmArtist on LastFmArtist {\n    id\n    topTracks {\n      id\n      name\n      statistics {\n        listeners\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment AppearsOnReleaseCard_ArtistAppearsOnRelease on ArtistAppearsOnRelease {\n    musicBrainzReleaseGroupId\n    coverArtUrl\n    releaseTitle\n    firstReleaseYear\n    primaryArtistName\n  }\n"): (typeof documents)["\n  fragment AppearsOnReleaseCard_ArtistAppearsOnRelease on ArtistAppearsOnRelease {\n    musicBrainzReleaseGroupId\n    coverArtUrl\n    releaseTitle\n    firstReleaseYear\n    primaryArtistName\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ArtistActionButtons_Artist on Artist {\n    id\n    ...FixArtistMatchDialog_Artist\n    name\n  }\n"): (typeof documents)["\n  fragment ArtistActionButtons_Artist on Artist {\n    id\n    ...FixArtistMatchDialog_Artist\n    name\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation DeleteArtist($input: DeleteArtistInput!) {\n      deleteArtist(input: $input) {\n        __typename\n        ... on DeleteArtistSuccess {\n          deletedArtistId\n        }\n        ... on DeleteArtistError {\n          message\n        }\n      }\n    }\n  "): (typeof documents)["\n    mutation DeleteArtist($input: DeleteArtistInput!) {\n      deleteArtist(input: $input) {\n        __typename\n        ... on DeleteArtistSuccess {\n          deletedArtistId\n        }\n        ... on DeleteArtistError {\n          message\n        }\n      }\n    }\n  "];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ArtistAlbumList($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        albums {\n          id\n          firstReleaseDate\n          ...AlbumCard_Release\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ArtistAlbumList($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        albums {\n          id\n          firstReleaseDate\n          ...AlbumCard_Release\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ArtistDownloadAllReleasesButton_Artist on Artist {\n    id\n  }\n"): (typeof documents)["\n  fragment ArtistDownloadAllReleasesButton_Artist on Artist {\n    id\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ArtistDownloadAll_StartBulk(\n    $input: StartBulkDownloadForArtistInput!\n  ) {\n    startBulkDownloadForArtist(input: $input) {\n      __typename\n      ... on StartBulkDownloadForArtistSuccess {\n        queuedCount\n      }\n      ... on StartBulkDownloadForArtistError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ArtistDownloadAll_StartBulk(\n    $input: StartBulkDownloadForArtistInput!\n  ) {\n    startBulkDownloadForArtist(input: $input) {\n      __typename\n      ... on StartBulkDownloadForArtistSuccess {\n        queuedCount\n      }\n      ... on StartBulkDownloadForArtistError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ArtistEpList($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        eps {\n          id\n          firstReleaseDate\n          ...AlbumCard_Release\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ArtistEpList($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        eps {\n          id\n          firstReleaseDate\n          ...AlbumCard_Release\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ArtistImportStatusInfo_Artist on Artist {\n    id\n    name\n  }\n"): (typeof documents)["\n  fragment ArtistImportStatusInfo_Artist on Artist {\n    id\n    name\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ArtistPanel_CurrentImport {\n    artistImport {\n      currentArtistImport {\n        id\n        status\n        completedReleases\n        totalReleases\n        errorMessage\n        artistName\n      }\n    }\n  }\n"): (typeof documents)["\n  query ArtistPanel_CurrentImport {\n    artistImport {\n      currentArtistImport {\n        id\n        status\n        completedReleases\n        totalReleases\n        errorMessage\n        artistName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription ArtistImportStatusInfo_Sub {\n    currentArtistImportUpdated {\n      id\n      status\n      completedReleases\n      totalReleases\n      errorMessage\n      artistName\n    }\n  }\n"): (typeof documents)["\n  subscription ArtistImportStatusInfo_Sub {\n    currentArtistImportUpdated {\n      id\n      status\n      completedReleases\n      totalReleases\n      errorMessage\n      artistName\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ArtistNumReleasesAvailableIndicator_Artist on Artist {\n    id\n    albums {\n      id\n      isFullyMissing\n    }\n    eps {\n      id\n      isFullyMissing\n    }\n    singles {\n      id\n      isFullyMissing\n    }\n  }\n"): (typeof documents)["\n  fragment ArtistNumReleasesAvailableIndicator_Artist on Artist {\n    id\n    albums {\n      id\n      isFullyMissing\n    }\n    eps {\n      id\n      isFullyMissing\n    }\n    singles {\n      id\n      isFullyMissing\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ArtistPanel_Artist on Artist {\n    id\n    ...ArtistActionButtons_Artist\n    ...ArtistImportStatusInfo_Artist\n    ...ArtistNumReleasesAvailableIndicator_Artist\n    ...ArtistServiceConnections_Artist\n    ...ArtistDownloadAllReleasesButton_Artist\n    ...ArtistStatisticsHeader_Artist\n    name\n    listeners\n    connectedExternalServices {\n      isConnected\n      externalService {\n        id\n        name\n      }\n    }\n    albums {\n      id\n    }\n    eps {\n      id\n    }\n    singles {\n      id\n    }\n    images {\n      backgrounds\n    }\n  }\n"): (typeof documents)["\n  fragment ArtistPanel_Artist on Artist {\n    id\n    ...ArtistActionButtons_Artist\n    ...ArtistImportStatusInfo_Artist\n    ...ArtistNumReleasesAvailableIndicator_Artist\n    ...ArtistServiceConnections_Artist\n    ...ArtistDownloadAllReleasesButton_Artist\n    ...ArtistStatisticsHeader_Artist\n    name\n    listeners\n    connectedExternalServices {\n      isConnected\n      externalService {\n        id\n        name\n      }\n    }\n    albums {\n      id\n    }\n    eps {\n      id\n    }\n    singles {\n      id\n    }\n    images {\n      backgrounds\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription ArtistPanel_LibraryArtistUpdated($artistId: String!) {\n    libraryArtistUpdated(artistId: $artistId) {\n      id\n      ...ArtistPanel_Artist\n    }\n  }\n"): (typeof documents)["\n  subscription ArtistPanel_LibraryArtistUpdated($artistId: String!) {\n    libraryArtistUpdated(artistId: $artistId) {\n      id\n      ...ArtistPanel_Artist\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PanelRefreshTopTracks($input: RefreshArtistTopTracksInput!) {\n    refreshArtistTopTracks(input: $input) {\n      __typename\n      ... on RefreshArtistTopTracksSuccess {\n        artist {\n          id\n          topTracks {\n            ...TopArtistTrackItem_ArtistTopTrack\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation PanelRefreshTopTracks($input: RefreshArtistTopTracksInput!) {\n    refreshArtistTopTracks(input: $input) {\n      __typename\n      ... on RefreshArtistTopTracksSuccess {\n        artist {\n          id\n          topTracks {\n            ...TopArtistTrackItem_ArtistTopTrack\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PanelRefreshArtistMetaData($artistId: String!) {\n    refreshArtistMetaData(input: { artistId: $artistId }) {\n      __typename\n      ... on RefreshArtistMetaDataSuccess {\n        artist {\n          id\n          ...ArtistPanel_Artist\n        }\n      }\n      ... on RefreshArtistMetaDataError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation PanelRefreshArtistMetaData($artistId: String!) {\n    refreshArtistMetaData(input: { artistId: $artistId }) {\n      __typename\n      ... on RefreshArtistMetaDataSuccess {\n        artist {\n          id\n          ...ArtistPanel_Artist\n        }\n      }\n      ... on RefreshArtistMetaDataError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RefreshAllReleasesForArtist($artistId: String!) {\n    refreshAllReleasesForArtist(artistId: $artistId) {\n      __typename\n      ... on RefreshAllReleasesForArtistSuccess {\n        artistId\n        refreshedCount\n      }\n      ... on RefreshAllReleasesForArtistError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RefreshAllReleasesForArtist($artistId: String!) {\n    refreshAllReleasesForArtist(artistId: $artistId) {\n      __typename\n      ... on RefreshAllReleasesForArtistSuccess {\n        artistId\n        refreshedCount\n      }\n      ... on RefreshAllReleasesForArtistError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation GenerateArtistShareFiles($input: GenerateArtistShareFilesInput!) {\n    generateArtistShareFiles(input: $input) {\n      __typename\n      ... on GenerateArtistShareFilesSuccess {\n        artistId\n        artistName\n        tagFileName\n        manifestPath\n      }\n      ... on GenerateArtistShareFilesError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation GenerateArtistShareFiles($input: GenerateArtistShareFilesInput!) {\n    generateArtistShareFiles(input: $input) {\n      __typename\n      ... on GenerateArtistShareFilesSuccess {\n        artistId\n        artistName\n        tagFileName\n        manifestPath\n      }\n      ... on GenerateArtistShareFilesError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ArtistServiceConnections_Artist on Artist {\n    id\n    connectedExternalServices {\n      isConnected\n      artistPageUrl\n      externalService {\n        id\n        name\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment ArtistServiceConnections_Artist on Artist {\n    id\n    connectedExternalServices {\n      isConnected\n      artistPageUrl\n      externalService {\n        id\n        name\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ArtistSingleList($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        singles {\n          id\n          firstReleaseDate\n          ...AlbumCard_Release\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ArtistSingleList($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        singles {\n          id\n          firstReleaseDate\n          ...AlbumCard_Release\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ArtistStatisticsHeader_Artist on Artist {\n    id\n    name\n    albums {\n      id\n      isFullyMissing\n    }\n    eps {\n      id\n      isFullyMissing\n    }\n    singles {\n      id\n      isFullyMissing\n    }\n  }\n"): (typeof documents)["\n  fragment ArtistStatisticsHeader_Artist on Artist {\n    id\n    name\n    albums {\n      id\n      isFullyMissing\n    }\n    eps {\n      id\n      isFullyMissing\n    }\n    singles {\n      id\n      isFullyMissing\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ReleaseListQuery($artistId: ID!) {\n    artist {\n      byId(artistId: $artistId) {\n        id\n        releases {\n          id\n          firstReleaseDate\n          type\n          ...AlbumCard_Release\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ReleaseListQuery($artistId: ID!) {\n    artist {\n      byId(artistId: $artistId) {\n        id\n        releases {\n          id\n          firstReleaseDate\n          type\n          ...AlbumCard_Release\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TopArtistTrackItem_ArtistTopTrack on ArtistTopTrack {\n    title\n    releaseTitle\n    playCount\n    coverArtUrl\n    trackLength\n    track {\n      id\n      ...MusicPlayerTrackFactory_Track\n      ...AlbumTrackTag_Track\n      trackLength\n      trackNumber\n      isMissing\n      release {\n        id\n        folderName\n        artist {\n          id\n          images {\n            thumbs\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment TopArtistTrackItem_ArtistTopTrack on ArtistTopTrack {\n    title\n    releaseTitle\n    playCount\n    coverArtUrl\n    trackLength\n    track {\n      id\n      ...MusicPlayerTrackFactory_Track\n      ...AlbumTrackTag_Track\n      trackLength\n      trackNumber\n      isMissing\n      release {\n        id\n        folderName\n        artist {\n          id\n          images {\n            thumbs\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TopArtistTracks($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        topTracks {\n          ...TopArtistTrackItem_ArtistTopTrack\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query TopArtistTracks($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        topTracks {\n          ...TopArtistTrackItem_ArtistTopTrack\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ArtistTopTracksForQueue($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        topTracks {\n          title\n          coverArtUrl\n          track {\n            id\n            trackNumber\n            trackLength\n            release {\n              id\n              folderName\n              artist {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ArtistTopTracksForQueue($artistId: ID!) {\n    serverLibrary {\n      artistById(id: $artistId) {\n        id\n        topTracks {\n          title\n          coverArtUrl\n          track {\n            id\n            trackNumber\n            trackLength\n            release {\n              id\n              folderName\n              artist {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ArtistAppearsOnQuery($artistId: ID!) {\n    viewer {\n      id\n    }\n    artist {\n      byId(artistId: $artistId) {\n        id\n        name\n        appearsOn {\n          releases {\n            musicBrainzReleaseGroupId\n            ...AppearsOnReleaseCard_ArtistAppearsOnRelease\n          }\n          playlists {\n            id\n            ...PlaylistCard_Playlist\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ArtistAppearsOnQuery($artistId: ID!) {\n    viewer {\n      id\n    }\n    artist {\n      byId(artistId: $artistId) {\n        id\n        name\n        appearsOn {\n          releases {\n            musicBrainzReleaseGroupId\n            ...AppearsOnReleaseCard_ArtistAppearsOnRelease\n          }\n          playlists {\n            id\n            ...PlaylistCard_Playlist\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ArtistStatisticsHeader($artistId: ID!) {\n    artist {\n      byId(artistId: $artistId) {\n        id\n        ...ArtistStatisticsHeader_Artist\n      }\n    }\n  }\n"): (typeof documents)["\n  query ArtistStatisticsHeader($artistId: ID!) {\n    artist {\n      byId(artistId: $artistId) {\n        id\n        ...ArtistStatisticsHeader_Artist\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SimilarArtistsTabContent($artistId: ID!) {\n    artist {\n      byId(artistId: $artistId) {\n        id\n        similarArtists {\n          name\n          thumb\n          similarityScore\n          artist {\n            id\n          }\n          musicBrainzArtistId\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SimilarArtistsTabContent($artistId: ID!) {\n    artist {\n      byId(artistId: $artistId) {\n        id\n        similarArtists {\n          name\n          thumb\n          similarityScore\n          artist {\n            id\n          }\n          musicBrainzArtistId\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RefreshSimilarArtists($artistId: String!) {\n    refreshArtistMetaData(input: { artistId: $artistId }) {\n      __typename\n      ... on RefreshArtistMetaDataSuccess {\n        artist {\n          id\n          similarArtists {\n            name\n            thumb\n            similarityScore\n            artist {\n              id\n            }\n            musicBrainzArtistId\n          }\n        }\n      }\n      ... on RefreshArtistMetaDataError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RefreshSimilarArtists($artistId: String!) {\n    refreshArtistMetaData(input: { artistId: $artistId }) {\n      __typename\n      ... on RefreshArtistMetaDataSuccess {\n        artist {\n          id\n          similarArtists {\n            name\n            thumb\n            similarityScore\n            artist {\n              id\n            }\n            musicBrainzArtistId\n          }\n        }\n      }\n      ... on RefreshArtistMetaDataError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ImportSimilarArtists($artistId: String!) {\n    importSimilarArtists(input: { artistId: $artistId }) {\n      __typename\n      ... on ImportSimilarArtistsSuccess {\n        importedCount\n        artist {\n          id\n        }\n      }\n      ... on ImportSimilarArtistsError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ImportSimilarArtists($artistId: String!) {\n    importSimilarArtists(input: { artistId: $artistId }) {\n      __typename\n      ... on ImportSimilarArtistsSuccess {\n        importedCount\n        artist {\n          id\n        }\n      }\n      ... on ImportSimilarArtistsError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment FixArtistMatchDialog_Artist on Artist {\n    id\n    name\n    connectedExternalServices {\n      isConnected\n      externalArtistId\n      externalService {\n        name\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment FixArtistMatchDialog_Artist on Artist {\n    id\n    name\n    connectedExternalServices {\n      isConnected\n      externalArtistId\n      externalService {\n        name\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FixArtistMatch_SearchMbArtists(\n    $name: String!\n    $limit: Int!\n    $offset: Int!\n  ) {\n    musicBrainz {\n      artist {\n        searchByName(name: $name, limit: $limit, offset: $offset) {\n          id\n          name\n          country\n          type\n          disambiguation\n          listeners\n          images {\n            artistThumb\n          }\n          lastFmArtist {\n            summary\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query FixArtistMatch_SearchMbArtists(\n    $name: String!\n    $limit: Int!\n    $offset: Int!\n  ) {\n    musicBrainz {\n      artist {\n        searchByName(name: $name, limit: $limit, offset: $offset) {\n          id\n          name\n          country\n          type\n          disambiguation\n          listeners\n          images {\n            artistThumb\n          }\n          lastFmArtist {\n            summary\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation FixArtistMatch_SetMb($input: SetArtistMusicBrainzMatchInput!) {\n    setArtistMusicBrainzMatch(input: $input) {\n      __typename\n      ... on SetArtistMusicBrainzMatchSuccess {\n        artist {\n          id\n        }\n      }\n      ... on SetArtistMusicBrainzMatchError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation FixArtistMatch_SetMb($input: SetArtistMusicBrainzMatchInput!) {\n    setArtistMusicBrainzMatch(input: $input) {\n      __typename\n      ... on SetArtistMusicBrainzMatchSuccess {\n        artist {\n          id\n        }\n      }\n      ... on SetArtistMusicBrainzMatchError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation FixArtistMatch_SetSpotify($input: SetArtistSpotifyMatchInput!) {\n    setArtistSpotifyMatch(input: $input) {\n      __typename\n      ... on SetArtistSpotifyMatchSuccess {\n        artist {\n          id\n        }\n      }\n      ... on SetArtistSpotifyMatchError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation FixArtistMatch_SetSpotify($input: SetArtistSpotifyMatchInput!) {\n    setArtistSpotifyMatch(input: $input) {\n      __typename\n      ... on SetArtistSpotifyMatchSuccess {\n        artist {\n          id\n        }\n      }\n      ... on SetArtistSpotifyMatchError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FixArtistMatch_SearchSpotify(\n    $name: String!\n    $limit: Int!\n    $offset: Int!\n  ) {\n    spotify {\n      searchByName(name: $name, limit: $limit, offset: $offset) {\n        id\n        name\n        images {\n          url\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query FixArtistMatch_SearchSpotify(\n    $name: String!\n    $limit: Int!\n    $offset: Int!\n  ) {\n    spotify {\n      searchByName(name: $name, limit: $limit, offset: $offset) {\n        id\n        name\n        images {\n          url\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SignIn($username: String!, $password: String!) {\n    signIn(input: { username: $username, password: $password }) {\n      __typename\n      ... on SignInSuccess {\n        user {\n          id\n          username\n        }\n      }\n      ... on SignInError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SignIn($username: String!, $password: String!) {\n    signIn(input: { username: $username, password: $password }) {\n      __typename\n      ... on SignInSuccess {\n        user {\n          id\n          username\n        }\n      }\n      ... on SignInError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SignOut {\n    signOut(input: { confirm: true }) {\n      __typename\n\n      ... on SignOutSuccess {\n        success\n      }\n      ... on SignOutError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SignOut {\n    signOut(input: { confirm: true }) {\n      __typename\n\n      ... on SignOutSuccess {\n        success\n      }\n      ... on SignOutError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ServerPublicBaseUrl {\n    serverSettings {\n      id\n      publicBaseUrl\n    }\n  }\n"): (typeof documents)["\n  query ServerPublicBaseUrl {\n    serverSettings {\n      id\n      publicBaseUrl\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DownloadOverviewQuery {\n    downloads {\n      downloadQueue {\n        id\n        queueLength\n        items {\n          id\n          artistId\n          releaseFolderName\n        }\n      }\n      downloadSlots {\n        id\n        isActive\n        isWorking\n        currentWork {\n          artistId\n          releaseFolderName\n        }\n        currentProgress {\n          id\n          artistId\n          releaseFolderName\n          status\n          totalTracks\n          completedTracks\n          errorMessage\n          currentDownloadSpeedKbps\n          currentProvider\n          currentProviderIndex\n          totalProviders\n        }\n        status\n      }\n    }\n  }\n"): (typeof documents)["\n  query DownloadOverviewQuery {\n    downloads {\n      downloadQueue {\n        id\n        queueLength\n        items {\n          id\n          artistId\n          releaseFolderName\n        }\n      }\n      downloadSlots {\n        id\n        isActive\n        isWorking\n        currentWork {\n          artistId\n          releaseFolderName\n        }\n        currentProgress {\n          id\n          artistId\n          releaseFolderName\n          status\n          totalTracks\n          completedTracks\n          errorMessage\n          currentDownloadSpeedKbps\n          currentProvider\n          currentProviderIndex\n          totalProviders\n        }\n        status\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription DownloadQueueUpdatedSub {\n    downloadQueueUpdated {\n      queueLength\n      items {\n        id\n        artistId\n        releaseFolderName\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription DownloadQueueUpdatedSub {\n    downloadQueueUpdated {\n      queueLength\n      items {\n        id\n        artistId\n        releaseFolderName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription SlotProgressUpdatedSub {\n    slotProgressUpdated {\n      slotId\n      progress {\n        id\n        artistId\n        releaseFolderName\n        status\n        totalTracks\n        completedTracks\n        errorMessage\n        currentDownloadSpeedKbps\n        currentProvider\n        currentProviderIndex\n        totalProviders\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription SlotProgressUpdatedSub {\n    slotProgressUpdated {\n      slotId\n      progress {\n        id\n        artistId\n        releaseFolderName\n        status\n        totalTracks\n        completedTracks\n        errorMessage\n        currentDownloadSpeedKbps\n        currentProvider\n        currentProviderIndex\n        totalProviders\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription SlotStatusUpdatedSub {\n    slotStatusUpdated {\n      slotId\n      isActive\n      currentWork {\n        id\n        artistId\n        releaseFolderName\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription SlotStatusUpdatedSub {\n    slotStatusUpdated {\n      slotId\n      isActive\n      currentWork {\n        id\n        artistId\n        releaseFolderName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ReleaseDownloadButton_Release on Release {\n    id\n    isFullyMissing\n    folderName\n    downloadStatus\n    artist {\n      id\n    }\n  }\n"): (typeof documents)["\n  fragment ReleaseDownloadButton_Release on Release {\n    id\n    isFullyMissing\n    folderName\n    downloadStatus\n    artist {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AlbumPanel_StartDownloadRelease(\n    $artistId: String!\n    $releaseFolderName: String!\n  ) {\n    startDownloadRelease(\n      input: { artistId: $artistId, releaseFolderName: $releaseFolderName }\n    ) {\n      __typename\n      ... on StartDownloadReleaseSuccess {\n        release {\n          id\n        }\n      }\n      ... on StartDownloadReleaseAccepted {\n        artistId\n        releaseFolderName\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AlbumPanel_StartDownloadRelease(\n    $artistId: String!\n    $releaseFolderName: String!\n  ) {\n    startDownloadRelease(\n      input: { artistId: $artistId, releaseFolderName: $releaseFolderName }\n    ) {\n      __typename\n      ... on StartDownloadReleaseSuccess {\n        release {\n          id\n        }\n      }\n      ... on StartDownloadReleaseAccepted {\n        artistId\n        releaseFolderName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription ReleaseDownloadButton(\n    $artistId: String!\n    $releaseFolderName: String!\n  ) {\n    libraryReleaseDownloadStatusUpdated(\n      artistId: $artistId\n      releaseFolderName: $releaseFolderName\n    ) {\n      release {\n        id\n        downloadStatus\n        isFullyMissing\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription ReleaseDownloadButton(\n    $artistId: String!\n    $releaseFolderName: String!\n  ) {\n    libraryReleaseDownloadStatusUpdated(\n      artistId: $artistId\n      releaseFolderName: $releaseFolderName\n    ) {\n      release {\n        id\n        downloadStatus\n        isFullyMissing\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateUser($username: String!, $password: String!) {\n    createUser(input: { username: $username, password: $password }) {\n      __typename\n      ... on CreateUserSuccess {\n        # Assuming a similar success payload\n        user {\n          id\n          username\n        }\n      }\n      ... on CreateUserError {\n        # Assuming a similar error payload\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateUser($username: String!, $password: String!) {\n    createUser(input: { username: $username, password: $password }) {\n      __typename\n      ... on CreateUserSuccess {\n        # Assuming a similar success payload\n        user {\n          id\n          username\n        }\n      }\n      ... on CreateUserError {\n        # Assuming a similar error payload\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment LikedSongRow_LikedSong on LikedSong {\n    id\n    recording {\n      id\n      title\n      length\n      artists {\n        id\n        name\n      }\n      mainAlbum {\n        id\n        title\n        coverArtUri\n        artists {\n          id\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment LikedSongRow_LikedSong on LikedSong {\n    id\n    recording {\n      id\n      title\n      length\n      artists {\n        id\n        name\n      }\n      mainAlbum {\n        id\n        title\n        coverArtUri\n        artists {\n          id\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment LikedSongsList_User on User {\n    id\n    likedSongs {\n      id\n      ...LikedSongRow_LikedSong\n    }\n  }\n"): (typeof documents)["\n  fragment LikedSongsList_User on User {\n    id\n    likedSongs {\n      id\n      ...LikedSongRow_LikedSong\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment MusicPlayerTrackFactory_Track on Track {\n    id\n    title\n    trackLength\n    trackNumber\n    media {\n      id\n      audioQualityLabel\n    }\n    release {\n      id\n      folderName\n      coverArtUrl\n      artist {\n        id\n        name\n      }\n    }\n    trackNumber\n  }\n"): (typeof documents)["\n  fragment MusicPlayerTrackFactory_Track on Track {\n    id\n    title\n    trackLength\n    trackNumber\n    media {\n      id\n      audioQualityLabel\n    }\n    release {\n      id\n      folderName\n      coverArtUrl\n      artist {\n        id\n        name\n      }\n    }\n    trackNumber\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreatePlaylist {\n    createPlaylist(input: {}) {\n      __typename\n      ... on CreatePlaylistSuccess {\n        playlist {\n          id\n          name\n          createdAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreatePlaylist {\n    createPlaylist(input: {}) {\n      __typename\n      ... on CreatePlaylistSuccess {\n        playlist {\n          id\n          name\n          createdAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment MissingArtistsInPlaylistBox_Playlist on Playlist {\n    id\n    items {\n      id\n      artist {\n        id\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment MissingArtistsInPlaylistBox_Playlist on Playlist {\n    id\n    items {\n      id\n      artist {\n        id\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation EnqueueMissingArtistsFromPlaylist($playlistId: ID!) {\n    enqueueMissingArtistsFromPlaylist(playlistId: $playlistId)\n  }\n"): (typeof documents)["\n  mutation EnqueueMissingArtistsFromPlaylist($playlistId: ID!) {\n    enqueueMissingArtistsFromPlaylist(playlistId: $playlistId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PlaylistCard_Playlist on Playlist {\n    id\n    name\n    coverImageUrl\n    createdAt\n  }\n"): (typeof documents)["\n  fragment PlaylistCard_Playlist on Playlist {\n    id\n    name\n    coverImageUrl\n    createdAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PlaylistHeader_Playlist on Playlist {\n    id\n    name\n    items {\n      id\n      coverImageUrl\n    }\n  }\n"): (typeof documents)["\n  fragment PlaylistHeader_Playlist on Playlist {\n    id\n    name\n    items {\n      id\n      coverImageUrl\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PlaylistPanel_Playlist on Playlist {\n    id\n    ...PlaylistHeader_Playlist\n    ...MissingArtistsInPlaylistBox_Playlist\n    name\n    items {\n      id\n      ...PlaylistTrackItem_PlaylistItem\n    }\n  }\n"): (typeof documents)["\n  fragment PlaylistPanel_Playlist on Playlist {\n    id\n    ...PlaylistHeader_Playlist\n    ...MissingArtistsInPlaylistBox_Playlist\n    name\n    items {\n      id\n      ...PlaylistTrackItem_PlaylistItem\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment PlaylistTrackItem_PlaylistItem on PlaylistItem {\n    id\n    title\n    artistName\n    coverImageUrl\n    trackLengthMs\n    artist {\n      id\n      name\n    }\n\n    track {\n      ...TrackCreditLinks_Track\n      ...AlbumTrackTag_Track\n      trackLength\n      trackNumber\n      media {\n        id\n        audioQualityLabel\n      }\n      title\n      release {\n        id\n        folderName\n        coverArtUrl\n        artist {\n          id\n          name\n          images {\n            thumbs\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment PlaylistTrackItem_PlaylistItem on PlaylistItem {\n    id\n    title\n    artistName\n    coverImageUrl\n    trackLengthMs\n    artist {\n      id\n      name\n    }\n\n    track {\n      ...TrackCreditLinks_Track\n      ...AlbumTrackTag_Track\n      trackLength\n      trackNumber\n      media {\n        id\n        audioQualityLabel\n      }\n      title\n      release {\n        id\n        folderName\n        coverArtUrl\n        artist {\n          id\n          name\n          images {\n            thumbs\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RemoveItemFromPlaylist($playlistId: ID!, $playlistItemId: ID!) {\n    removeItemFromPlaylist(\n      input: { playlistId: $playlistId, playlistItemId: $playlistItemId }\n    ) {\n      __typename\n      ... on RemoveItemFromPlaylistSuccess {\n        playlist {\n          id\n        }\n      }\n      ... on RemoveItemFromPlaylistError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RemoveItemFromPlaylist($playlistId: ID!, $playlistItemId: ID!) {\n    removeItemFromPlaylist(\n      input: { playlistId: $playlistId, playlistItemId: $playlistItemId }\n    ) {\n      __typename\n      ... on RemoveItemFromPlaylistSuccess {\n        playlist {\n          id\n        }\n      }\n      ... on RemoveItemFromPlaylistError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation MovePlaylistItem(\n    $newIndex: Int!\n    $playlistId: ID!\n    $playlistItemId: ID!\n  ) {\n    movePlaylistItem(\n      input: {\n        newIndex: $newIndex\n        playlistId: $playlistId\n        playlistItemId: $playlistItemId\n      }\n    ) {\n      __typename\n      ... on MovePlaylistItemSuccess {\n        playlist {\n          id\n        }\n      }\n      ... on MovePlaylistItemError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation MovePlaylistItem(\n    $newIndex: Int!\n    $playlistId: ID!\n    $playlistItemId: ID!\n  ) {\n    movePlaylistItem(\n      input: {\n        newIndex: $newIndex\n        playlistId: $playlistId\n        playlistItemId: $playlistItemId\n      }\n    ) {\n      __typename\n      ... on MovePlaylistItemSuccess {\n        playlist {\n          id\n        }\n      }\n      ... on MovePlaylistItemError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query FixArtist_MbArtistSearch($artistName: String!, $trackName: String!) {\n    musicBrainz {\n      artist {\n        searchByName(name: $artistName, limit: 15) {\n          id\n          name\n          disambiguation\n          country\n          type\n          listeners\n          images {\n            artistThumb\n          }\n          lastFmArtist {\n            summary\n          }\n        }\n      }\n      recording {\n        searchByName(name: $trackName, limit: 5) {\n          id\n          title\n          artists {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query FixArtist_MbArtistSearch($artistName: String!, $trackName: String!) {\n    musicBrainz {\n      artist {\n        searchByName(name: $artistName, limit: 15) {\n          id\n          name\n          disambiguation\n          country\n          type\n          listeners\n          images {\n            artistThumb\n          }\n          lastFmArtist {\n            summary\n          }\n        }\n      }\n      recording {\n        searchByName(name: $trackName, limit: 5) {\n          id\n          title\n          artists {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation SetPlaylistItemArtistMusicBrainzMatch(\n    $input: SetPlaylistItemArtistMusicBrainzMatchInput!\n  ) {\n    setPlaylistItemArtistMusicBrainzMatch(input: $input) {\n      __typename\n      ... on SetPlaylistItemArtistMusicBrainzMatchSuccess {\n        playlistItem {\n          id\n        }\n      }\n      ... on SetPlaylistItemArtistMusicBrainzMatchNotFound {\n        message\n      }\n      ... on SetPlaylistItemArtistMusicBrainzMatchError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation SetPlaylistItemArtistMusicBrainzMatch(\n    $input: SetPlaylistItemArtistMusicBrainzMatchInput!\n  ) {\n    setPlaylistItemArtistMusicBrainzMatch(input: $input) {\n      __typename\n      ... on SetPlaylistItemArtistMusicBrainzMatchSuccess {\n        playlistItem {\n          id\n        }\n      }\n      ... on SetPlaylistItemArtistMusicBrainzMatchNotFound {\n        message\n      }\n      ... on SetPlaylistItemArtistMusicBrainzMatchError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PlaylistList {\n    viewer {\n      id\n      playlists {\n        id\n        name\n        createdAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query PlaylistList {\n    viewer {\n      id\n      playlists {\n        id\n        name\n        createdAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation RenamePlaylist($playlistId: ID!, $newPlaylistName: String!) {\n    renamePlaylist(\n      input: { playlistId: $playlistId, newPlaylistName: $newPlaylistName }\n    ) {\n      __typename\n      ... on RenamePlaylistSuccess {\n        playlist {\n          id\n          name\n          createdAt\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation RenamePlaylist($playlistId: ID!, $newPlaylistName: String!) {\n    renamePlaylist(\n      input: { playlistId: $playlistId, newPlaylistName: $newPlaylistName }\n    ) {\n      __typename\n      ... on RenamePlaylistSuccess {\n        playlist {\n          id\n          name\n          createdAt\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeletePlaylist($playlistId: ID!) {\n    deletePlaylist(input: { playlistId: $playlistId }) {\n      __typename\n      ... on DeletePlaylistSuccess {\n        deletedPlaylistId\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeletePlaylist($playlistId: ID!) {\n    deletePlaylist(input: { playlistId: $playlistId }) {\n      __typename\n      ... on DeletePlaylistSuccess {\n        deletedPlaylistId\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TopArtistRecommendations {\n    recommendations {\n      topArtists {\n        id\n        ...TopArtistCard_Artist\n      }\n    }\n  }\n"): (typeof documents)["\n  query TopArtistRecommendations {\n    recommendations {\n      topArtists {\n        id\n        ...TopArtistCard_Artist\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment TopTrackCard_LastFmTrack on LastFmTrack {\n    id\n    playCount\n    name\n    artist {\n      id\n      musicBrainzArtist {\n        id\n        name\n        images {\n          artistThumb\n        }\n      }\n    }\n    album {\n      id\n      imageUrl\n    }\n    images {\n      thumbs\n    }\n  }\n"): (typeof documents)["\n  fragment TopTrackCard_LastFmTrack on LastFmTrack {\n    id\n    playCount\n    name\n    artist {\n      id\n      musicBrainzArtist {\n        id\n        name\n        images {\n          artistThumb\n        }\n      }\n    }\n    album {\n      id\n      imageUrl\n    }\n    images {\n      thumbs\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TopTrackRecommendations {\n    recommendations {\n      topTracks {\n        id\n        ...TopTrackCard_LastFmTrack\n      }\n    }\n  }\n"): (typeof documents)["\n  query TopTrackRecommendations {\n    recommendations {\n      topTracks {\n        id\n        ...TopTrackCard_LastFmTrack\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AlbumSearchResultsSearch($text: String!, $limit: Int!) {\n    musicBrainz {\n      releaseGroup {\n        searchByName(name: $text, limit: $limit) {\n          id\n          title\n          ...MbReleaseGroupCard_MbReleaseGroup\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query AlbumSearchResultsSearch($text: String!, $limit: Int!) {\n    musicBrainz {\n      releaseGroup {\n        searchByName(name: $text, limit: $limit) {\n          id\n          title\n          ...MbReleaseGroupCard_MbReleaseGroup\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ArtistSearchResultsSearch($searchText: String!, $limit: Int!) {\n    musicBrainz {\n      artist {\n        searchByName(name: $searchText, limit: $limit) {\n          id\n          name\n          ...MbArtistCard_MbArtist\n          images {\n            artistThumb\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query ArtistSearchResultsSearch($searchText: String!, $limit: Int!) {\n    musicBrainz {\n      artist {\n        searchByName(name: $searchText, limit: $limit) {\n          id\n          name\n          ...MbArtistCard_MbArtist\n          images {\n            artistThumb\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query PlaylistSearchResultsSearch($searchText: String!, $limit: Int!) {\n    playlist {\n      searchPlaylists(searchTerm: $searchText, limit: $limit) {\n        id\n        ...PlaylistCard_Playlist\n      }\n    }\n  }\n"): (typeof documents)["\n  query PlaylistSearchResultsSearch($searchText: String!, $limit: Int!) {\n    playlist {\n      searchPlaylists(searchTerm: $searchText, limit: $limit) {\n        id\n        ...PlaylistCard_Playlist\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query RecordingSearchResultsSearch($text: String!, $limit: Int!) {\n    musicBrainz {\n      recording {\n        searchByName(name: $text, limit: $limit) {\n          id\n          title\n          length\n          nameCredits {\n            artist {\n              id\n              name\n            }\n          }\n          mainAlbum {\n            id\n            title\n            coverArtUri\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query RecordingSearchResultsSearch($text: String!, $limit: Int!) {\n    musicBrainz {\n      recording {\n        searchByName(name: $text, limit: $limit) {\n          id\n          title\n          length\n          nameCredits {\n            artist {\n              id\n              name\n            }\n          }\n          mainAlbum {\n            id\n            title\n            coverArtUri\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchResultArtistSearch($text: String!) {\n    serverLibrary {\n      searchArtists(searchTerm: $text, limit: 5) {\n        id\n        name\n        images {\n          thumbs\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchResultArtistSearch($text: String!) {\n    serverLibrary {\n      searchArtists(searchTerm: $text, limit: 5) {\n        id\n        name\n        images {\n          thumbs\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchResultPlaylistSearch($searchText: String!) {\n    playlist {\n      searchPlaylists(searchTerm: $searchText, limit: 5) {\n        id\n        name\n        coverImageUrl\n        createdAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchResultPlaylistSearch($searchText: String!) {\n    playlist {\n      searchPlaylists(searchTerm: $searchText, limit: 5) {\n        id\n        name\n        coverImageUrl\n        createdAt\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchResultReleaseSearch($text: String!) {\n    serverLibrary {\n      searchReleases(searchTerm: $text, limit: 5) {\n        id\n        title\n        coverArtUrl\n        artistName\n        artist {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchResultReleaseSearch($text: String!) {\n    serverLibrary {\n      searchReleases(searchTerm: $text, limit: 5) {\n        id\n        title\n        coverArtUrl\n        artistName\n        artist {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SearchResultTrackSearch($text: String!) {\n    serverLibrary {\n      searchTracks(searchTerm: $text, limit: 5) {\n        id\n        title\n        trackLength\n        release {\n          id\n          title\n          coverArtUrl\n          folderName\n          artistName\n          artist {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchResultTrackSearch($text: String!) {\n    serverLibrary {\n      searchTracks(searchTerm: $text, limit: 5) {\n        id\n        title\n        trackLength\n        release {\n          id\n          title\n          coverArtUrl\n          folderName\n          artistName\n          artist {\n            id\n            name\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ServerLibraryStatisticsHeader_ServerLibrary on ServerLibrarySearchRoot {\n    libraryStatistics {\n      artistCount\n      releaseCount\n      trackCount\n      isInitialized\n      lastUpdated\n    }\n    allReleases {\n      id\n      type\n      isFullyMissing\n    }\n  }\n"): (typeof documents)["\n  fragment ServerLibraryStatisticsHeader_ServerLibrary on ServerLibrarySearchRoot {\n    libraryStatistics {\n      artistCount\n      releaseCount\n      trackCount\n      isInitialized\n      lastUpdated\n    }\n    allReleases {\n      id\n      type\n      isFullyMissing\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment DownloadPathForm_ServerSettings on ServerSettings {\n    id\n    downloadPath\n  }\n"): (typeof documents)["\n  fragment DownloadPathForm_ServerSettings on ServerSettings {\n    id\n    downloadPath\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateDownloadPath($newDownloadPath: String!) {\n    updateDownloadPath(input: { newDownloadPath: $newDownloadPath }) {\n      ... on UpdateDownloadPathSuccess {\n        serverSettings {\n          id\n          downloadPath\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateDownloadPath($newDownloadPath: String!) {\n    updateDownloadPath(input: { newDownloadPath: $newDownloadPath }) {\n      ... on UpdateDownloadPathSuccess {\n        serverSettings {\n          id\n          downloadPath\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateDownloadSlotCount($input: UpdateDownloadSlotCountInput!) {\n    updateDownloadSlotCount(input: $input) {\n      ... on UpdateDownloadSlotCountSuccess {\n        serverSettings {\n          downloadSlotCount\n        }\n      }\n      ... on UpdateDownloadSlotCountError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateDownloadSlotCount($input: UpdateDownloadSlotCountInput!) {\n    updateDownloadSlotCount(input: $input) {\n      ... on UpdateDownloadSlotCountSuccess {\n        serverSettings {\n          downloadSlotCount\n        }\n      }\n      ... on UpdateDownloadSlotCountError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment LibraryPathForm_ServerSettings on ServerSettings {\n    id\n    ...ChangeLibraryFolderControl_ServerSettings\n    libraryPath\n    storageStats {\n      totalDiskBytes\n      availableFreeBytes\n      librarySizeBytes\n      estimatedTotalLibrarySizeBytes\n    }\n  }\n"): (typeof documents)["\n  fragment LibraryPathForm_ServerSettings on ServerSettings {\n    id\n    ...ChangeLibraryFolderControl_ServerSettings\n    libraryPath\n    storageStats {\n      totalDiskBytes\n      availableFreeBytes\n      librarySizeBytes\n      estimatedTotalLibrarySizeBytes\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdatePublicBaseUrl($input: UpdatePublicBaseUrlInput!) {\n    updatePublicBaseUrl(input: $input) {\n      ... on UpdatePublicBaseUrlSuccess {\n        serverSettings {\n          id\n          publicBaseUrl\n        }\n      }\n      ... on UpdatePublicBaseUrlError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdatePublicBaseUrl($input: UpdatePublicBaseUrlInput!) {\n    updatePublicBaseUrl(input: $input) {\n      ... on UpdatePublicBaseUrlSuccess {\n        serverSettings {\n          id\n          publicBaseUrl\n        }\n      }\n      ... on UpdatePublicBaseUrlError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SoulSeekConnectionSettings_Query {\n    serverSettings {\n      id\n      soulSeekHost\n      soulSeekPort\n      soulSeekUsername\n    }\n  }\n"): (typeof documents)["\n  query SoulSeekConnectionSettings_Query {\n    serverSettings {\n      id\n      soulSeekHost\n      soulSeekPort\n      soulSeekUsername\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateSoulSeekConnectionSettings($input: UpdateSoulSeekConnectionSettingsInput!) {\n    updateSoulSeekConnectionSettings(input: $input) {\n      __typename\n      ... on UpdateSoulSeekConnectionSettingsSuccess {\n        serverSettings { id soulSeekHost soulSeekPort soulSeekUsername }\n      }\n      ... on UpdateSoulSeekConnectionSettingsError { message }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateSoulSeekConnectionSettings($input: UpdateSoulSeekConnectionSettingsInput!) {\n    updateSoulSeekConnectionSettings(input: $input) {\n      __typename\n      ... on UpdateSoulSeekConnectionSettingsSuccess {\n        serverSettings { id soulSeekHost soulSeekPort soulSeekUsername }\n      }\n      ... on UpdateSoulSeekConnectionSettingsError { message }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SoulSeekSettings_Query {\n    serverSettings {\n      id\n      soulSeekSearchTimeLimitSeconds\n    }\n  }\n"): (typeof documents)["\n  query SoulSeekSettings_Query {\n    serverSettings {\n      id\n      soulSeekSearchTimeLimitSeconds\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateSoulSeekSearchTimeLimit($seconds: Int!) {\n    updateSoulSeekSearchTimeLimit(seconds: $seconds) {\n      __typename\n      ... on UpdateSoulSeekSearchTimeLimitSuccess {\n        serverSettings {\n          id\n          soulSeekSearchTimeLimitSeconds\n        }\n      }\n      ... on UpdateSoulSeekSearchTimeLimitError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateSoulSeekSearchTimeLimit($seconds: Int!) {\n    updateSoulSeekSearchTimeLimit(seconds: $seconds) {\n      __typename\n      ... on UpdateSoulSeekSearchTimeLimitSuccess {\n        serverSettings {\n          id\n          soulSeekSearchTimeLimitSeconds\n        }\n      }\n      ... on UpdateSoulSeekSearchTimeLimitError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TopTracksServiceSettings {\n    serverSettings {\n      id\n      listenBrainzTopTracksEnabled\n      spotifyTopTracksEnabled\n      lastFmTopTracksEnabled\n    }\n  }\n"): (typeof documents)["\n  query TopTracksServiceSettings {\n    serverSettings {\n      id\n      listenBrainzTopTracksEnabled\n      spotifyTopTracksEnabled\n      lastFmTopTracksEnabled\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateTopTracksServiceSettings(\n    $input: UpdateTopTracksServiceSettingsInput!\n  ) {\n    updateTopTracksServiceSettings(input: $input) {\n      ... on UpdateTopTracksServiceSettingsSuccess {\n        success\n        message\n      }\n      ... on UpdateTopTracksServiceSettingsError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateTopTracksServiceSettings(\n    $input: UpdateTopTracksServiceSettingsInput!\n  ) {\n    updateTopTracksServiceSettings(input: $input) {\n      ... on UpdateTopTracksServiceSettingsSuccess {\n        success\n        message\n      }\n      ... on UpdateTopTracksServiceSettingsError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment ChangeLibraryFolderControl_ServerSettings on ServerSettings {\n    libraryPath\n    serverLibraryManifestStatus {\n      id\n      hasLibraryManifest\n    }\n  }\n"): (typeof documents)["\n  fragment ChangeLibraryFolderControl_ServerSettings on ServerSettings {\n    libraryPath\n    serverLibraryManifestStatus {\n      id\n      hasLibraryManifest\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ChangeFolder_HasLibraryManifest($path: String!) {\n    fileSystem {\n      hasLibraryManifest(path: $path)\n    }\n  }\n"): (typeof documents)["\n  query ChangeFolder_HasLibraryManifest($path: String!) {\n    fileSystem {\n      hasLibraryManifest(path: $path)\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateLibraryPath($newLibraryPath: String!) {\n    updateLibraryPath(input: { newLibraryPath: $newLibraryPath }) {\n      ... on UpdateLibraryPathSuccess {\n        serverSettings {\n          id\n          libraryPath\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateLibraryPath($newLibraryPath: String!) {\n    updateLibraryPath(input: { newLibraryPath: $newLibraryPath }) {\n      ... on UpdateLibraryPathSuccess {\n        serverSettings {\n          id\n          libraryPath\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateLibraryManifest {\n    createLibraryManifest {\n      ... on CreateLibraryManifestSuccess {\n        serverLibraryManifestStatus {\n          id\n          hasLibraryManifest\n        }\n      }\n      ... on CreateLibraryManifestError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation CreateLibraryManifest {\n    createLibraryManifest {\n      ... on CreateLibraryManifestSuccess {\n        serverLibraryManifestStatus {\n          id\n          hasLibraryManifest\n        }\n      }\n      ... on CreateLibraryManifestError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment DirectoryTreeItem_FileSystemEntry on FileSystemEntry {\n    id\n    name\n    path\n    isDirectory\n    hasChildren\n    isAccessible\n    hasLibraryManifest\n  }\n"): (typeof documents)["\n  fragment DirectoryTreeItem_FileSystemEntry on FileSystemEntry {\n    id\n    name\n    path\n    isDirectory\n    hasChildren\n    isAccessible\n    hasLibraryManifest\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DirectoryTreeItem($path: String) {\n    fileSystem {\n      browseFileSystem(path: $path) {\n        id\n        isDirectory\n        path\n        ...DirectoryTreeItem_FileSystemEntry\n      }\n    }\n  }\n"): (typeof documents)["\n  query DirectoryTreeItem($path: String) {\n    fileSystem {\n      browseFileSystem(path: $path) {\n        id\n        isDirectory\n        path\n        ...DirectoryTreeItem_FileSystemEntry\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query BrowseFileSystem($path: String) {\n    fileSystem {\n      browseFileSystem(path: $path) {\n        path\n        isDirectory\n        hasLibraryManifest\n        ...DirectoryTreeItem_FileSystemEntry\n      }\n    }\n  }\n"): (typeof documents)["\n  query BrowseFileSystem($path: String) {\n    fileSystem {\n      browseFileSystem(path: $path) {\n        path\n        isDirectory\n        hasLibraryManifest\n        ...DirectoryTreeItem_FileSystemEntry\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Sidebar {\n    viewer {\n      id\n      username\n      isAdmin\n    }\n  }\n"): (typeof documents)["\n  query Sidebar {\n    viewer {\n      id\n      username\n      isAdmin\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ArtistImportQueuePanel_Query {\n    artistImport {\n      artistImportQueue {\n        id\n        queueLength\n        items {\n          id\n          artistName\n          songTitle\n        }\n      }\n      currentArtistImport {\n        id\n        artistName\n        songTitle\n        statusInfo {\n          id\n          text\n        }\n        totalReleases\n        completedReleases\n        errorMessage\n      }\n    }\n  }\n"): (typeof documents)["\n  query ArtistImportQueuePanel_Query {\n    artistImport {\n      artistImportQueue {\n        id\n        queueLength\n        items {\n          id\n          artistName\n          songTitle\n        }\n      }\n      currentArtistImport {\n        id\n        artistName\n        songTitle\n        statusInfo {\n          id\n          text\n        }\n        totalReleases\n        completedReleases\n        errorMessage\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription ArtistImportQueueUpdatedSub {\n    artistImportQueueUpdated {\n      id\n      queueLength\n      items {\n        id\n        artistName\n        songTitle\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription ArtistImportQueueUpdatedSub {\n    artistImportQueueUpdated {\n      id\n      queueLength\n      items {\n        id\n        artistName\n        songTitle\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription CurrentArtistImportUpdatedSub {\n    currentArtistImportUpdated {\n      id\n      artistName\n      songTitle\n      statusInfo {\n        id\n        text\n      }\n      totalReleases\n      completedReleases\n      errorMessage\n    }\n  }\n"): (typeof documents)["\n  subscription CurrentArtistImportUpdatedSub {\n    currentArtistImportUpdated {\n      id\n      artistName\n      songTitle\n      statusInfo {\n        id\n        text\n      }\n      totalReleases\n      completedReleases\n      errorMessage\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment SoulSeekNetworkStatus_SoulSeekStatus on SoulSeekStatus {\n    id\n    status\n  }\n"): (typeof documents)["\n  fragment SoulSeekNetworkStatus_SoulSeekStatus on SoulSeekStatus {\n    id\n    status\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription SoulSeekNetworkStatusSubscription {\n    soulSeekStatusUpdated {\n      ...SoulSeekNetworkStatus_SoulSeekStatus\n    }\n  }\n"): (typeof documents)["\n  subscription SoulSeekNetworkStatusSubscription {\n    soulSeekStatusUpdated {\n      ...SoulSeekNetworkStatus_SoulSeekStatus\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query SoulSeekNetworkStatusQuery {\n    external {\n      id\n      soulSeek {\n        id\n        status {\n          ...SoulSeekNetworkStatus_SoulSeekStatus\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query SoulSeekNetworkStatusQuery {\n    external {\n      id\n      soulSeek {\n        id\n        status {\n          ...SoulSeekNetworkStatus_SoulSeekStatus\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ImportSpotifyPlaylist($playlistId: String!, $userId: UUID!) {\n    importSpotifyPlaylist(input: { playlistId: $playlistId, userId: $userId }) {\n      __typename\n      ... on ImportSpotifyPlaylistSuccess {\n        playlist {\n          id\n          name\n        }\n      }\n      ... on ImportSpotifyPlaylistError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation ImportSpotifyPlaylist($playlistId: String!, $userId: UUID!) {\n    importSpotifyPlaylist(input: { playlistId: $playlistId, userId: $userId }) {\n      __typename\n      ... on ImportSpotifyPlaylistSuccess {\n        playlist {\n          id\n          name\n        }\n      }\n      ... on ImportSpotifyPlaylistError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment SpotifyPlaylistsList_SpotifyPlaylist on SpotifyPlaylist {\n    id\n    description\n    name\n    coverImageUrl\n  }\n"): (typeof documents)["\n  fragment SpotifyPlaylistsList_SpotifyPlaylist on SpotifyPlaylist {\n    id\n    description\n    name\n    coverImageUrl\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UserPlaylistsLoader_Query($spotifyUsername: String!) {\n    playlist {\n      importPlaylists {\n        spotify {\n          spotifyPlaylistsForUser(username: $spotifyUsername) {\n            id\n            ...SpotifyPlaylistsList_SpotifyPlaylist\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query UserPlaylistsLoader_Query($spotifyUsername: String!) {\n    playlist {\n      importPlaylists {\n        spotify {\n          spotifyPlaylistsForUser(username: $spotifyUsername) {\n            id\n            ...SpotifyPlaylistsList_SpotifyPlaylist\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment SpotifyPlaylistPanel_SpotifyPlaylist on SpotifyPlaylist {\n    id\n    name\n    description\n    coverImageUrl\n    totalTracks\n    tracks {\n      id\n      title\n      durationMs\n      artistNames\n      albumCoverImageUrl\n      previewUrl\n    }\n  }\n"): (typeof documents)["\n  fragment SpotifyPlaylistPanel_SpotifyPlaylist on SpotifyPlaylist {\n    id\n    name\n    description\n    coverImageUrl\n    totalTracks\n    tracks {\n      id\n      title\n      durationMs\n      artistNames\n      albumCoverImageUrl\n      previewUrl\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query ViewerIdForSpotifyImport {\n    viewer {\n      id\n    }\n  }\n"): (typeof documents)["\n  query ViewerIdForSpotifyImport {\n    viewer {\n      id\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation EnqueueArtistsFromSpotifyPlaylist($playlistId: String!) {\n    enqueueArtistsFromSpotifyPlaylist(input: { playlistId: $playlistId })\n  }\n"): (typeof documents)["\n  mutation EnqueueArtistsFromSpotifyPlaylist($playlistId: String!) {\n    enqueueArtistsFromSpotifyPlaylist(input: { playlistId: $playlistId })\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AdminCreateUser($input: CreateUserInput!) {\n    createUser(input: $input) {\n      __typename\n      ... on CreateUserSuccess {\n        users {\n          id\n          ...UserAdminPanel_User\n        }\n      }\n      ... on CreateUserError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AdminCreateUser($input: CreateUserInput!) {\n    createUser(input: $input) {\n      __typename\n      ... on CreateUserSuccess {\n        users {\n          id\n          ...UserAdminPanel_User\n        }\n      }\n      ... on CreateUserError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment UserAdminCard_User on User {\n    id\n    username\n    roles\n  }\n"): (typeof documents)["\n  fragment UserAdminCard_User on User {\n    id\n    username\n    roles\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment UserAdminPanel_Viewer on User {\n    id\n    roles\n    username\n    createdAt\n  }\n"): (typeof documents)["\n  fragment UserAdminPanel_Viewer on User {\n    id\n    roles\n    username\n    createdAt\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment UserAdminPanel_User on User {\n    id\n    ...UserDeleteButton_User\n    ...UserChangeUsernameButton_User\n    ...UserChangePasswordButton_User\n    ...UserRolesToggles_User\n    ...UserAdminCard_User\n    roles\n    username\n    createdAt\n    isAdmin\n  }\n"): (typeof documents)["\n  fragment UserAdminPanel_User on User {\n    id\n    ...UserDeleteButton_User\n    ...UserChangeUsernameButton_User\n    ...UserChangePasswordButton_User\n    ...UserRolesToggles_User\n    ...UserAdminCard_User\n    roles\n    username\n    createdAt\n    isAdmin\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment UserChangePasswordButton_User on User {\n    id\n    username\n  }\n"): (typeof documents)["\n  fragment UserChangePasswordButton_User on User {\n    id\n    username\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AdminSetUserPassword($input: SetUserPasswordInput!) {\n    setUserPassword(input: $input) {\n      __typename\n      ... on SetUserPasswordSuccess {\n        user {\n          ...UserAdminPanel_User\n        }\n      }\n      ... on SetUserPasswordError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AdminSetUserPassword($input: SetUserPasswordInput!) {\n    setUserPassword(input: $input) {\n      __typename\n      ... on SetUserPasswordSuccess {\n        user {\n          ...UserAdminPanel_User\n        }\n      }\n      ... on SetUserPasswordError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment UserChangeUsernameButton_User on User {\n    id\n    username\n  }\n"): (typeof documents)["\n  fragment UserChangeUsernameButton_User on User {\n    id\n    username\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AdminUpdateUserUsername($input: UpdateUserUsernameInput!) {\n    updateUserUsername(input: $input) {\n      __typename\n      ... on UpdateUserUsernameSuccess {\n        user {\n          ...UserAdminPanel_User\n        }\n      }\n      ... on UpdateUserUsernameError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation AdminUpdateUserUsername($input: UpdateUserUsernameInput!) {\n    updateUserUsername(input: $input) {\n      __typename\n      ... on UpdateUserUsernameSuccess {\n        user {\n          ...UserAdminPanel_User\n        }\n      }\n      ... on UpdateUserUsernameError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment UserDeleteButton_User on User {\n    id\n    username\n  }\n"): (typeof documents)["\n  fragment UserDeleteButton_User on User {\n    id\n    username\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation DeleteUser($input: DeleteUserInput!) {\n    deleteUser(input: $input) {\n      __typename\n      ... on DeleteUserSuccess {\n        deletedUserId\n        user {\n          users {\n            nodes {\n              ...UserAdminPanel_User\n            }\n          }\n        }\n      }\n      ... on DeleteUserError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation DeleteUser($input: DeleteUserInput!) {\n    deleteUser(input: $input) {\n      __typename\n      ... on DeleteUserSuccess {\n        deletedUserId\n        user {\n          users {\n            nodes {\n              ...UserAdminPanel_User\n            }\n          }\n        }\n      }\n      ... on DeleteUserError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment UserRolesToggles_User on User {\n    id\n    username\n    roles\n  }\n"): (typeof documents)["\n  fragment UserRolesToggles_User on User {\n    id\n    username\n    roles\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUserRoles($input: UpdateUserRolesInput!) {\n    updateUserRoles(input: $input) {\n      __typename\n      ... on UpdateUserRolesSuccess {\n        user {\n          id\n          ...UserAdminPanel_User\n        }\n      }\n      ... on UpdateUserRolesError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserRoles($input: UpdateUserRolesInput!) {\n    updateUserRoles(input: $input) {\n      __typename\n      ... on UpdateUserRolesSuccess {\n        user {\n          id\n          ...UserAdminPanel_User\n        }\n      }\n      ... on UpdateUserRolesError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment UserProfilePanel_User on User {\n    id\n    username\n    createdAt\n    updatedAt\n    listenBrainzUserId\n    hasListenBrainzToken\n  }\n"): (typeof documents)["\n  fragment UserProfilePanel_User on User {\n    id\n    username\n    createdAt\n    updatedAt\n    listenBrainzUserId\n    hasListenBrainzToken\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateUserListenBrainzCredentials(\n    $input: UpdateUserListenBrainzCredentialsInput!\n  ) {\n    updateUserListenBrainzCredentials(input: $input) {\n      ... on UpdateUserListenBrainzCredentialsSuccess {\n        user {\n          id\n          username\n          listenBrainzUserId\n          hasListenBrainzToken\n        }\n      }\n      ... on UpdateUserListenBrainzCredentialsError {\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateUserListenBrainzCredentials(\n    $input: UpdateUserListenBrainzCredentialsInput!\n  ) {\n    updateUserListenBrainzCredentials(input: $input) {\n      ... on UpdateUserListenBrainzCredentialsSuccess {\n        user {\n          id\n          username\n          listenBrainzUserId\n          hasListenBrainzToken\n        }\n      }\n      ... on UpdateUserListenBrainzCredentialsError {\n        message\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query UserProfileWidget {\n    viewer {\n      id\n      username\n    }\n  }\n"): (typeof documents)["\n  query UserProfileWidget {\n    viewer {\n      id\n      username\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;