
/**
 * Auto-generated by cache-keys-plugin.ts
 * DO NOT EDIT MANUALLY
 */

/**
 * Union type of all GraphQL object types that don't have an id field.
 * This is used to ensure that the cacheKeys object in UrqlCacheKeys.ts
 * includes all types without an id and doesn't include types with an id.
 */
export type TypesWithNoId = 'ArtistImages' | 'ArtistSearchRoot' | 'ArtistServerStatusImportingArtist' | 'ArtistServerStatusImportingArtistReleases' | 'ArtistServerStatusNotInLibrary' | 'ArtistServerStatusReady' | 'ArtistServerStatusSearchRoot' | 'ArtistServerStatusUpdatingArtist' | 'ArtistServerStatusUpdatingArtistReleases' | 'DownloadsSearchRoot' | 'ImportPlaylistSearchRoot' | 'LastFmStatistics' | 'LastFmTag' | 'MbAlbumImages' | 'MbLabelInfo' | 'MbMedium' | 'MbNameCredit' | 'MbRelation' | 'MusicBrainzArtistSearchRoot' | 'MusicBrainzRecordingSearchRoot' | 'MusicBrainzReleaseGroupSearchRoot' | 'MusicBrainzReleaseSearchRoot' | 'MusicBrainzSearchRoot' | 'NameCredit' | 'PageInfo' | 'PlaylistSearchRoot' | 'RecommendationsSearchRoot' | 'RecordingSearchRoot' | 'ReleaseGroupSearchRoot' | 'ReleaseSearchRoot' | 'SpotifyPlaylistSearchRoot' | 'UserProjection' | 'UserSearchRoot' | 'UsersConnection' | 'UsersEdge';

/**
 * Union type of all GraphQL object types that have an id field.
 * This is used for reference and validation.
 */
export type TypesWithId = 'Artist' | 'ArtistServerStatus' | 'DownloadStatus' | 'ExternalRoot' | 'Label' | 'LastFmAlbum' | 'LastFmArtist' | 'LastFmTrack' | 'LikedSong' | 'MbArtist' | 'MbGenre' | 'MbLabel' | 'MbRecording' | 'MbRecordingStreamingServiceInfo' | 'MbRelease' | 'MbReleaseGroup' | 'MbTrack' | 'Ping' | 'Recording' | 'RecordingStreamingServiceInfo' | 'Release' | 'ReleaseGroup' | 'SoulSeekRoot' | 'SoulSeekStatus' | 'SpotifyPlaylist' | 'Url' | 'User';

/**
 * Type guard to check if a type has an id field.
 * @param type The type to check
 * @returns True if the type has an id field, false otherwise
 */
export function hasIdField(type: string): type is TypesWithId {
  const typesWithId: string[] = ['Artist', 'ArtistServerStatus', 'DownloadStatus', 'ExternalRoot', 'Label', 'LastFmAlbum', 'LastFmArtist', 'LastFmTrack', 'LikedSong', 'MbArtist', 'MbGenre', 'MbLabel', 'MbRecording', 'MbRecordingStreamingServiceInfo', 'MbRelease', 'MbReleaseGroup', 'MbTrack', 'Ping', 'Recording', 'RecordingStreamingServiceInfo', 'Release', 'ReleaseGroup', 'SoulSeekRoot', 'SoulSeekStatus', 'SpotifyPlaylist', 'Url', 'User'];
  return typesWithId.includes(type);
}

/**
 * Type guard to check if a type doesn't have an id field.
 * @param type The type to check
 * @returns True if the type doesn't have an id field, false otherwise
 */
export function hasNoIdField(type: string): type is TypesWithNoId {
  const typesWithNoId: string[] = ['ArtistImages', 'ArtistSearchRoot', 'ArtistServerStatusImportingArtist', 'ArtistServerStatusImportingArtistReleases', 'ArtistServerStatusNotInLibrary', 'ArtistServerStatusReady', 'ArtistServerStatusSearchRoot', 'ArtistServerStatusUpdatingArtist', 'ArtistServerStatusUpdatingArtistReleases', 'DownloadsSearchRoot', 'ImportPlaylistSearchRoot', 'LastFmStatistics', 'LastFmTag', 'MbAlbumImages', 'MbLabelInfo', 'MbMedium', 'MbNameCredit', 'MbRelation', 'MusicBrainzArtistSearchRoot', 'MusicBrainzRecordingSearchRoot', 'MusicBrainzReleaseGroupSearchRoot', 'MusicBrainzReleaseSearchRoot', 'MusicBrainzSearchRoot', 'NameCredit', 'PageInfo', 'PlaylistSearchRoot', 'RecommendationsSearchRoot', 'RecordingSearchRoot', 'ReleaseGroupSearchRoot', 'ReleaseSearchRoot', 'SpotifyPlaylistSearchRoot', 'UserProjection', 'UserSearchRoot', 'UsersConnection', 'UsersEdge'];
  return typesWithNoId.includes(type);
}
