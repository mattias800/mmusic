import React, { useCallback, useEffect, useState } from "react";
import { graphql } from "@/gql";
import { useMutation, useQuery } from "urql";
import type {
  GetSpotifyPlaylistsForUserQuery,
  GetSpotifyPlaylistsForUserQueryVariables,
  ImportSpotifyPlaylistByIdMutation,
  ImportSpotifyPlaylistByIdMutationVariables,
} from "@/gql/graphql"; // Import generated DTO and Query/Mutation types

// GraphQL Operations - Now correctly typed by @/gql
const GET_SPOTIFY_PLAYLISTS_FOR_USER_DOC = graphql(`
  query GetSpotifyPlaylistsForUser($username: String!) {
    playlist {
      importPlaylists {
        spotify {
          spotifyPlaylistsForUser(username: $username) {
            id
            name
            coverImageUrl
            description
          }
        }
      }
    }
  }
`);

const IMPORT_SPOTIFY_PLAYLIST_BY_ID_DOC = graphql(`
  mutation ImportSpotifyPlaylistById($playlistId: String!, $userId: Int!) {
    importSpotifyPlaylistById(playlistId: $playlistId, userId: $userId)
  }
`);

// Removed manual SpotifyPlaylistGQL interface, as generated types will be used from fetchUserPlaylistsResult.data

// Types are often generated by graphql-codegen alongside the documents.
// Assuming they would look something like this if we had to define them manually:
// interface SpotifyPlaylistGQL {
//   playlistId: string;
//   name: string;
//   trackCount: number;
// }
// interface GetSpotifyPlaylistsData {
//   getSpotifyPlaylistsForUser: SpotifyPlaylistGQL[];
// }
// interface GetSpotifyPlaylistsVars {
//   username: string;
// }
// interface ImportSpotifyPlaylistData {
//   importSpotifyPlaylistById: boolean;
// }
// interface ImportSpotifyPlaylistVars {
//   playlistId: string;
//   userId: number;
// }

export const SpotifyImportPage: React.FC = () => {
  const [username, setUsername] = useState("");
  const [playlistIdInput, setPlaylistIdInput] = useState("");
  const [selectedPlaylist, setSelectedPlaylist] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [importSuccessMessage, setImportSuccessMessage] = useState<
    string | null
  >(null);

  const [fetchUserPlaylistsState, executeFetchUserPlaylists] = useQuery<
    GetSpotifyPlaylistsForUserQuery,
    GetSpotifyPlaylistsForUserQueryVariables
  >({
    query: GET_SPOTIFY_PLAYLISTS_FOR_USER_DOC,
    variables: { username },
    pause: true,
  });

  const [importPlaylistState, executeImportPlaylistMutation] = useMutation<
    ImportSpotifyPlaylistByIdMutation,
    ImportSpotifyPlaylistByIdMutationVariables
  >(IMPORT_SPOTIFY_PLAYLIST_BY_ID_DOC);

  const handleFetchPlaylists = useCallback(() => {
    if (!username.trim()) {
      setError("Please enter a Spotify username.");
      return;
    }
    setError(null);
    setImportSuccessMessage(null);
    setUserPlaylists([]);
    executeFetchUserPlaylists({ requestPolicy: "network-only" });
  }, [username, executeFetchUserPlaylists]);

  useEffect(() => {
    if (
      fetchUserPlaylistsState.data?.playlist.importPlaylists.spotify
        .spotifyPlaylistsForUser
    ) {
      setUserPlaylists(
        fetchUserPlaylistsState.data.playlist.importPlaylists.spotify
          .spotifyPlaylistsForUser,
      );
      setError(null);
    }
  }, [fetchUserPlaylistsState.data]);

  useEffect(() => {
    if (fetchUserPlaylistsState.error) {
      setError(
        fetchUserPlaylistsState.error.message || "Failed to fetch playlists",
      );
      setUserPlaylists([]);
    }
  }, [fetchUserPlaylistsState.error]);

  const handleImportPlaylist = useCallback(() => {
    const playlistToImport = selectedPlaylist || playlistIdInput;
    if (!playlistToImport) {
      setError("Please select a playlist or enter a playlist ID.");
      return;
    }
    setError(null);
    setImportSuccessMessage(null);

    const MOCK_USER_ID = 1;
    executeImportPlaylistMutation({
      playlistId: playlistToImport,
      userId: MOCK_USER_ID,
    });
  }, [selectedPlaylist, playlistIdInput, executeImportPlaylistMutation]);

  useEffect(() => {
    if (importPlaylistState.data?.importSpotifyPlaylistById) {
      const playlistName =
        userPlaylists.find(
          (p) => p.playlistId === (selectedPlaylist || playlistIdInput),
        )?.name ||
        selectedPlaylist ||
        playlistIdInput;
      setImportSuccessMessage(
        `Playlist ${playlistName} imported successfully!`,
      );
      setPlaylistIdInput("");
      setSelectedPlaylist(null);
    } else if (importPlaylistState.data?.importSpotifyPlaylistById === false) {
      setError("Failed to import playlist. The operation returned false.");
    }
  }, [
    importPlaylistState.data,
    userPlaylists,
    selectedPlaylist,
    playlistIdInput,
  ]);

  useEffect(() => {
    if (importPlaylistState.error) {
      setError(
        importPlaylistState.error.message || "Failed to import playlist",
      );
    }
  }, [importPlaylistState.error]);

  const isLoadingPlaylists = fetchUserPlaylistsState.fetching;
  const isImporting = importPlaylistState.fetching;

  return (
    <div style={{ padding: "20px", fontFamily: "Arial, sans-serif" }}>
      <h1>Import Spotify Playlists</h1>

      {error && <p style={{ color: "red" }}>Error: {error}</p>}
      {importSuccessMessage && (
        <p style={{ color: "green" }}>{importSuccessMessage}</p>
      )}

      <div style={{ marginBottom: "20px" }}>
        <h2>Get User's Playlists</h2>
        <input
          type="text"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
          placeholder="Spotify Username/ID"
          style={{ marginRight: "10px", padding: "8px" }}
          disabled={isLoadingPlaylists}
        />
        <button
          onClick={handleFetchPlaylists}
          disabled={isLoadingPlaylists || !username.trim()}
          style={{ padding: "8px 15px" }}
        >
          {isLoadingPlaylists ? "Fetching..." : "Get Playlists"}
        </button>
      </div>

      {isLoadingPlaylists && <p>Loading playlists...</p>}

      {!isLoadingPlaylists && userPlaylists.length > 0 && (
        <div style={{ marginBottom: "20px" }}>
          <h3>Available Playlists:</h3>
          <ul style={{ listStyleType: "none", padding: 0 }}>
            {userPlaylists.map((playlist) => (
              <li
                key={playlist.playlistId}
                style={{
                  marginBottom: "10px",
                  padding: "10px",
                  border: "1px solid #ccc",
                  borderRadius: "4px",
                }}
              >
                <div>
                  <strong>{playlist.name}</strong> ({playlist.trackCount}{" "}
                  tracks)
                </div>
                <button
                  onClick={() => setSelectedPlaylist(playlist.playlistId)}
                  disabled={
                    isImporting || selectedPlaylist === playlist.playlistId
                  }
                  style={{
                    marginTop: "5px",
                    padding: "5px 10px",
                    backgroundColor:
                      selectedPlaylist === playlist.playlistId
                        ? "#4CAF50"
                        : "#007bff",
                    color: "white",
                    border: "none",
                    borderRadius: "3px",
                    cursor: "pointer",
                  }}
                >
                  {selectedPlaylist === playlist.playlistId
                    ? "Selected"
                    : "Select for Import"}
                </button>
              </li>
            ))}
          </ul>
        </div>
      )}

      <div
        style={{
          marginTop: "30px",
          paddingTop: "20px",
          borderTop: "1px solid #eee",
        }}
      >
        <h2>Import Specific Playlist by ID</h2>
        <input
          type="text"
          value={playlistIdInput}
          onChange={(e) => {
            setPlaylistIdInput(e.target.value);
            setSelectedPlaylist(null);
          }}
          placeholder="Spotify Playlist ID"
          style={{ marginRight: "10px", padding: "8px" }}
          disabled={isImporting}
        />
      </div>

      <button
        onClick={handleImportPlaylist}
        disabled={isImporting || (!selectedPlaylist && !playlistIdInput.trim())}
        style={{
          marginTop: "10px",
          padding: "10px 20px",
          fontSize: "16px",
          backgroundColor: "#28a745",
          color: "white",
          border: "none",
          borderRadius: "4px",
          cursor: "pointer",
        }}
      >
        {isImporting ? "Importing..." : "Import Playlist"}
      </button>
    </div>
  );
};

// For routing, this page would typically be added to AppRouter.tsx
// e.g., <Route path="/import/spotify" element={<SpotifyImportPage />} />
