/* eslint-disable */
import type { PluginFunction } from "@graphql-codegen/plugin-helpers";
import * as graphql from "graphql";


/**
 * GraphQL CodeGen plugin that generates a TypesWithNoId type.
 * This type is a union of all object types in the schema that don't have an id field.
 * It can be used to ensure that the cacheKeys object in UrqlCacheKeys.ts includes
 * all types without an id and doesn't include types with an id.
 */
export const plugin: PluginFunction = (schema) => {
  // Get the GraphQL schema
  const graphQLSchema = schema;

  // Get all types from the schema
  const typeMap = graphQLSchema.getTypeMap();

  // Identify mutation result types
  const mutationResultTypeNames = new Set<string>();
  const mutationType = graphQLSchema.getMutationType();

  if (mutationType) {
    const mutationFields: graphql.GraphQLFieldMap<any, any> = mutationType.getFields();
    Object.keys(mutationFields).forEach((fieldName) => {
      const mutationField: graphql.GraphQLField<any, any, any> = mutationFields[fieldName];
      let returnType = mutationField.type;
      // Unwrap NonNull and List types to get the underlying named type
      while (
        returnType instanceof graphql.GraphQLNonNull ||
        returnType instanceof graphql.GraphQLList
      ) {
        returnType = returnType.ofType;
      }

      if (returnType instanceof graphql.GraphQLObjectType) {
        mutationResultTypeNames.add(returnType.name);
      } else if (returnType instanceof graphql.GraphQLUnionType) {
        returnType.getTypes().forEach((memberType) => {
          // Members of a UnionType are ObjectTypes
          mutationResultTypeNames.add(memberType.name);
        });
      }
    });
  }

  // Filter out internal types, scalars, unions, interfaces, etc.
  const objectTypes = Object.values(typeMap).filter(
    (type): type is graphql.GraphQLObjectType => {
      if (!(type instanceof graphql.GraphQLObjectType)) return false;
      if (type.name.startsWith("__")) return false; // Skip internal types
      if (type.name.endsWith("Input")) return false; // Skip input types
      // Skip Query, Mutation (root), and Subscription types
      if (
        type.name === "Query" ||
        type.name === "Mutation" ||
        type.name === "Subscription"
      ) {
        return false;
      }
      // Exclude identified mutation result types
      if (mutationResultTypeNames.has(type.name)) return false;

      return true;
    }
  );

  // Separate types into those with and without an id field
  const typesWithId: string[] = [];
  const typesWithoutId: string[] = [];

  objectTypes.forEach((type) => {
    const fields = type.getFields();
    const hasIdField = Object.values(fields).some(
      (field) => field.name === "id"
    );

    if (hasIdField) {
      typesWithId.push(type.name);
    } else {
      typesWithoutId.push(type.name);
    }
  });

  // Sort the types alphabetically for consistency
  typesWithoutId.sort();
  typesWithId.sort();

  // Generate the TypeScript code
  return `
/**
 * Auto-generated by cache-keys-plugin.ts
 * DO NOT EDIT MANUALLY
 */

/**
 * Union type of all GraphQL object types that don't have an id field.
 * This is used to ensure that the cacheKeys object in UrqlCacheKeys.ts
 * includes all types without an id and doesn't include types with an id.
 */
export type TypesWithNoId = ${typesWithoutId.map((t) => `'${t}'`).join(" | ")};

/**
 * Union type of all GraphQL object types that have an id field.
 * This is used for reference and validation.
 */
export type TypesWithId = ${typesWithId.map((t) => `'${t}'`).join(" | ")};

/**
 * Type guard to check if a type has an id field.
 * @param type The type to check
 * @returns True if the type has an id field, false otherwise
 */
export function hasIdField(type: string): type is TypesWithId {
  const typesWithId: string[] = [${typesWithId
    .map((t) => `'${t}'`)
    .join(", ")}];
  return typesWithId.includes(type);
}

/**
 * Type guard to check if a type doesn't have an id field.
 * @param type The type to check
 * @returns True if the type doesn't have an id field, false otherwise
 */
export function hasNoIdField(type: string): type is TypesWithNoId {
  const typesWithNoId: string[] = [${typesWithoutId
    .map((t) => `'${t}'`)
    .join(", ")}];
  return typesWithNoId.includes(type);
}
`;
};

export default { plugin };
