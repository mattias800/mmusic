import type { PluginFunction } from "@graphql-codegen/plugin-helpers/typings";
import { GraphQLObjectType, GraphQLSchema } from "graphql";

/**
 * GraphQL CodeGen plugin that generates a TypesWithNoId type.
 * This type is a union of all object types in the schema that don't have an id field.
 * It can be used to ensure that the cacheKeys object in UrqlCacheKeys.ts includes
 * all types without an id and doesn't include types with an id.
 */
export const plugin: PluginFunction = (schema) => {
  // Get the GraphQL schema
  const graphQLSchema = schema as unknown as GraphQLSchema;

  // Get all types from the schema
  const typeMap = graphQLSchema.getTypeMap();

  // Filter out internal types, scalars, unions, interfaces, etc.
  const objectTypes = Object.values(typeMap).filter(
    (type) =>
      type instanceof GraphQLObjectType &&
      !type.name.startsWith("__") && // Skip internal types
      type.name !== "Query" && // Skip Query type
      type.name !== "Mutation" && // Skip Mutation type
      type.name !== "Subscription" // Skip Subscription type
  ) as GraphQLObjectType[];

  // Separate types into those with and without an id field
  const typesWithId: string[] = [];
  const typesWithoutId: string[] = [];

  objectTypes.forEach((type) => {
    const fields = type.getFields();
    const hasIdField = Object.values(fields).some(
      (field) => field.name === "id"
    );

    if (hasIdField) {
      typesWithId.push(type.name);
    } else {
      typesWithoutId.push(type.name);
    }
  });

  // Sort the types alphabetically for consistency
  typesWithoutId.sort();
  typesWithId.sort();

  // Generate the TypeScript code
  return `
/**
 * Auto-generated by cache-keys-plugin.ts
 * DO NOT EDIT MANUALLY
 */

/**
 * Union type of all GraphQL object types that don't have an id field.
 * This is used to ensure that the cacheKeys object in UrqlCacheKeys.ts
 * includes all types without an id and doesn't include types with an id.
 */
export type TypesWithNoId = ${typesWithoutId.map((t) => `'${t}'`).join(" | ")};

/**
 * Union type of all GraphQL object types that have an id field.
 * This is used for reference and validation.
 */
export type TypesWithId = ${typesWithId.map((t) => `'${t}'`).join(" | ")};

/**
 * Type guard to check if a type has an id field.
 * @param type The type to check
 * @returns True if the type has an id field, false otherwise
 */
export function hasIdField(type: string): type is TypesWithId {
  const typesWithId: string[] = [${typesWithId
    .map((t) => `'${t}'`)
    .join(", ")}];
  return typesWithId.includes(type);
}

/**
 * Type guard to check if a type doesn't have an id field.
 * @param type The type to check
 * @returns True if the type doesn't have an id field, false otherwise
 */
export function hasNoIdField(type: string): type is TypesWithNoId {
  const typesWithNoId: string[] = [${typesWithoutId
    .map((t) => `'${t}'`)
    .join(", ")}];
  return typesWithNoId.includes(type);
}
`;
};

export default { plugin };
