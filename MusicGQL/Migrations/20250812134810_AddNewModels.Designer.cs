// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicGQL.Db.Postgres;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MusicGQL.Migrations
{
    [DbContext(typeof(EventDbContext))]
    [Migration("20250812134810_AddNewModels")]
    partial class AddNewModels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MusicGQL.Db.Postgres.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("ActorUserId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("character varying(34)");

                    b.HasKey("Id");

                    b.ToTable("Events");

                    b.HasDiscriminator().HasValue("Event");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("MusicGQL.Db.Postgres.Models.EventCheckpoint", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("LastProcessedEventId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("EventCheckpoints");
                });

            modelBuilder.Entity("MusicGQL.Features.Likes.Db.DbLikedSong", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LikedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("RecordingId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LikedByUserId");

                    b.HasIndex("LikedByUserId", "RecordingId")
                        .IsUnique();

                    b.ToTable("LikedSongs");
                });

            modelBuilder.Entity("MusicGQL.Features.PlayCounts.Db.DbTrackPlayCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ArtistId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ArtistName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("PlayCount")
                        .HasColumnType("bigint");

                    b.Property<string>("ReleaseFolderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReleaseTitle")
                        .HasColumnType("text");

                    b.Property<int>("TrackNumber")
                        .HasColumnType("integer");

                    b.Property<string>("TrackTitle")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId", "ReleaseFolderName", "TrackNumber")
                        .IsUnique();

                    b.ToTable("TrackPlayCounts", (string)null);
                });

            modelBuilder.Entity("MusicGQL.Features.PlayCounts.Db.DbUserTrackPlayCount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ArtistId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastPlayedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("PlayCount")
                        .HasColumnType("bigint");

                    b.Property<string>("ReleaseFolderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TrackNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "ArtistId", "ReleaseFolderName", "TrackNumber")
                        .IsUnique();

                    b.ToTable("UserTrackPlayCounts", (string)null);
                });

            modelBuilder.Entity("MusicGQL.Features.Playlists.Db.DbPlaylist", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Playlists", (string)null);
                });

            modelBuilder.Entity("MusicGQL.Features.Playlists.Db.DbPlaylistItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ArtistName")
                        .HasColumnType("text");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("ExternalAlbumId")
                        .HasColumnType("text");

                    b.Property<string>("ExternalArtistId")
                        .HasColumnType("text");

                    b.Property<int?>("ExternalService")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalTrackId")
                        .HasColumnType("text");

                    b.Property<string>("LocalArtistId")
                        .HasColumnType("text");

                    b.Property<string>("LocalCoverImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("LocalReleaseFolderName")
                        .HasColumnType("text");

                    b.Property<int?>("LocalTrackNumber")
                        .HasColumnType("integer");

                    b.Property<string>("PlaylistId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReleaseTitle")
                        .HasColumnType("text");

                    b.Property<string>("ReleaseType")
                        .HasColumnType("text");

                    b.Property<string>("SongTitle")
                        .HasColumnType("text");

                    b.Property<int?>("TrackLengthMs")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.ToTable("PlaylistItems", (string)null);
                });

            modelBuilder.Entity("MusicGQL.Features.ServerSettings.Db.DbServerSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DownloadPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LibraryPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SoulSeekSearchTimeLimitSeconds")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ServerSettings", (string)null);
                });

            modelBuilder.Entity("MusicGQL.Features.Users.Db.DbUser", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("MusicGQL.Db.Postgres.Models.UnknownEvent", b =>
                {
                    b.HasBaseType("MusicGQL.Db.Postgres.Models.Event");

                    b.HasDiscriminator().HasValue("Event");
                });

            modelBuilder.Entity("MusicGQL.Features.Likes.Events.LikedSong", b =>
                {
                    b.HasBaseType("MusicGQL.Db.Postgres.Models.Event");

                    b.Property<string>("RecordingId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubjectUserId")
                        .HasColumnType("uuid");

                    b.HasDiscriminator().HasValue("LikedSong");
                });

            modelBuilder.Entity("MusicGQL.Features.Likes.Events.UnlikedSong", b =>
                {
                    b.HasBaseType("MusicGQL.Db.Postgres.Models.Event");

                    b.Property<string>("RecordingId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubjectUserId")
                        .HasColumnType("uuid");

                    b.ToTable("Events", t =>
                        {
                            t.Property("RecordingId")
                                .HasColumnName("UnlikedSong_RecordingId");

                            t.Property("SubjectUserId")
                                .HasColumnName("UnlikedSong_SubjectUserId");
                        });

                    b.HasDiscriminator().HasValue("UnlikedSong");
                });

            modelBuilder.Entity("MusicGQL.Features.Playlists.Events.CreatedPlaylist", b =>
                {
                    b.HasBaseType("MusicGQL.Db.Postgres.Models.Event");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PlaylistId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("CreatedPlaylist");
                });

            modelBuilder.Entity("MusicGQL.Features.Playlists.Events.RenamedPlaylist", b =>
                {
                    b.HasBaseType("MusicGQL.Db.Postgres.Models.Event");

                    b.Property<string>("NewPlaylistName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlaylistId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Events", t =>
                        {
                            t.Property("PlaylistId")
                                .HasColumnName("RenamedPlaylist_PlaylistId");
                        });

                    b.HasDiscriminator().HasValue("RenamedPlaylist");
                });

            modelBuilder.Entity("MusicGQL.Features.Playlists.Events.SongAddedToPlaylist", b =>
                {
                    b.HasBaseType("MusicGQL.Db.Postgres.Models.Event");

                    b.Property<string>("ArtistName")
                        .HasColumnType("text");

                    b.Property<int?>("AtIndex")
                        .HasColumnType("integer");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("ExternalAlbumId")
                        .HasColumnType("text");

                    b.Property<string>("ExternalArtistId")
                        .HasColumnType("text");

                    b.Property<int?>("ExternalService")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalTrackId")
                        .HasColumnType("text");

                    b.Property<string>("LocalArtistId")
                        .HasColumnType("text");

                    b.Property<string>("LocalCoverImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("LocalReleaseFolderName")
                        .HasColumnType("text");

                    b.Property<int?>("LocalTrackNumber")
                        .HasColumnType("integer");

                    b.Property<string>("PlaylistId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PlaylistItemId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReleaseTitle")
                        .HasColumnType("text");

                    b.Property<string>("ReleaseType")
                        .HasColumnType("text");

                    b.Property<string>("SongTitle")
                        .HasColumnType("text");

                    b.Property<int?>("TrackLengthMs")
                        .HasColumnType("integer");

                    b.ToTable("Events", t =>
                        {
                            t.Property("CoverImageUrl")
                                .HasColumnName("SongAddedToPlaylist_CoverImageUrl");

                            t.Property("PlaylistId")
                                .HasColumnName("SongAddedToPlaylist_PlaylistId");
                        });

                    b.HasDiscriminator().HasValue("SongAddedToPlaylist");
                });

            modelBuilder.Entity("MusicGQL.Features.ServerSettings.Events.LibraryPathUpdated", b =>
                {
                    b.HasBaseType("MusicGQL.Db.Postgres.Models.Event");

                    b.Property<string>("NewPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("LibraryPathUpdated");
                });

            modelBuilder.Entity("MusicGQL.Features.Users.Events.UserCreated", b =>
                {
                    b.HasBaseType("MusicGQL.Db.Postgres.Models.Event");

                    b.Property<Guid>("SubjectUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Events", t =>
                        {
                            t.Property("SubjectUserId")
                                .HasColumnName("UserCreated_SubjectUserId");
                        });

                    b.HasDiscriminator().HasValue("UserCreated");
                });

            modelBuilder.Entity("MusicGQL.Features.Users.Events.UserPasswordHashUpdated", b =>
                {
                    b.HasBaseType("MusicGQL.Db.Postgres.Models.Event");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SubjectUserId")
                        .HasColumnType("uuid");

                    b.ToTable("Events", t =>
                        {
                            t.Property("SubjectUserId")
                                .HasColumnName("UserPasswordHashUpdated_SubjectUserId");
                        });

                    b.HasDiscriminator().HasValue("UserPasswordHashUpdated");
                });

            modelBuilder.Entity("MusicGQL.Features.Likes.Db.DbLikedSong", b =>
                {
                    b.HasOne("MusicGQL.Features.Users.Db.DbUser", "LikedBy")
                        .WithMany()
                        .HasForeignKey("LikedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LikedBy");
                });

            modelBuilder.Entity("MusicGQL.Features.Playlists.Db.DbPlaylist", b =>
                {
                    b.HasOne("MusicGQL.Features.Users.Db.DbUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MusicGQL.Features.Playlists.Db.DbPlaylistItem", b =>
                {
                    b.HasOne("MusicGQL.Features.Playlists.Db.DbPlaylist", "Playlist")
                        .WithMany("Items")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("MusicGQL.Features.Playlists.Db.DbPlaylist", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
